
EXP_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000918c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  08009320  08009320  0000a320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd8  08009bd8  0000b2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009be0  08009be0  0000b2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009be0  08009be0  0000abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009be4  08009be4  0000abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  08009be8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b2c4  2**0
                  CONTENTS
 10 .bss          00018b5c  200002c4  200002c4  0000b2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20018e20  20018e20  0000b2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b968  00000000  00000000  0000b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7e  00000000  00000000  00016c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000197e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6a  00000000  00000000  0001a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a7e  00000000  00000000  0001b06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d429  00000000  00000000  0003bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae3e8  00000000  00000000  00048f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f72f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ca4  00000000  00000000  000f733c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000fbfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009304 	.word	0x08009304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	08009304 	.word	0x08009304

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9be 	b.w	8001000 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff57 	bl	8000b8c <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff48 	bl	8000b8c <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4907      	ldr	r1, [pc, #28]	@ (80010a0 <__NVIC_EnableIRQ+0x38>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	@ (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	@ (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	@ 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800115e:	b480      	push	{r7}
 8001160:	b089      	sub	sp, #36	@ 0x24
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	332c      	adds	r3, #44	@ 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001176:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800117a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	fa92 f2a2 	rbit	r2, r2
 8001182:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d101      	bne.n	8001192 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 800118e:	2220      	movs	r2, #32
 8001190:	e003      	b.n	800119a <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	40d3      	lsrs	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	211f      	movs	r1, #31
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	401a      	ands	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f003 011f 	and.w	r1, r3, #31
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	431a      	orrs	r2, r3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011cc:	bf00      	nop
 80011ce:	3724      	adds	r7, #36	@ 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011fe:	b480      	push	{r7}
 8001200:	b08f      	sub	sp, #60	@ 0x3c
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	330c      	adds	r3, #12
 800120e:	4619      	mov	r1, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800121a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	fa92 f2a2 	rbit	r2, r2
 8001222:	613a      	str	r2, [r7, #16]
  return result;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	2a00      	cmp	r2, #0
 800122c:	d101      	bne.n	8001232 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800122e:	2220      	movs	r2, #32
 8001230:	e003      	b.n	800123a <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	40d3      	lsrs	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8001242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800124c:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8001250:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	6a39      	ldr	r1, [r7, #32]
 8001254:	fa91 f1a1 	rbit	r1, r1
 8001258:	61f9      	str	r1, [r7, #28]
  return result;
 800125a:	69f9      	ldr	r1, [r7, #28]
 800125c:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 800125e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001260:	2900      	cmp	r1, #0
 8001262:	d101      	bne.n	8001268 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8001264:	2120      	movs	r1, #32
 8001266:	e003      	b.n	8001270 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8001268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800126a:	fab1 f181 	clz	r1, r1
 800126e:	b2c9      	uxtb	r1, r1
 8001270:	40cb      	lsrs	r3, r1
 8001272:	2107      	movs	r1, #7
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8001282:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8001286:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800128a:	fa91 f1a1 	rbit	r1, r1
 800128e:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8001290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001292:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8001294:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001296:	2900      	cmp	r1, #0
 8001298:	d101      	bne.n	800129e <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 800129a:	2120      	movs	r1, #32
 800129c:	e003      	b.n	80012a6 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 800129e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012a0:	fab1 f181 	clz	r1, r1
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	40cb      	lsrs	r3, r1
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	431a      	orrs	r2, r3
 80012b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80012b4:	bf00      	nop
 80012b6:	373c      	adds	r7, #60	@ 0x3c
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <LL_DMA_SetDataTransferDirection+0x44>)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80012e0:	4908      	ldr	r1, [pc, #32]	@ (8001304 <LL_DMA_SetDataTransferDirection+0x44>)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	440b      	add	r3, r1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	440b      	add	r3, r1
 80012ee:	4619      	mov	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	080097dc 	.word	0x080097dc

08001308 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <LL_DMA_SetMode+0x44>)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8001328:	4908      	ldr	r1, [pc, #32]	@ (800134c <LL_DMA_SetMode+0x44>)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	440b      	add	r3, r1
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	440b      	add	r3, r1
 8001336:	4619      	mov	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	080097dc 	.word	0x080097dc

08001350 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LL_DMA_SetPeriphIncMode+0x44>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4413      	add	r3, r2
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001370:	4908      	ldr	r1, [pc, #32]	@ (8001394 <LL_DMA_SetPeriphIncMode+0x44>)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	440b      	add	r3, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	440b      	add	r3, r1
 800137e:	4619      	mov	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	080097dc 	.word	0x080097dc

08001398 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LL_DMA_SetMemoryIncMode+0x44>)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80013b8:	4908      	ldr	r1, [pc, #32]	@ (80013dc <LL_DMA_SetMemoryIncMode+0x44>)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	440b      	add	r3, r1
 80013c6:	4619      	mov	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	080097dc 	.word	0x080097dc

080013e0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LL_DMA_SetPeriphSize+0x44>)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8001400:	4908      	ldr	r1, [pc, #32]	@ (8001424 <LL_DMA_SetPeriphSize+0x44>)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	440b      	add	r3, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	440b      	add	r3, r1
 800140e:	4619      	mov	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	080097dc 	.word	0x080097dc

08001428 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LL_DMA_SetMemorySize+0x44>)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8001448:	4908      	ldr	r1, [pc, #32]	@ (800146c <LL_DMA_SetMemorySize+0x44>)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	440b      	add	r3, r1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	440b      	add	r3, r1
 8001456:	4619      	mov	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	080097dc 	.word	0x080097dc

08001470 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001490:	4908      	ldr	r1, [pc, #32]	@ (80014b4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	440b      	add	r3, r1
 800149e:	4619      	mov	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	080097dc 	.word	0x080097dc

080014b8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <LL_DMA_SetChannelSelection+0x44>)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80014d8:	4908      	ldr	r1, [pc, #32]	@ (80014fc <LL_DMA_SetChannelSelection+0x44>)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	440b      	add	r3, r1
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	440b      	add	r3, r1
 80014e6:	4619      	mov	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	080097dc 	.word	0x080097dc

08001500 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <LL_DMA_DisableFifoMode+0x3c>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <LL_DMA_DisableFifoMode+0x3c>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	440a      	add	r2, r1
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	4611      	mov	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	440a      	add	r2, r1
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6153      	str	r3, [r2, #20]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	080097dc 	.word	0x080097dc

08001540 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <LL_RCC_HSE_Enable+0x1c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <LL_RCC_HSE_Enable+0x1c>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <LL_RCC_HSE_IsReady+0x24>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <LL_RCC_SetSysClkSource+0x24>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 0203 	bic.w	r2, r3, #3
 8001598:	4904      	ldr	r1, [pc, #16]	@ (80015ac <LL_RCC_SetSysClkSource+0x24>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4313      	orrs	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40023800 	.word	0x40023800

080015b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <LL_RCC_GetSysClkSource+0x18>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023800 	.word	0x40023800

080015f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001604:	4904      	ldr	r1, [pc, #16]	@ (8001618 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40023800 	.word	0x40023800

0800161c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800162c:	4904      	ldr	r1, [pc, #16]	@ (8001640 <LL_RCC_SetAPB2Prescaler+0x24>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40023800 	.word	0x40023800

08001644 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <LL_RCC_PLL_Enable+0x1c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <LL_RCC_PLL_Enable+0x1c>)
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <LL_RCC_PLL_IsReady+0x24>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	4311      	orrs	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	0192      	lsls	r2, r2, #6
 80016ac:	430a      	orrs	r2, r1
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016bc:	4904      	ldr	r1, [pc, #16]	@ (80016d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40023800 	.word	0x40023800
 80016d4:	ffbf8000 	.word	0xffbf8000

080016d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023800 	.word	0x40023800

08001708 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001714:	4907      	ldr	r1, [pc, #28]	@ (8001734 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <LL_APB1_GRP1_EnableClock+0x2c>)
 800171e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4013      	ands	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40023800 	.word	0x40023800

08001738 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001744:	4907      	ldr	r1, [pc, #28]	@ (8001764 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4313      	orrs	r3, r2
 800174a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <LL_APB2_GRP1_EnableClock+0x2c>)
 800174e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40023800 	.word	0x40023800

08001768 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <LL_FLASH_SetLatency+0x24>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 0207 	bic.w	r2, r3, #7
 8001778:	4904      	ldr	r1, [pc, #16]	@ (800178c <LL_FLASH_SetLatency+0x24>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40023c00 	.word	0x40023c00

08001790 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <LL_FLASH_GetLatency+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00

080017ac <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80017bc:	4904      	ldr	r1, [pc, #16]	@ (80017d0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40007000 	.word	0x40007000

080017d4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f023 0210 	bic.w	r2, r3, #16
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001854:	f023 0307 	bic.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60da      	str	r2, [r3, #12]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	615a      	str	r2, [r3, #20]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	619a      	str	r2, [r3, #24]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	041a      	lsls	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4013      	ands	r3, r2
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43d9      	mvns	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	400b      	ands	r3, r1
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <Status_Led>:
        .bActive = true                      // Kích hoạt
    }
};

void Status_Led(void*)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_11);
 8001974:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001978:	4803      	ldr	r0, [pc, #12]	@ (8001988 <Status_Led+0x1c>)
 800197a:	f7ff ffdd 	bl	8001938 <LL_GPIO_TogglePin>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001992:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001996:	f7ff fecf 	bl	8001738 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800199a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800199e:	f7ff feb3 	bl	8001708 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a2:	2003      	movs	r0, #3
 80019a4:	f7ff fb2e 	bl	8001004 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80019a8:	f7ff fb50 	bl	800104c <__NVIC_GetPriorityGrouping>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2200      	movs	r2, #0
 80019b0:	210f      	movs	r1, #15
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fba0 	bl	80010f8 <NVIC_EncodePriority>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff fb70 	bl	80010a4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f874 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 fbbc 	bl	8002144 <MX_GPIO_Init>
  MX_DMA_Init();
 80019cc:	f000 fba2 	bl	8002114 <MX_DMA_Init>
  MX_SPI1_Init();
 80019d0:	f000 f9f6 	bl	8001dc0 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80019d4:	f000 fb3e 	bl	8002054 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80019d8:	f000 f8b4 	bl	8001b44 <MX_ADC1_Init>
  MX_SPI2_Init();
 80019dc:	f000 fa42 	bl	8001e64 <MX_SPI2_Init>
  MX_TIM1_Init();
 80019e0:	f000 faf8 	bl	8001fd4 <MX_TIM1_Init>
  MX_SPI3_Init();
 80019e4:	f000 faa2 	bl	8001f2c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  MCP4902_Device_Init(&DAC_device, SPI1, MCP4902_CS_GPIO_Port, MCP4902_CS_Pin, MCP4902_LATCH_GPIO_Port, MCP4902_LATCH_Pin);
 80019e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <main+0xf0>)
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f6:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <main+0xf0>)
 80019f8:	4921      	ldr	r1, [pc, #132]	@ (8001a80 <main+0xf4>)
 80019fa:	4822      	ldr	r0, [pc, #136]	@ (8001a84 <main+0xf8>)
 80019fc:	f003 feb2 	bl	8005764 <MCP4902_Device_Init>

  ADG1414_Chain_Init(&laser_int, SPI1, ADG1414_INT_CS_GPIO_Port, ADG1414_INT_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 8001a00:	2306      	movs	r3, #6
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a08:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <main+0xf0>)
 8001a0a:	491d      	ldr	r1, [pc, #116]	@ (8001a80 <main+0xf4>)
 8001a0c:	481e      	ldr	r0, [pc, #120]	@ (8001a88 <main+0xfc>)
 8001a0e:	f001 ffef 	bl	80039f0 <ADG1414_Chain_Init>
  ADG1414_Chain_Init(&laser_ext, SPI1, ADG1414_EXT_CS_GPIO_Port, ADG1414_EXT_CS_Pin, EXTERNAL_CHAIN_SWITCH_NUM);
 8001a12:	2301      	movs	r3, #1
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a1a:	4a18      	ldr	r2, [pc, #96]	@ (8001a7c <main+0xf0>)
 8001a1c:	4918      	ldr	r1, [pc, #96]	@ (8001a80 <main+0xf4>)
 8001a1e:	481b      	ldr	r0, [pc, #108]	@ (8001a8c <main+0x100>)
 8001a20:	f001 ffe6 	bl	80039f0 <ADG1414_Chain_Init>

  ADC_DMA_Init(&mcu_adc, ADC1, DMA2, LL_DMA_STREAM_0, 10);
 8001a24:	230a      	movs	r3, #10
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <main+0x104>)
 8001a2c:	4919      	ldr	r1, [pc, #100]	@ (8001a94 <main+0x108>)
 8001a2e:	481a      	ldr	r0, [pc, #104]	@ (8001a98 <main+0x10c>)
 8001a30:	f001 febc 	bl	80037ac <ADC_DMA_Init>

  ADG1414_Chain_Init(&photo_sw, SPI2, PD_SW_CS_GPIO_Port, PD_SW_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 8001a34:	2306      	movs	r3, #6
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a3c:	4a17      	ldr	r2, [pc, #92]	@ (8001a9c <main+0x110>)
 8001a3e:	4918      	ldr	r1, [pc, #96]	@ (8001aa0 <main+0x114>)
 8001a40:	4818      	ldr	r0, [pc, #96]	@ (8001aa4 <main+0x118>)
 8001a42:	f001 ffd5 	bl	80039f0 <ADG1414_Chain_Init>
  ADS8327_Device_Init(&photo_adc, SPI2, PD_ADC_CS_GPIO_Port, PD_ADC_CS_Pin, PD_ADC_CV_GPIO_Port, PD_ADC_CV_Pin, PD_ADC_EOC_GPIO_Port, PD_ADC_EOC_Pin);
 8001a46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4a:	9303      	str	r3, [sp, #12]
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <main+0x11c>)
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <main+0x110>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <main+0x110>)
 8001a60:	490f      	ldr	r1, [pc, #60]	@ (8001aa0 <main+0x114>)
 8001a62:	4812      	ldr	r0, [pc, #72]	@ (8001aac <main+0x120>)
 8001a64:	f002 fc21 	bl	80042aa <ADS8327_Device_Init>
//  LL_TIM_EnableIT_UPDATE(TIM1);  // Bật ngắt Update
//  LL_TIM_EnableCounter(TIM1);    // Bật timer

  SchedulerInit(1000);
 8001a68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a6c:	f004 fc2e 	bl	80062cc <SchedulerInit>
  command_init();
 8001a70:	f002 fd10 	bl	8004494 <command_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 8001a74:	f004 fc4c 	bl	8006310 <SchedulerRun>
 8001a78:	e7fc      	b.n	8001a74 <main+0xe8>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40013000 	.word	0x40013000
 8001a84:	2001899c 	.word	0x2001899c
 8001a88:	200189b4 	.word	0x200189b4
 8001a8c:	200189d4 	.word	0x200189d4
 8001a90:	40026400 	.word	0x40026400
 8001a94:	40012000 	.word	0x40012000
 8001a98:	200189f4 	.word	0x200189f4
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40003800 	.word	0x40003800
 8001aa4:	20018a24 	.word	0x20018a24
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	20018a44 	.word	0x20018a44

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001ab4:	2005      	movs	r0, #5
 8001ab6:	f7ff fe57 	bl	8001768 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001aba:	bf00      	nop
 8001abc:	f7ff fe68 	bl	8001790 <LL_FLASH_GetLatency>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d1fa      	bne.n	8001abc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001ac6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001aca:	f7ff fe6f 	bl	80017ac <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001ace:	f7ff fd37 	bl	8001540 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff fd44 	bl	8001560 <LL_RCC_HSE_IsReady>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d1fa      	bne.n	8001ad4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	22a8      	movs	r2, #168	@ 0xa8
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001ae8:	f7ff fdd0 	bl	800168c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001aec:	f7ff fdaa 	bl	8001644 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001af0:	bf00      	nop
 8001af2:	f7ff fdb7 	bl	8001664 <LL_RCC_PLL_IsReady>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1fa      	bne.n	8001af2 <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001afc:	bf00      	nop
 8001afe:	f7ff fe69 	bl	80017d4 <LL_PWR_IsActiveFlag_VOS>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0fa      	beq.n	8001afe <SystemClock_Config+0x4e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fd5f 	bl	80015cc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001b0e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001b12:	f7ff fd6f 	bl	80015f4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001b16:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b1a:	f7ff fd7f 	bl	800161c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7ff fd32 	bl	8001588 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b24:	bf00      	nop
 8001b26:	f7ff fd43 	bl	80015b0 <LL_RCC_GetSysClkSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d1fa      	bne.n	8001b26 <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(168000000);
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <SystemClock_Config+0x90>)
 8001b32:	f001 fd4f 	bl	80035d4 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001b36:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <SystemClock_Config+0x90>)
 8001b38:	f001 fd80 	bl	800363c <LL_SetSystemCoreClock>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	0a037a00 	.word	0x0a037a00

08001b44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b092      	sub	sp, #72	@ 0x48
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001b4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001b56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001b66:	f107 0318 	add.w	r3, r7, #24
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	463b      	mov	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001b84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b88:	f7ff fdd6 	bl	8001738 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	f7ff fda3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fda0 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7ff fd9d 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP_1_Pin|ADC_TEMP_2_Pin|ADC_TEMP_3_Pin|ADC_TEMP_4_Pin
 8001b9e:	233f      	movs	r3, #63	@ 0x3f
 8001ba0:	603b      	str	r3, [r7, #0]
                          |ADC_TEMP_5_Pin|ADC_TEMP_6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4875      	ldr	r0, [pc, #468]	@ (8001d84 <MX_ADC1_Init+0x240>)
 8001bb0:	f000 ff09 	bl	80029c6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_INT_Pin|ADC_EXT_Pin;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4870      	ldr	r0, [pc, #448]	@ (8001d88 <MX_ADC1_Init+0x244>)
 8001bc6:	f000 fefe 	bl	80029c6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP_7_Pin|ADC_TEMP_8_Pin;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4619      	mov	r1, r3
 8001bda:	486c      	ldr	r0, [pc, #432]	@ (8001d8c <MX_ADC1_Init+0x248>)
 8001bdc:	f000 fef3 	bl	80029c6 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	486a      	ldr	r0, [pc, #424]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001be6:	f7ff fc67 	bl	80014b8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	4868      	ldr	r0, [pc, #416]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001bf0:	f7ff fb66 	bl	80012c0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4865      	ldr	r0, [pc, #404]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001bfa:	f7ff fc39 	bl	8001470 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001bfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c02:	2100      	movs	r1, #0
 8001c04:	4862      	ldr	r0, [pc, #392]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001c06:	f7ff fb7f 	bl	8001308 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4860      	ldr	r0, [pc, #384]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001c10:	f7ff fb9e 	bl	8001350 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001c14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c18:	2100      	movs	r1, #0
 8001c1a:	485d      	ldr	r0, [pc, #372]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001c1c:	f7ff fbbc 	bl	8001398 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8001c20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c24:	2100      	movs	r1, #0
 8001c26:	485a      	ldr	r0, [pc, #360]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001c28:	f7ff fbda 	bl	80013e0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8001c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c30:	2100      	movs	r1, #0
 8001c32:	4857      	ldr	r0, [pc, #348]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001c34:	f7ff fbf8 	bl	8001428 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4855      	ldr	r0, [pc, #340]	@ (8001d90 <MX_ADC1_Init+0x24c>)
 8001c3c:	f7ff fc60 	bl	8001500 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001c4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c52:	4619      	mov	r1, r3
 8001c54:	484f      	ldr	r0, [pc, #316]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001c56:	f000 fcfd 	bl	8002654 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS;
 8001c5e:	f44f 0310 	mov.w	r3, #9437184	@ 0x900000
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001c6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001c72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4846      	ldr	r0, [pc, #280]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001c7a:	f000 fd17 	bl	80026ac <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001c7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c82:	4844      	ldr	r0, [pc, #272]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001c84:	f7ff faa8 	bl	80011d8 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c8c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	4619      	mov	r1, r3
 8001c98:	483f      	ldr	r0, [pc, #252]	@ (8001d98 <MX_ADC1_Init+0x254>)
 8001c9a:	f000 fc93 	bl	80025c4 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d9c <MX_ADC1_Init+0x258>)
 8001ca0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ca4:	483b      	ldr	r0, [pc, #236]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001ca6:	f7ff fa5a 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001caa:	2201      	movs	r2, #1
 8001cac:	493b      	ldr	r1, [pc, #236]	@ (8001d9c <MX_ADC1_Init+0x258>)
 8001cae:	4839      	ldr	r0, [pc, #228]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cb0:	f7ff faa5 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8001cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <MX_ADC1_Init+0x25c>)
 8001cb6:	f240 2105 	movw	r1, #517	@ 0x205
 8001cba:	4836      	ldr	r0, [pc, #216]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cbc:	f7ff fa4f 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4937      	ldr	r1, [pc, #220]	@ (8001da0 <MX_ADC1_Init+0x25c>)
 8001cc4:	4833      	ldr	r0, [pc, #204]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cc6:	f7ff fa9a 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_10);
 8001cca:	220a      	movs	r2, #10
 8001ccc:	f240 210a 	movw	r1, #522	@ 0x20a
 8001cd0:	4830      	ldr	r0, [pc, #192]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cd2:	f7ff fa44 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	210a      	movs	r1, #10
 8001cda:	482e      	ldr	r0, [pc, #184]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cdc:	f7ff fa8f 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_11);
 8001ce0:	4a30      	ldr	r2, [pc, #192]	@ (8001da4 <MX_ADC1_Init+0x260>)
 8001ce2:	f240 210f 	movw	r1, #527	@ 0x20f
 8001ce6:	482b      	ldr	r0, [pc, #172]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001ce8:	f7ff fa39 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001cec:	2201      	movs	r2, #1
 8001cee:	492d      	ldr	r1, [pc, #180]	@ (8001da4 <MX_ADC1_Init+0x260>)
 8001cf0:	4828      	ldr	r0, [pc, #160]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cf2:	f7ff fa84 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_12);
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001da8 <MX_ADC1_Init+0x264>)
 8001cf8:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8001cfc:	4825      	ldr	r0, [pc, #148]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001cfe:	f7ff fa2e 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d02:	2201      	movs	r2, #1
 8001d04:	4928      	ldr	r1, [pc, #160]	@ (8001da8 <MX_ADC1_Init+0x264>)
 8001d06:	4823      	ldr	r0, [pc, #140]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d08:	f7ff fa79 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_13);
 8001d0c:	4a27      	ldr	r2, [pc, #156]	@ (8001dac <MX_ADC1_Init+0x268>)
 8001d0e:	f240 2119 	movw	r1, #537	@ 0x219
 8001d12:	4820      	ldr	r0, [pc, #128]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d14:	f7ff fa23 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4924      	ldr	r1, [pc, #144]	@ (8001dac <MX_ADC1_Init+0x268>)
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d1e:	f7ff fa6e 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_14);
 8001d22:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <MX_ADC1_Init+0x26c>)
 8001d24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d28:	481a      	ldr	r0, [pc, #104]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d2a:	f7ff fa18 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	491f      	ldr	r1, [pc, #124]	@ (8001db0 <MX_ADC1_Init+0x26c>)
 8001d32:	4818      	ldr	r0, [pc, #96]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d34:	f7ff fa63 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_15);
 8001d38:	4a1e      	ldr	r2, [pc, #120]	@ (8001db4 <MX_ADC1_Init+0x270>)
 8001d3a:	f240 1105 	movw	r1, #261	@ 0x105
 8001d3e:	4815      	ldr	r0, [pc, #84]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d40:	f7ff fa0d 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d44:	2201      	movs	r2, #1
 8001d46:	491b      	ldr	r1, [pc, #108]	@ (8001db4 <MX_ADC1_Init+0x270>)
 8001d48:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d4a:	f7ff fa58 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_8);
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001db8 <MX_ADC1_Init+0x274>)
 8001d50:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001d54:	480f      	ldr	r0, [pc, #60]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d56:	f7ff fa02 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <MX_ADC1_Init+0x274>)
 8001d5e:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d60:	f7ff fa4d 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_9);
 8001d64:	4a15      	ldr	r2, [pc, #84]	@ (8001dbc <MX_ADC1_Init+0x278>)
 8001d66:	f240 110f 	movw	r1, #271	@ 0x10f
 8001d6a:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d6c:	f7ff f9f7 	bl	800115e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d70:	2201      	movs	r2, #1
 8001d72:	4912      	ldr	r1, [pc, #72]	@ (8001dbc <MX_ADC1_Init+0x278>)
 8001d74:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <MX_ADC1_Init+0x250>)
 8001d76:	f7ff fa42 	bl	80011fe <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3748      	adds	r7, #72	@ 0x48
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40026400 	.word	0x40026400
 8001d94:	40012000 	.word	0x40012000
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	02600002 	.word	0x02600002
 8001da0:	02900003 	.word	0x02900003
 8001da4:	0030000b 	.word	0x0030000b
 8001da8:	0060000c 	.word	0x0060000c
 8001dac:	0090000d 	.word	0x0090000d
 8001db0:	00c0000e 	.word	0x00c0000e
 8001db4:	00f0000f 	.word	0x00f0000f
 8001db8:	03800008 	.word	0x03800008
 8001dbc:	03b00009 	.word	0x03b00009

08001dc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b090      	sub	sp, #64	@ 0x40
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001dc6:	f107 0318 	add.w	r3, r7, #24
 8001dca:	2228      	movs	r2, #40	@ 0x28
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fa97 	bl	8007302 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001de4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001de8:	f7ff fca6 	bl	8001738 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff fc73 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001df2:	23e0      	movs	r3, #224	@ 0xe0
 8001df4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001df6:	2302      	movs	r3, #2
 8001df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e06:	2305      	movs	r3, #5
 8001e08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4813      	ldr	r0, [pc, #76]	@ (8001e5c <MX_SPI1_Init+0x9c>)
 8001e10:	f000 fdd9 	bl	80029c6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e18:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e1c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001e30:	2318      	movs	r3, #24
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	@ (8001e60 <MX_SPI1_Init+0xa0>)
 8001e48:	f000 ff9b 	bl	8002d82 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_SPI1_Init+0xa0>)
 8001e50:	f7ff fcd4 	bl	80017fc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	3740      	adds	r7, #64	@ 0x40
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40013000 	.word	0x40013000

08001e64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b090      	sub	sp, #64	@ 0x40
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001e6a:	f107 0318 	add.w	r3, r7, #24
 8001e6e:	2228      	movs	r2, #40	@ 0x28
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f005 fa45 	bl	8007302 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001e88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e8c:	f7ff fc3c 	bl	8001708 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7ff fc21 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PD_SCK_Pin|PD_MISO_Pin|PD_MOSI_Pin;
 8001e96:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001eac:	2305      	movs	r3, #5
 8001eae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481b      	ldr	r0, [pc, #108]	@ (8001f24 <MX_SPI2_Init+0xc0>)
 8001eb6:	f000 fd86 	bl	80029c6 <LL_GPIO_Init>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001eba:	f7ff f8c7 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f917 	bl	80010f8 <NVIC_EncodePriority>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2024      	movs	r0, #36	@ 0x24
 8001ed0:	f7ff f8e8 	bl	80010a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8001ed4:	2024      	movs	r0, #36	@ 0x24
 8001ed6:	f7ff f8c7 	bl	8001068 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001ede:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001ee2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001ef6:	2318      	movs	r3, #24
 8001ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001f02:	230a      	movs	r3, #10
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <MX_SPI2_Init+0xc4>)
 8001f0e:	f000 ff38 	bl	8002d82 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001f12:	2100      	movs	r1, #0
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_SPI2_Init+0xc4>)
 8001f16:	f7ff fc71 	bl	80017fc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3740      	adds	r7, #64	@ 0x40
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40003800 	.word	0x40003800

08001f2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b090      	sub	sp, #64	@ 0x40
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	2228      	movs	r2, #40	@ 0x28
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f005 f9e1 	bl	8007302 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001f50:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001f54:	f7ff fbd8 	bl	8001708 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f58:	2004      	movs	r0, #4
 8001f5a:	f7ff fbbd 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = FRAM_SCK_Pin|FRAM_MISO_Pin|FRAM_MOSI_Pin;
 8001f5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f64:	2302      	movs	r3, #2
 8001f66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001f74:	2306      	movs	r3, #6
 8001f76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4813      	ldr	r0, [pc, #76]	@ (8001fcc <MX_SPI3_Init+0xa0>)
 8001f7e:	f000 fd22 	bl	80029c6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001f86:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001f8a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8001f8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f90:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001fac:	230a      	movs	r3, #10
 8001fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <MX_SPI3_Init+0xa4>)
 8001fb8:	f000 fee3 	bl	8002d82 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <MX_SPI3_Init+0xa4>)
 8001fc0:	f7ff fc1c 	bl	80017fc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	3740      	adds	r7, #64	@ 0x40
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40003c00 	.word	0x40003c00

08001fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff fba5 	bl	8001738 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fee:	f7ff f82d 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f87d 	bl	80010f8 <NVIC_EncodePriority>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4619      	mov	r1, r3
 8002002:	2019      	movs	r0, #25
 8002004:	f7ff f84e 	bl	80010a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002008:	2019      	movs	r0, #25
 800200a:	f7ff f82d 	bl	8001068 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 167;
 800200e:	23a7      	movs	r3, #167	@ 0xa7
 8002010:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	480a      	ldr	r0, [pc, #40]	@ (8002050 <MX_TIM1_Init+0x7c>)
 8002028:	f000 ff38 	bl	8002e9c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 800202c:	4808      	ldr	r0, [pc, #32]	@ (8002050 <MX_TIM1_Init+0x7c>)
 800202e:	f7ff fbf8 	bl	8001822 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002032:	2100      	movs	r1, #0
 8002034:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_TIM1_Init+0x7c>)
 8002036:	f7ff fc04 	bl	8001842 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800203a:	2100      	movs	r1, #0
 800203c:	4804      	ldr	r0, [pc, #16]	@ (8002050 <MX_TIM1_Init+0x7c>)
 800203e:	f7ff fc15 	bl	800186c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002042:	4803      	ldr	r0, [pc, #12]	@ (8002050 <MX_TIM1_Init+0x7c>)
 8002044:	f7ff fc25 	bl	8001892 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40010000 	.word	0x40010000

08002054 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	@ 0x38
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800207e:	2020      	movs	r0, #32
 8002080:	f7ff fb5a 	bl	8001738 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002084:	2004      	movs	r0, #4
 8002086:	f7ff fb27 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800208a:	23c0      	movs	r3, #192	@ 0xc0
 800208c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800208e:	2302      	movs	r3, #2
 8002090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800209e:	2308      	movs	r3, #8
 80020a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4819      	ldr	r0, [pc, #100]	@ (800210c <MX_USART6_UART_Init+0xb8>)
 80020a8:	f000 fc8d 	bl	80029c6 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020ac:	f7fe ffce 	bl	800104c <__NVIC_GetPriorityGrouping>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f81e 	bl	80010f8 <NVIC_EncodePriority>
 80020bc:	4603      	mov	r3, r0
 80020be:	4619      	mov	r1, r3
 80020c0:	2047      	movs	r0, #71	@ 0x47
 80020c2:	f7fe ffef 	bl	80010a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80020c6:	2047      	movs	r0, #71	@ 0x47
 80020c8:	f7fe ffce 	bl	8001068 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 80020cc:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80020d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80020de:	230c      	movs	r3, #12
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <MX_USART6_UART_Init+0xbc>)
 80020f2:	f001 f9d5 	bl	80034a0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80020f6:	4806      	ldr	r0, [pc, #24]	@ (8002110 <MX_USART6_UART_Init+0xbc>)
 80020f8:	f7ff fbeb 	bl	80018d2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <MX_USART6_UART_Init+0xbc>)
 80020fe:	f7ff fbd8 	bl	80018b2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3738      	adds	r7, #56	@ 0x38
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020800 	.word	0x40020800
 8002110:	40011400 	.word	0x40011400

08002114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002118:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800211c:	f7ff fadc 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002120:	f7fe ff94 	bl	800104c <__NVIC_GetPriorityGrouping>
 8002124:	4603      	mov	r3, r0
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ffe4 	bl	80010f8 <NVIC_EncodePriority>
 8002130:	4603      	mov	r3, r0
 8002132:	4619      	mov	r1, r3
 8002134:	2038      	movs	r0, #56	@ 0x38
 8002136:	f7fe ffb5 	bl	80010a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800213a:	2038      	movs	r0, #56	@ 0x38
 800213c:	f7fe ff94 	bl	8001068 <__NVIC_EnableIRQ>

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	463b      	mov	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
 8002158:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800215a:	2080      	movs	r0, #128	@ 0x80
 800215c:	f7ff fabc 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002160:	2004      	movs	r0, #4
 8002162:	f7ff fab9 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002166:	2001      	movs	r0, #1
 8002168:	f7ff fab6 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800216c:	2002      	movs	r0, #2
 800216e:	f7ff fab3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8002172:	2010      	movs	r0, #16
 8002174:	f7ff fab0 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002178:	2008      	movs	r0, #8
 800217a:	f7ff faad 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, STATUS_LED_Pin|MCP4902_CS_Pin|ADG1414_EXT_CS_Pin|ADG1414_INT_CS_Pin
 800217e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002182:	482e      	ldr	r0, [pc, #184]	@ (800223c <MX_GPIO_Init+0xf8>)
 8002184:	f7ff fbbb 	bl	80018fe <LL_GPIO_SetOutputPin>
                          |MCP4902_LATCH_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOD, PD_SW_CS_Pin|PD_ADC_CS_Pin|PD_ADC_CV_Pin);
 8002188:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800218c:	482c      	ldr	r0, [pc, #176]	@ (8002240 <MX_GPIO_Init+0xfc>)
 800218e:	f7ff fbb6 	bl	80018fe <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FRAM_CS_GPIO_Port, FRAM_CS_Pin);
 8002192:	2104      	movs	r1, #4
 8002194:	482a      	ldr	r0, [pc, #168]	@ (8002240 <MX_GPIO_Init+0xfc>)
 8002196:	f7ff fbc0 	bl	800191a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = STATUS_LED_Pin|ADG1414_EXT_CS_Pin|ADG1414_INT_CS_Pin|MCP4902_LATCH_Pin;
 800219a:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 800219e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021a0:	2301      	movs	r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b0:	463b      	mov	r3, r7
 80021b2:	4619      	mov	r1, r3
 80021b4:	4821      	ldr	r0, [pc, #132]	@ (800223c <MX_GPIO_Init+0xf8>)
 80021b6:	f000 fc06 	bl	80029c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCP4902_CS_Pin;
 80021ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021c0:	2301      	movs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCP4902_CS_GPIO_Port, &GPIO_InitStruct);
 80021d0:	463b      	mov	r3, r7
 80021d2:	4619      	mov	r1, r3
 80021d4:	4819      	ldr	r0, [pc, #100]	@ (800223c <MX_GPIO_Init+0xf8>)
 80021d6:	f000 fbf6 	bl	80029c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PD_SW_CS_Pin|FRAM_CS_Pin;
 80021da:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80021de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021e0:	2301      	movs	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f0:	463b      	mov	r3, r7
 80021f2:	4619      	mov	r1, r3
 80021f4:	4812      	ldr	r0, [pc, #72]	@ (8002240 <MX_GPIO_Init+0xfc>)
 80021f6:	f000 fbe6 	bl	80029c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PD_ADC_CS_Pin|PD_ADC_CV_Pin;
 80021fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002200:	2301      	movs	r3, #1
 8002202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	480a      	ldr	r0, [pc, #40]	@ (8002240 <MX_GPIO_Init+0xfc>)
 8002216:	f000 fbd6 	bl	80029c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PD_ADC_EOC_Pin;
 800221a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800221e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002224:	2301      	movs	r3, #1
 8002226:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PD_ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 8002228:	463b      	mov	r3, r7
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <MX_GPIO_Init+0x100>)
 800222e:	f000 fbca 	bl	80029c6 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40020800 	.word	0x40020800

08002248 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f06f 0201 	mvn.w	r2, #1
 8002256:	611a      	str	r2, [r3, #16]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_TIM_IsEnabledIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <LL_TIM_IsEnabledIT_UPDATE+0x18>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <NMI_Handler+0x4>

080022b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <MemManage_Handler+0x4>

080022c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 8002306:	f003 ffd3 	bl	80062b0 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	// Kiểm tra cờ ngắt Update
	if (LL_TIM_IsActiveFlag_UPDATE(TIM1) && LL_TIM_IsEnabledIT_UPDATE(TIM1))
 8002314:	4809      	ldr	r0, [pc, #36]	@ (800233c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002316:	f7ff ffa5 	bl	8002264 <LL_TIM_IsActiveFlag_UPDATE>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <TIM1_UP_TIM10_IRQHandler+0x28>
 8002320:	4806      	ldr	r0, [pc, #24]	@ (800233c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002322:	f7ff ffb2 	bl	800228a <LL_TIM_IsEnabledIT_UPDATE>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <TIM1_UP_TIM10_IRQHandler+0x28>
	{
		ISR_TIMTrigger_IRQHandler(&photo_adc);
 800232c:	4804      	ldr	r0, [pc, #16]	@ (8002340 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800232e:	f001 feed 	bl	800410c <ISR_TIMTrigger_IRQHandler>
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8002332:	4802      	ldr	r0, [pc, #8]	@ (800233c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002334:	f7ff ff88 	bl	8002248 <LL_TIM_ClearFlag_UPDATE>
	//
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010000 	.word	0x40010000
 8002340:	20018a44 	.word	0x20018a44

08002344 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	ISR_SPI_IRQHandler(&photo_adc);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <SPI2_IRQHandler+0x10>)
 800234a:	f001 ff39 	bl	80041c0 <ISR_SPI_IRQHandler>
  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20018a44 	.word	0x20018a44

08002358 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	USART6_IRQ();
 800236a:	f003 fcab 	bl	8005cc4 <USART6_IRQ>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}

08002372 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  return 1;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_kill>:

int _kill(int pid, int sig)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238c:	f005 f81a 	bl	80073c4 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	2216      	movs	r2, #22
 8002394:	601a      	str	r2, [r3, #0]
  return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_exit>:

void _exit (int status)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023aa:	f04f 31ff 	mov.w	r1, #4294967295
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffe7 	bl	8002382 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <_exit+0x12>

080023b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00a      	b.n	80023e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ca:	f3af 8000 	nop.w
 80023ce:	4601      	mov	r1, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf0      	blt.n	80023ca <_read+0x12>
  }

  return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e009      	b.n	8002418 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf1      	blt.n	8002404 <_write+0x12>
  }
  return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_close>:

int _close(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002452:	605a      	str	r2, [r3, #4]
  return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_isatty>:

int _isatty(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f004 ff7e 	bl	80073c4 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20020000 	.word	0x20020000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20018a6c 	.word	0x20018a6c
 80024fc:	20018e20 	.word	0x20018e20

08002500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800255c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002528:	f7ff ffea 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800252e:	490d      	ldr	r1, [pc, #52]	@ (8002564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002544:	4c0a      	ldr	r4, [pc, #40]	@ (8002570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002552:	f004 ff3d 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7ff fa19 	bl	800198c <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800255c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002568:	08009be8 	.word	0x08009be8
  ldr r2, =_sbss
 800256c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002570:	20018e20 	.word	0x20018e20

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>

08002576 <LL_ADC_REG_SetSequencerLength>:
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80025d2:	481c      	ldr	r0, [pc, #112]	@ (8002644 <LL_ADC_CommonInit+0x80>)
 80025d4:	f7ff ffe2 	bl	800259c <LL_ADC_IsEnabled>
 80025d8:	4604      	mov	r4, r0
 80025da:	481b      	ldr	r0, [pc, #108]	@ (8002648 <LL_ADC_CommonInit+0x84>)
 80025dc:	f7ff ffde 	bl	800259c <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	431c      	orrs	r4, r3
 80025e4:	4819      	ldr	r0, [pc, #100]	@ (800264c <LL_ADC_CommonInit+0x88>)
 80025e6:	f7ff ffd9 	bl	800259c <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4323      	orrs	r3, r4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d120      	bne.n	8002634 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <LL_ADC_CommonInit+0x8c>)
 8002600:	4013      	ands	r3, r2
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	6811      	ldr	r1, [r2, #0]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6852      	ldr	r2, [r2, #4]
 800260a:	4311      	orrs	r1, r2
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	6892      	ldr	r2, [r2, #8]
 8002610:	4311      	orrs	r1, r2
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	430a      	orrs	r2, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	e00b      	b.n	8002638 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <LL_ADC_CommonInit+0x8c>)
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e001      	b.n	8002638 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	40012000 	.word	0x40012000
 8002648:	40012100 	.word	0x40012100
 800264c:	40012200 	.word	0x40012200
 8002650:	fffc10e0 	.word	0xfffc10e0

08002654 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff9a 	bl	800259c <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d117      	bne.n	800269e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002676:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	6811      	ldr	r1, [r2, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	6892      	ldr	r2, [r2, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e001      	b.n	80026a2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ff6e 	bl	800259c <LL_ADC_IsEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d12b      	bne.n	800271e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	e005      	b.n	80026ee <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <LL_ADC_REG_Init+0x80>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	68d2      	ldr	r2, [r2, #12]
 8002702:	4311      	orrs	r1, r2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	6912      	ldr	r2, [r2, #16]
 8002708:	430a      	orrs	r2, r1
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff2d 	bl	8002576 <LL_ADC_REG_SetSequencerLength>
 800271c:	e001      	b.n	8002722 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	c0fffcfd 	.word	0xc0fffcfd

08002730 <LL_GPIO_SetPinMode>:
{
 8002730:	b480      	push	{r7}
 8002732:	b08b      	sub	sp, #44	@ 0x2c
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	613b      	str	r3, [r7, #16]
  return result;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e003      	b.n	8002762 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2103      	movs	r1, #3
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	401a      	ands	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	61fb      	str	r3, [r7, #28]
  return result;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]
}
 800279e:	bf00      	nop
 80027a0:	372c      	adds	r7, #44	@ 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_GPIO_SetPinOutputType>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_GPIO_SetPinSpeed>:
{
 80027da:	b480      	push	{r7}
 80027dc:	b08b      	sub	sp, #44	@ 0x2c
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	613b      	str	r3, [r7, #16]
  return result;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2103      	movs	r1, #3
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	401a      	ands	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	61fb      	str	r3, [r7, #28]
  return result;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	431a      	orrs	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]
}
 8002848:	bf00      	nop
 800284a:	372c      	adds	r7, #44	@ 0x2c
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_GPIO_SetPinPull>:
{
 8002854:	b480      	push	{r7}
 8002856:	b08b      	sub	sp, #44	@ 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	613b      	str	r3, [r7, #16]
  return result;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e003      	b.n	8002886 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2103      	movs	r1, #3
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	401a      	ands	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	61fb      	str	r3, [r7, #28]
  return result;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	431a      	orrs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	60da      	str	r2, [r3, #12]
}
 80028c2:	bf00      	nop
 80028c4:	372c      	adds	r7, #44	@ 0x2c
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_GPIO_SetAFPin_0_7>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	b08b      	sub	sp, #44	@ 0x2c
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a1a      	ldr	r2, [r3, #32]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	613b      	str	r3, [r7, #16]
  return result;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e003      	b.n	8002900 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	210f      	movs	r1, #15
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	61fb      	str	r3, [r7, #28]
  return result;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002922:	2320      	movs	r3, #32
 8002924:	e003      	b.n	800292e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	431a      	orrs	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	621a      	str	r2, [r3, #32]
}
 800293c:	bf00      	nop
 800293e:	372c      	adds	r7, #44	@ 0x2c
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_GPIO_SetAFPin_8_15>:
{
 8002948:	b480      	push	{r7}
 800294a:	b08b      	sub	sp, #44	@ 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	613b      	str	r3, [r7, #16]
  return result;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e003      	b.n	800297c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	210f      	movs	r1, #15
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	61fb      	str	r3, [r7, #28]
  return result;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80029ba:	bf00      	nop
 80029bc:	372c      	adds	r7, #44	@ 0x2c
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b08a      	sub	sp, #40	@ 0x28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	617b      	str	r3, [r7, #20]
  return result;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <LL_GPIO_Init+0x2e>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80029fe:	e057      	b.n	8002ab0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d049      	beq.n	8002aaa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d003      	beq.n	8002a26 <LL_GPIO_Init+0x60>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d10d      	bne.n	8002a42 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6a39      	ldr	r1, [r7, #32]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fed3 	bl	80027da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6a39      	ldr	r1, [r7, #32]
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff feb4 	bl	80027aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff02 	bl	8002854 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d121      	bne.n	8002a9c <LL_GPIO_Init+0xd6>
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	60bb      	str	r3, [r7, #8]
  return result;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <LL_GPIO_Init+0xac>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002a7a:	2b07      	cmp	r3, #7
 8002a7c:	d807      	bhi.n	8002a8e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	461a      	mov	r2, r3
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ff21 	bl	80028ce <LL_GPIO_SetAFPin_0_7>
 8002a8c:	e006      	b.n	8002a9c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	461a      	mov	r2, r3
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff56 	bl	8002948 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fe43 	bl	8002730 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	3301      	adds	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1a0      	bne.n	8002a00 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3728      	adds	r7, #40	@ 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <LL_RCC_GetSysClkSource>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <LL_RCC_GetSysClkSource+0x18>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <LL_RCC_GetAHBPrescaler>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <LL_RCC_GetAHBPrescaler+0x18>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <LL_RCC_GetAPB1Prescaler>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <LL_RCC_GetAPB2Prescaler>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <LL_RCC_PLL_GetMainSource+0x18>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <LL_RCC_PLL_GetN+0x18>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40023800 	.word	0x40023800

08002b70 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <LL_RCC_PLL_GetP+0x18>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <LL_RCC_PLL_GetDivider+0x18>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002bb0:	f000 f820 	bl	8002bf4 <RCC_GetSystemClockFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f840 	bl	8002c44 <RCC_GetHCLKClockFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f84e 	bl	8002c70 <RCC_GetPCLK1ClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f85a 	bl	8002c98 <RCC_GetPCLK2ClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002bfe:	f7ff ff63 	bl	8002ac8 <LL_RCC_GetSysClkSource>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d00c      	beq.n	8002c22 <RCC_GetSystemClockFreq+0x2e>
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d80f      	bhi.n	8002c2c <RCC_GetSystemClockFreq+0x38>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <RCC_GetSystemClockFreq+0x22>
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d003      	beq.n	8002c1c <RCC_GetSystemClockFreq+0x28>
 8002c14:	e00a      	b.n	8002c2c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <RCC_GetSystemClockFreq+0x48>)
 8002c18:	607b      	str	r3, [r7, #4]
      break;
 8002c1a:	e00a      	b.n	8002c32 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <RCC_GetSystemClockFreq+0x4c>)
 8002c1e:	607b      	str	r3, [r7, #4]
      break;
 8002c20:	e007      	b.n	8002c32 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002c22:	2008      	movs	r0, #8
 8002c24:	f000 f84c 	bl	8002cc0 <RCC_PLL_GetFreqDomain_SYS>
 8002c28:	6078      	str	r0, [r7, #4]
      break;
 8002c2a:	e002      	b.n	8002c32 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <RCC_GetSystemClockFreq+0x48>)
 8002c2e:	607b      	str	r3, [r7, #4]
      break;
 8002c30:	bf00      	nop
  }

  return frequency;
 8002c32:	687b      	ldr	r3, [r7, #4]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	007a1200 	.word	0x007a1200

08002c44 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c4c:	f7ff ff4a 	bl	8002ae4 <LL_RCC_GetAHBPrescaler>
 8002c50:	4603      	mov	r3, r0
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <RCC_GetHCLKClockFreq+0x28>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	40d3      	lsrs	r3, r2
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	080097e4 	.word	0x080097e4

08002c70 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c78:	f7ff ff42 	bl	8002b00 <LL_RCC_GetAPB1Prescaler>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	0a9b      	lsrs	r3, r3, #10
 8002c80:	4a04      	ldr	r2, [pc, #16]	@ (8002c94 <RCC_GetPCLK1ClockFreq+0x24>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	40d3      	lsrs	r3, r2
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	080097f4 	.word	0x080097f4

08002c98 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002ca0:	f7ff ff3c 	bl	8002b1c <LL_RCC_GetAPB2Prescaler>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	0b5b      	lsrs	r3, r3, #13
 8002ca8:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <RCC_GetPCLK2ClockFreq+0x24>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	40d3      	lsrs	r3, r2
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	080097f4 	.word	0x080097f4

08002cc0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002cd4:	f7ff ff30 	bl	8002b38 <LL_RCC_PLL_GetMainSource>
 8002cd8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce6:	d003      	beq.n	8002cf0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002ce8:	e005      	b.n	8002cf6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002cec:	617b      	str	r3, [r7, #20]
      break;
 8002cee:	e005      	b.n	8002cfc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002cf2:	617b      	str	r3, [r7, #20]
      break;
 8002cf4:	e002      	b.n	8002cfc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d113      	bne.n	8002d2a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d02:	f7ff ff43 	bl	8002b8c <LL_RCC_PLL_GetDivider>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fbb3 f4f2 	udiv	r4, r3, r2
 8002d0e:	f7ff ff21 	bl	8002b54 <LL_RCC_PLL_GetN>
 8002d12:	4603      	mov	r3, r0
 8002d14:	fb03 f404 	mul.w	r4, r3, r4
 8002d18:	f7ff ff2a 	bl	8002b70 <LL_RCC_PLL_GetP>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	3301      	adds	r3, #1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d28:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002d2a:	693b      	ldr	r3, [r7, #16]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <LL_SPI_IsEnabled>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4c:	2b40      	cmp	r3, #64	@ 0x40
 8002d4e:	d101      	bne.n	8002d54 <LL_SPI_IsEnabled+0x18>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_SPI_IsEnabled+0x1a>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffd3 	bl	8002d3c <LL_SPI_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d139      	bne.n	8002e10 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002da4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	6811      	ldr	r1, [r2, #0]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	4311      	orrs	r1, r2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	6892      	ldr	r2, [r2, #8]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	68d2      	ldr	r2, [r2, #12]
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6912      	ldr	r2, [r2, #16]
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	6952      	ldr	r2, [r2, #20]
 8002dc8:	4311      	orrs	r1, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6992      	ldr	r2, [r2, #24]
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	69d2      	ldr	r2, [r2, #28]
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6a12      	ldr	r2, [r2, #32]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 0204 	bic.w	r2, r3, #4
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dfe:	d105      	bne.n	8002e0c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffab 	bl	8002d62 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	61da      	str	r2, [r3, #28]
  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <LL_TIM_SetPrescaler>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_TIM_SetAutoReload>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_TIM_SetRepetitionCounter>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	615a      	str	r2, [r3, #20]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa4 <LL_TIM_Init+0x108>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <LL_TIM_Init+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eba:	d00f      	beq.n	8002edc <LL_TIM_Init+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8002fa8 <LL_TIM_Init+0x10c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <LL_TIM_Init+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a39      	ldr	r2, [pc, #228]	@ (8002fac <LL_TIM_Init+0x110>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <LL_TIM_Init+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a38      	ldr	r2, [pc, #224]	@ (8002fb0 <LL_TIM_Init+0x114>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <LL_TIM_Init+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a37      	ldr	r2, [pc, #220]	@ (8002fb4 <LL_TIM_Init+0x118>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d106      	bne.n	8002eea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa4 <LL_TIM_Init+0x108>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef8:	d027      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	@ (8002fa8 <LL_TIM_Init+0x10c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d023      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a29      	ldr	r2, [pc, #164]	@ (8002fac <LL_TIM_Init+0x110>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	@ (8002fb0 <LL_TIM_Init+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01b      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a27      	ldr	r2, [pc, #156]	@ (8002fb4 <LL_TIM_Init+0x118>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d017      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	@ (8002fb8 <LL_TIM_Init+0x11c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a25      	ldr	r2, [pc, #148]	@ (8002fbc <LL_TIM_Init+0x120>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	@ (8002fc0 <LL_TIM_Init+0x124>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a23      	ldr	r2, [pc, #140]	@ (8002fc4 <LL_TIM_Init+0x128>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	@ (8002fc8 <LL_TIM_Init+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <LL_TIM_Init+0xae>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <LL_TIM_Init+0x130>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d106      	bne.n	8002f58 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff6c 	bl	8002e42 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff58 	bl	8002e26 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <LL_TIM_Init+0x108>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <LL_TIM_Init+0xea>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <LL_TIM_Init+0x118>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d105      	bne.n	8002f92 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff66 	bl	8002e5e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff71 	bl	8002e7a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400
 8002fc0:	40014800 	.word	0x40014800
 8002fc4:	40001800 	.word	0x40001800
 8002fc8:	40001c00 	.word	0x40001c00
 8002fcc:	40002000 	.word	0x40002000

08002fd0 <LL_USART_IsEnabled>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_USART_SetStopBitsLength>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_USART_SetHWFlowCtrl>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	615a      	str	r2, [r3, #20]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_USART_SetBaudRate>:
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b0c0      	sub	sp, #256	@ 0x100
 800304a:	af00      	add	r7, sp, #0
 800304c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003050:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003054:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003058:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003064:	f040 810c 	bne.w	8003280 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003068:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	1891      	adds	r1, r2, r2
 8003080:	6639      	str	r1, [r7, #96]	@ 0x60
 8003082:	415b      	adcs	r3, r3
 8003084:	667b      	str	r3, [r7, #100]	@ 0x64
 8003086:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800308a:	4621      	mov	r1, r4
 800308c:	eb12 0801 	adds.w	r8, r2, r1
 8003090:	4629      	mov	r1, r5
 8003092:	eb43 0901 	adc.w	r9, r3, r1
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030aa:	4690      	mov	r8, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	eb18 0303 	adds.w	r3, r8, r3
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb49 0303 	adc.w	r3, r9, r3
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80030c6:	2200      	movs	r2, #0
 80030c8:	469a      	mov	sl, r3
 80030ca:	4693      	mov	fp, r2
 80030cc:	eb1a 030a 	adds.w	r3, sl, sl
 80030d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030d2:	eb4b 030b 	adc.w	r3, fp, fp
 80030d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030e0:	f7fd fdc4 	bl	8000c6c <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b64      	ldr	r3, [pc, #400]	@ (800327c <LL_USART_SetBaudRate+0x238>)
 80030ea:	fba3 2302 	umull	r2, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	b29c      	uxth	r4, r3
 80030f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003100:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003104:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	1891      	adds	r1, r2, r2
 800310e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003110:	415b      	adcs	r3, r3
 8003112:	657b      	str	r3, [r7, #84]	@ 0x54
 8003114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003118:	4641      	mov	r1, r8
 800311a:	1851      	adds	r1, r2, r1
 800311c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800311e:	4649      	mov	r1, r9
 8003120:	414b      	adcs	r3, r1
 8003122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003130:	4659      	mov	r1, fp
 8003132:	00cb      	lsls	r3, r1, #3
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313a:	4651      	mov	r1, sl
 800313c:	00ca      	lsls	r2, r1, #3
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	4603      	mov	r3, r0
 8003144:	4642      	mov	r2, r8
 8003146:	189b      	adds	r3, r3, r2
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800314c:	464b      	mov	r3, r9
 800314e:	460a      	mov	r2, r1
 8003150:	eb42 0303 	adc.w	r3, r2, r3
 8003154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003158:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003162:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003166:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800316a:	460b      	mov	r3, r1
 800316c:	18db      	adds	r3, r3, r3
 800316e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003170:	4613      	mov	r3, r2
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	647b      	str	r3, [r7, #68]	@ 0x44
 8003178:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800317c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003180:	f7fd fd74 	bl	8000c6c <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4611      	mov	r1, r2
 800318a:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <LL_USART_SetBaudRate+0x238>)
 800318c:	fba3 2301 	umull	r2, r3, r3, r1
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	2264      	movs	r2, #100	@ 0x64
 8003194:	fb02 f303 	mul.w	r3, r2, r3
 8003198:	1acb      	subs	r3, r1, r3
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031a0:	4b36      	ldr	r3, [pc, #216]	@ (800327c <LL_USART_SetBaudRate+0x238>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4423      	add	r3, r4
 80031b6:	b29c      	uxth	r4, r3
 80031b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031bc:	2200      	movs	r2, #0
 80031be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031c2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031c6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80031ca:	4642      	mov	r2, r8
 80031cc:	464b      	mov	r3, r9
 80031ce:	1891      	adds	r1, r2, r2
 80031d0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031d2:	415b      	adcs	r3, r3
 80031d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031da:	4641      	mov	r1, r8
 80031dc:	1851      	adds	r1, r2, r1
 80031de:	6339      	str	r1, [r7, #48]	@ 0x30
 80031e0:	4649      	mov	r1, r9
 80031e2:	414b      	adcs	r3, r1
 80031e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031f2:	4659      	mov	r1, fp
 80031f4:	00cb      	lsls	r3, r1, #3
 80031f6:	4651      	mov	r1, sl
 80031f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fc:	4651      	mov	r1, sl
 80031fe:	00ca      	lsls	r2, r1, #3
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	4603      	mov	r3, r0
 8003206:	4642      	mov	r2, r8
 8003208:	189b      	adds	r3, r3, r2
 800320a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800320e:	464b      	mov	r3, r9
 8003210:	460a      	mov	r2, r1
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800321a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003224:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003228:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800322c:	460b      	mov	r3, r1
 800322e:	18db      	adds	r3, r3, r3
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003232:	4613      	mov	r3, r2
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800323a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800323e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003242:	f7fd fd13 	bl	8000c6c <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <LL_USART_SetBaudRate+0x238>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	@ 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3332      	adds	r3, #50	@ 0x32
 800325e:	4a07      	ldr	r2, [pc, #28]	@ (800327c <LL_USART_SetBaudRate+0x238>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b29b      	uxth	r3, r3
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	b29b      	uxth	r3, r3
 800326e:	4423      	add	r3, r4
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	e108      	b.n	800348e <LL_USART_SetBaudRate+0x44a>
 800327c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800328a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800328e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003292:	4642      	mov	r2, r8
 8003294:	464b      	mov	r3, r9
 8003296:	1891      	adds	r1, r2, r2
 8003298:	6239      	str	r1, [r7, #32]
 800329a:	415b      	adcs	r3, r3
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
 800329e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032a2:	4641      	mov	r1, r8
 80032a4:	1854      	adds	r4, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb43 0501 	adc.w	r5, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	00eb      	lsls	r3, r5, #3
 80032b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ba:	00e2      	lsls	r2, r4, #3
 80032bc:	4614      	mov	r4, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	18e3      	adds	r3, r4, r3
 80032c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032c8:	464b      	mov	r3, r9
 80032ca:	eb45 0303 	adc.w	r3, r5, r3
 80032ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80032d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80032ec:	4629      	mov	r1, r5
 80032ee:	008b      	lsls	r3, r1, #2
 80032f0:	4621      	mov	r1, r4
 80032f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f6:	4621      	mov	r1, r4
 80032f8:	008a      	lsls	r2, r1, #2
 80032fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032fe:	f7fd fcb5 	bl	8000c6c <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4b65      	ldr	r3, [pc, #404]	@ (800349c <LL_USART_SetBaudRate+0x458>)
 8003308:	fba3 2302 	umull	r2, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b29b      	uxth	r3, r3
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	b29c      	uxth	r4, r3
 8003314:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800331e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003322:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003326:	4642      	mov	r2, r8
 8003328:	464b      	mov	r3, r9
 800332a:	1891      	adds	r1, r2, r2
 800332c:	61b9      	str	r1, [r7, #24]
 800332e:	415b      	adcs	r3, r3
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003336:	4641      	mov	r1, r8
 8003338:	1851      	adds	r1, r2, r1
 800333a:	6139      	str	r1, [r7, #16]
 800333c:	4649      	mov	r1, r9
 800333e:	414b      	adcs	r3, r1
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334e:	4659      	mov	r1, fp
 8003350:	00cb      	lsls	r3, r1, #3
 8003352:	4651      	mov	r1, sl
 8003354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003358:	4651      	mov	r1, sl
 800335a:	00ca      	lsls	r2, r1, #3
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	4603      	mov	r3, r0
 8003362:	4642      	mov	r2, r8
 8003364:	189b      	adds	r3, r3, r2
 8003366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800336a:	464b      	mov	r3, r9
 800336c:	460a      	mov	r2, r1
 800336e:	eb42 0303 	adc.w	r3, r2, r3
 8003372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003376:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003380:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003390:	4649      	mov	r1, r9
 8003392:	008b      	lsls	r3, r1, #2
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339a:	4641      	mov	r1, r8
 800339c:	008a      	lsls	r2, r1, #2
 800339e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80033a2:	f7fd fc63 	bl	8000c6c <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <LL_USART_SetBaudRate+0x458>)
 80033ae:	fba3 2301 	umull	r2, r3, r3, r1
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2264      	movs	r2, #100	@ 0x64
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	1acb      	subs	r3, r1, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	@ 0x32
 80033c0:	4a36      	ldr	r2, [pc, #216]	@ (800349c <LL_USART_SetBaudRate+0x458>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4423      	add	r3, r4
 80033d2:	b29c      	uxth	r4, r3
 80033d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033d8:	2200      	movs	r2, #0
 80033da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033dc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033de:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033e2:	4642      	mov	r2, r8
 80033e4:	464b      	mov	r3, r9
 80033e6:	1891      	adds	r1, r2, r2
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	415b      	adcs	r3, r3
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f2:	4641      	mov	r1, r8
 80033f4:	1851      	adds	r1, r2, r1
 80033f6:	6039      	str	r1, [r7, #0]
 80033f8:	4649      	mov	r1, r9
 80033fa:	414b      	adcs	r3, r1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800340a:	4659      	mov	r1, fp
 800340c:	00cb      	lsls	r3, r1, #3
 800340e:	4651      	mov	r1, sl
 8003410:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003414:	4651      	mov	r1, sl
 8003416:	00ca      	lsls	r2, r1, #3
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	4603      	mov	r3, r0
 800341e:	4642      	mov	r2, r8
 8003420:	189b      	adds	r3, r3, r2
 8003422:	673b      	str	r3, [r7, #112]	@ 0x70
 8003424:	464b      	mov	r3, r9
 8003426:	460a      	mov	r2, r1
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	677b      	str	r3, [r7, #116]	@ 0x74
 800342e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003432:	2200      	movs	r2, #0
 8003434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003436:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003444:	4649      	mov	r1, r9
 8003446:	008b      	lsls	r3, r1, #2
 8003448:	4641      	mov	r1, r8
 800344a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344e:	4641      	mov	r1, r8
 8003450:	008a      	lsls	r2, r1, #2
 8003452:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003456:	f7fd fc09 	bl	8000c6c <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <LL_USART_SetBaudRate+0x458>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	@ 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	3332      	adds	r3, #50	@ 0x32
 8003472:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <LL_USART_SetBaudRate+0x458>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b29b      	uxth	r3, r3
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b29b      	uxth	r3, r3
 8003482:	4423      	add	r3, r4
 8003484:	b29b      	uxth	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348c:	609a      	str	r2, [r3, #8]
}
 800348e:	bf00      	nop
 8003490:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	51eb851f 	.word	0x51eb851f

080034a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fd8c 	bl	8002fd0 <LL_USART_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d15e      	bne.n	800357c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80034c6:	f023 030c 	bic.w	r3, r3, #12
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6851      	ldr	r1, [r2, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	4311      	orrs	r1, r2
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	6912      	ldr	r2, [r2, #16]
 80034d8:	4311      	orrs	r1, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	6992      	ldr	r2, [r2, #24]
 80034de:	430a      	orrs	r2, r1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fd83 	bl	8002ff8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fd90 	bl	800301e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80034fe:	f107 0308 	add.w	r3, r7, #8
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fb50 	bl	8002ba8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a1f      	ldr	r2, [pc, #124]	@ (8003588 <LL_USART_Init+0xe8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d102      	bne.n	8003516 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e021      	b.n	800355a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1c      	ldr	r2, [pc, #112]	@ (800358c <LL_USART_Init+0xec>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d102      	bne.n	8003524 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e01a      	b.n	800355a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1a      	ldr	r2, [pc, #104]	@ (8003590 <LL_USART_Init+0xf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	e013      	b.n	800355a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <LL_USART_Init+0xf4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d102      	bne.n	8003540 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e00c      	b.n	800355a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <LL_USART_Init+0xf8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d102      	bne.n	800354e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e005      	b.n	800355a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a12      	ldr	r2, [pc, #72]	@ (800359c <LL_USART_Init+0xfc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003568:	2300      	movs	r3, #0
 800356a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fd64 	bl	8003044 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800357c:	7ffb      	ldrb	r3, [r7, #31]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40011000 	.word	0x40011000
 800358c:	40004400 	.word	0x40004400
 8003590:	40004800 	.word	0x40004800
 8003594:	40011400 	.word	0x40011400
 8003598:	40004c00 	.word	0x40004c00
 800359c:	40005000 	.word	0x40005000

080035a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <LL_InitTick+0x30>)
 80035b4:	3b01      	subs	r3, #1
 80035b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <LL_InitTick+0x30>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <LL_InitTick+0x30>)
 80035c0:	2205      	movs	r2, #5
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80035dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ffdd 	bl	80035a0 <LL_InitTick>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80035f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <LL_mDelay+0x48>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80035fe:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d00c      	beq.n	8003622 <LL_mDelay+0x32>
  {
    Delay++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800360e:	e008      	b.n	8003622 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <LL_mDelay+0x48>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <LL_mDelay+0x32>
    {
      Delay--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f3      	bne.n	8003610 <LL_mDelay+0x20>
    }
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000e010 	.word	0xe000e010

0800363c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003644:	4a04      	ldr	r2, [pc, #16]	@ (8003658 <LL_SetSystemCoreClock+0x1c>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000030 	.word	0x20000030

0800365c <LL_ADC_Enable>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_IsEnabled>:
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <LL_DMA_EnableStream>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80036ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003700 <LL_DMA_EnableStream+0x3c>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4908      	ldr	r1, [pc, #32]	@ (8003700 <LL_DMA_EnableStream+0x3c>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	440a      	add	r2, r1
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	4611      	mov	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	440a      	add	r2, r1
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6013      	str	r3, [r2, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	080097fc 	.word	0x080097fc

08003704 <LL_DMA_SetDataLength>:
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003710:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <LL_DMA_SetDataLength+0x44>)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4413      	add	r3, r2
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	4908      	ldr	r1, [pc, #32]	@ (8003748 <LL_DMA_SetDataLength+0x44>)
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	440a      	add	r2, r1
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	4611      	mov	r1, r2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	440a      	add	r2, r1
 8003732:	4611      	mov	r1, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	080097fc 	.word	0x080097fc

0800374c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003758:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <LL_DMA_SetMemoryAddress+0x2c>)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4413      	add	r3, r2
 8003766:	461a      	mov	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60d3      	str	r3, [r2, #12]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	080097fc 	.word	0x080097fc

0800377c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003788:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <LL_DMA_SetPeriphAddress+0x2c>)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4413      	add	r3, r2
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6093      	str	r3, [r2, #8]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	080097fc 	.word	0x080097fc

080037ac <ADC_DMA_Init>:
void ADC_DMA_Init(	ADC_DMA_Device_t* ADC_DMA_Device,
					ADC_TypeDef* ADCx,
					DMA_TypeDef* DMAx,
					uint32_t stream,
					uint32_t length)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
	ADC_DMA_Device->ADCx = ADCx;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	601a      	str	r2, [r3, #0]
	ADC_DMA_Device->DMAx = DMAx;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]
	ADC_DMA_Device->stream = stream;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	609a      	str	r2, [r3, #8]
	ADC_DMA_Device->data_length = length;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	62da      	str	r2, [r3, #44]	@ 0x2c



	LL_DMA_SetPeriphAddress(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream, (uint32_t)&ADC_DMA_Device->ADCx->DR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6858      	ldr	r0, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	334c      	adds	r3, #76	@ 0x4c
 80037e0:	461a      	mov	r2, r3
 80037e2:	f7ff ffcb 	bl	800377c <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream, (uint32_t)ADC_DMA_Device->ADC_Data);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6858      	ldr	r0, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	330c      	adds	r3, #12
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7ff ffaa 	bl	800374c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream, ADC_DMA_Device->data_length);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6858      	ldr	r0, [r3, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	461a      	mov	r2, r3
 8003806:	f7ff ff7d 	bl	8003704 <LL_DMA_SetDataLength>

	LL_DMA_EnableStream(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7ff ff55 	bl	80036c4 <LL_DMA_EnableStream>

	while (!LL_ADC_IsEnabled(ADC_DMA_Device->ADCx))
 800381a:	e005      	b.n	8003828 <ADC_DMA_Init+0x7c>
	{
		LL_ADC_Enable(ADC_DMA_Device->ADCx);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff1b 	bl	800365c <LL_ADC_Enable>
		__NOP();
 8003826:	bf00      	nop
	while (!LL_ADC_IsEnabled(ADC_DMA_Device->ADCx))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff25 	bl	800367c <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f1      	beq.n	800381c <ADC_DMA_Init+0x70>
	}

    LL_ADC_REG_StartConversionSWStart(ADC_DMA_Device->ADCx);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff30 	bl	80036a2 <LL_ADC_REG_StartConversionSWStart>
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <LL_SPI_Enable>:
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_SPI_IsEnabled>:
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d101      	bne.n	8003882 <LL_SPI_IsEnabled+0x18>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <LL_SPI_IsEnabled+0x1a>
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d101      	bne.n	80038a8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <LL_SPI_IsActiveFlag_TXE+0x1a>
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c6:	2b80      	cmp	r3, #128	@ 0x80
 80038c8:	d101      	bne.n	80038ce <LL_SPI_IsActiveFlag_BSY+0x18>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	330c      	adds	r3, #12
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	330c      	adds	r3, #12
 8003908:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_GPIO_SetOutputPin>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	619a      	str	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_GPIO_ResetOutputPin>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	041a      	lsls	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	619a      	str	r2, [r3, #24]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <ADG1414_Chain_Write>:

#include "adg1414.h"


static void ADG1414_Chain_Write(ADG1414_Device_t *dev)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800395e:	bf00      	nop
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff93 	bl	8003890 <LL_SPI_IsActiveFlag_TXE>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f7      	beq.n	8003960 <ADG1414_Chain_Write+0xa>
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7ff ffdc 	bl	8003938 <LL_GPIO_ResetOutputPin>

    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7b1b      	ldrb	r3, [r3, #12]
 8003984:	3b01      	subs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e023      	b.n	80039d2 <ADG1414_Chain_Write+0x7c>
    {
        LL_SPI_TransmitData8(dev->spi, dev->switch_state[i]);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	330d      	adds	r3, #13
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	f7ff ffad 	bl	80038f8 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800399e:	bf00      	nop
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff73 	bl	8003890 <LL_SPI_IsActiveFlag_TXE>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f7      	beq.n	80039a0 <ADG1414_Chain_Write+0x4a>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 80039b0:	bf00      	nop
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff7d 	bl	80038b6 <LL_SPI_IsActiveFlag_BSY>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f7      	bne.n	80039b2 <ADG1414_Chain_Write+0x5c>
        (void)LL_SPI_ReceiveData8(dev->spi);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff88 	bl	80038dc <LL_SPI_ReceiveData8>
    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	dad8      	bge.n	800398a <ADG1414_Chain_Write+0x34>
    }

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7ff ff9a 	bl	800391c <LL_GPIO_SetOutputPin>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <ADG1414_Chain_Init>:

/* Hàm khởi tạo module ADG1414 */
void ADG1414_Chain_Init(ADG1414_Device_t *dev, SPI_TypeDef *spi, GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t num_of_sw)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	@ 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	601a      	str	r2, [r3, #0]
	dev->num_of_sw = num_of_sw;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a0a:	731a      	strb	r2, [r3, #12]
	dev->cs_port = cs_port;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
 8003a28:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = dev->cs_pin;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003a34:	2302      	movs	r3, #2
 8003a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f107 0214 	add.w	r2, r7, #20
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe ffbb 	bl	80029c6 <LL_GPIO_Init>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7ff ff5e 	bl	800391c <LL_GPIO_SetOutputPin>

    for (int i = 0; i < dev->num_of_sw; i++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a64:	e008      	b.n	8003a78 <ADG1414_Chain_Init+0x88>
    {
        dev->switch_state[i] = 0x00;
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6a:	4413      	add	r3, r2
 8003a6c:	330d      	adds	r3, #13
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	3301      	adds	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	7b1b      	ldrb	r3, [r3, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a80:	4293      	cmp	r3, r2
 8003a82:	dbf0      	blt.n	8003a66 <ADG1414_Chain_Init+0x76>
    }

    while (!LL_SPI_IsEnabled(dev->spi))
 8003a84:	e005      	b.n	8003a92 <ADG1414_Chain_Init+0xa2>
	{
		LL_SPI_Enable(dev->spi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fedd 	bl	800384a <LL_SPI_Enable>
		__NOP();
 8003a90:	bf00      	nop
    while (!LL_SPI_IsEnabled(dev->spi))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fee7 	bl	800386a <LL_SPI_IsEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f1      	beq.n	8003a86 <ADG1414_Chain_Init+0x96>
	}

    ADG1414_Chain_Write(dev);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff ff57 	bl	8003956 <ADG1414_Chain_Write>
}
 8003aa8:	bf00      	nop
 8003aaa:	3730      	adds	r7, #48	@ 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <ADG1414_Chain_SwitchOn>:

/* Hàm bật một switch */
void ADG1414_Chain_SwitchOn(ADG1414_Device_t *dev, uint8_t channel_num)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	2b24      	cmp	r3, #36	@ 0x24
 8003ac0:	d903      	bls.n	8003aca <ADG1414_Chain_SwitchOn+0x1a>
    	(dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d05a      	beq.n	8003b80 <ADG1414_Chain_SwitchOn+0xd0>
    	return;  // Kiểm tra giới hạn

    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d903      	bls.n	8003ad8 <ADG1414_Chain_SwitchOn+0x28>
		(dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d055      	beq.n	8003b84 <ADG1414_Chain_SwitchOn+0xd4>
		return;  // Kiểm tra giới hạn

    if (dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7b1b      	ldrb	r3, [r3, #12]
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d138      	bne.n	8003b52 <ADG1414_Chain_SwitchOn+0xa2>
	{
    	for (int i = 0; i < dev->num_of_sw; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e008      	b.n	8003af8 <ADG1414_Chain_SwitchOn+0x48>
		{
			dev->switch_state[i] = 0x00;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	330d      	adds	r3, #13
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < dev->num_of_sw; i++)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3301      	adds	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7b1b      	ldrb	r3, [r3, #12]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4293      	cmp	r3, r2
 8003b02:	dbf0      	blt.n	8003ae6 <ADG1414_Chain_SwitchOn+0x36>
		}
    	if (channel_num)
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d036      	beq.n	8003b78 <ADG1414_Chain_SwitchOn+0xc8>
    	{
    		uint8_t chip_idx = (channel_num-1) / 6;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <ADG1414_Chain_SwitchOn+0xdc>)
 8003b10:	fb82 1203 	smull	r1, r2, r2, r3
 8003b14:	17db      	asrs	r3, r3, #31
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	72fb      	strb	r3, [r7, #11]
			uint8_t bit_idx = (channel_num-1) % 6;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <ADG1414_Chain_SwitchOn+0xdc>)
 8003b20:	fb83 3102 	smull	r3, r1, r3, r2
 8003b24:	17d3      	asrs	r3, r2, #31
 8003b26:	1ac9      	subs	r1, r1, r3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	440b      	add	r3, r1
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	1ad1      	subs	r1, r2, r3
 8003b32:	460b      	mov	r3, r1
 8003b34:	72bb      	strb	r3, [r7, #10]
			dev->switch_state[(uint8_t)chip_idx] = (1 << bit_idx)&0x3F;
 8003b36:	7abb      	ldrb	r3, [r7, #10]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003b46:	b2d1      	uxtb	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	735a      	strb	r2, [r3, #13]
 8003b50:	e012      	b.n	8003b78 <ADG1414_Chain_SwitchOn+0xc8>
    	}
	}

    else if (dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7b1b      	ldrb	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10e      	bne.n	8003b78 <ADG1414_Chain_SwitchOn+0xc8>
	{
    	if(channel_num)
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <ADG1414_Chain_SwitchOn+0xc2>
    	{
    		dev->switch_state[0] = (1 << (channel_num - 1));
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	2201      	movs	r2, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	735a      	strb	r2, [r3, #13]
 8003b70:	e002      	b.n	8003b78 <ADG1414_Chain_SwitchOn+0xc8>
    	}

    	else
    	{
    		dev->switch_state[0] = 0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	735a      	strb	r2, [r3, #13]
		}
	}

    ADG1414_Chain_Write(dev);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff feec 	bl	8003956 <ADG1414_Chain_Write>
 8003b7e:	e002      	b.n	8003b86 <ADG1414_Chain_SwitchOn+0xd6>
    	return;  // Kiểm tra giới hạn
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <ADG1414_Chain_SwitchOn+0xd6>
		return;  // Kiểm tra giới hạn
 8003b84:	bf00      	nop
}
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2aaaaaab 	.word	0x2aaaaaab

08003b90 <ADG1414_Chain_SwitchAllOff>:
//	ADG1414_Chain_Write(dev);
//}

/* Hàm tắt tất cả các switch */
void ADG1414_Chain_SwitchAllOff(ADG1414_Device_t *dev)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < dev->num_of_sw; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e008      	b.n	8003bb0 <ADG1414_Chain_SwitchAllOff+0x20>
    {
        dev->switch_state[i] = 0x00;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	330d      	adds	r3, #13
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7b1b      	ldrb	r3, [r3, #12]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	dbf0      	blt.n	8003b9e <ADG1414_Chain_SwitchAllOff+0xe>
    }
    ADG1414_Chain_Write(dev);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff feca 	bl	8003956 <ADG1414_Chain_Write>
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <LL_SPI_Enable>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_SPI_Disable>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_SPI_IsEnabled>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1a:	2b40      	cmp	r3, #64	@ 0x40
 8003c1c:	d101      	bne.n	8003c22 <LL_SPI_IsEnabled+0x18>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_SPI_IsEnabled+0x1a>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_SPI_SetBaudRatePrescaler>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_SPI_SetDataWidth>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_SPI_IsActiveFlag_RXNE>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_SPI_IsActiveFlag_TXE>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d101      	bne.n	8003cba <LL_SPI_IsActiveFlag_TXE+0x18>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_SPI_IsActiveFlag_BSY>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	2b80      	cmp	r3, #128	@ 0x80
 8003cda:	d101      	bne.n	8003ce0 <LL_SPI_IsActiveFlag_BSY+0x18>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_SPI_ReceiveData8>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_SPI_TransmitData8>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	701a      	strb	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_GPIO_IsInputPinSet>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_GPIO_SetOutputPin>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	619a      	str	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_GPIO_ResetOutputPin>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	041a      	lsls	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <ADS8327_Transmit16>:
#include "UART.h"

static uint16_t CFR_user_default = 0x0EFD;		//0000 1110 1111 1101

static void ADS8327_Transmit16(ADS8327_Device_t *dev, uint16_t data)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8003d9e:	bf00      	nop
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff7c 	bl	8003ca2 <LL_SPI_IsActiveFlag_TXE>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f7      	beq.n	8003da0 <ADS8327_Transmit16+0xe>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)(data>>8));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	887b      	ldrh	r3, [r7, #2]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7ff ffa3 	bl	8003d0a <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8003dc4:	bf00      	nop
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff69 	bl	8003ca2 <LL_SPI_IsActiveFlag_TXE>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f7      	beq.n	8003dc6 <ADS8327_Transmit16+0x34>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi
 8003dd6:	bf00      	nop
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff73 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f7      	bne.n	8003dd8 <ADS8327_Transmit16+0x46>
	(void)LL_SPI_ReceiveData8(dev->spi);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff7e 	bl	8003cee <LL_SPI_ReceiveData8>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)data);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff84 	bl	8003d0a <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8003e02:	bf00      	nop
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff4a 	bl	8003ca2 <LL_SPI_IsActiveFlag_TXE>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f7      	beq.n	8003e04 <ADS8327_Transmit16+0x72>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8003e14:	bf00      	nop
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff54 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f7      	bne.n	8003e16 <ADS8327_Transmit16+0x84>
	(void)LL_SPI_ReceiveData8(dev->spi);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff5f 	bl	8003cee <LL_SPI_ReceiveData8>

}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <ADS8327_Receive16>:

static uint16_t ADS8327_Receive16(ADS8327_Device_t *dev)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	uint16_t data1 = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	81fb      	strh	r3, [r7, #14]
	uint16_t data2 = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	81bb      	strh	r3, [r7, #12]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8003e48:	bf00      	nop
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff27 	bl	8003ca2 <LL_SPI_IsActiveFlag_TXE>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f7      	beq.n	8003e4a <ADS8327_Receive16+0x12>
	LL_SPI_TransmitData8(dev->spi, 0xAA);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	21aa      	movs	r1, #170	@ 0xaa
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff52 	bl	8003d0a <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003e66:	bf00      	nop
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff2b 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f7      	bne.n	8003e68 <ADS8327_Receive16+0x30>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8003e78:	bf00      	nop
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fefc 	bl	8003c7c <LL_SPI_IsActiveFlag_RXNE>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f7      	beq.n	8003e7a <ADS8327_Receive16+0x42>
	data1 = LL_SPI_ReceiveData8(dev->spi);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff2d 	bl	8003cee <LL_SPI_ReceiveData8>
 8003e94:	4603      	mov	r3, r0
 8003e96:	81fb      	strh	r3, [r7, #14]
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003e98:	bf00      	nop
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ff12 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f7      	bne.n	8003e9a <ADS8327_Receive16+0x62>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8003eaa:	bf00      	nop
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fef6 	bl	8003ca2 <LL_SPI_IsActiveFlag_TXE>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f7      	beq.n	8003eac <ADS8327_Receive16+0x74>
	LL_SPI_TransmitData8(dev->spi, 0xAA);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	21aa      	movs	r1, #170	@ 0xaa
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff21 	bl	8003d0a <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003ec8:	bf00      	nop
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fefa 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f7      	bne.n	8003eca <ADS8327_Receive16+0x92>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8003eda:	bf00      	nop
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fecb 	bl	8003c7c <LL_SPI_IsActiveFlag_RXNE>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f7      	beq.n	8003edc <ADS8327_Receive16+0xa4>
	data2 = LL_SPI_ReceiveData8(dev->spi);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fefc 	bl	8003cee <LL_SPI_ReceiveData8>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	81bb      	strh	r3, [r7, #12]
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003efa:	bf00      	nop
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fee1 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f7      	bne.n	8003efc <ADS8327_Receive16+0xc4>

	return (data1 << 8)|data2;
 8003f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	b21a      	sxth	r2, r3
 8003f14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <ADS8327_Wake_Up>:

void ADS8327_Wake_Up(ADS8327_Device_t *dev)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
	dev->CMD = ADS8327_CMD_WAKE_UP;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f44f 4230 	mov.w	r2, #45056	@ 0xb000
 8003f34:	839a      	strh	r2, [r3, #28]
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7ff ff17 	bl	8003d74 <LL_GPIO_ResetOutputPin>

    ADS8327_Transmit16(dev, dev->CMD);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8b9b      	ldrh	r3, [r3, #28]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff20 	bl	8003d92 <ADS8327_Transmit16>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7ff fefb 	bl	8003d58 <LL_GPIO_SetOutputPin>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <ADS8327_Write_CFR>:

void ADS8327_Write_CFR(ADS8327_Device_t *dev, uint16_t CFR)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	807b      	strh	r3, [r7, #2]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7ff fef7 	bl	8003d74 <LL_GPIO_ResetOutputPin>

	dev->CMD = ADS8327_CMD_WRITE_CONFIG;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003f8c:	839a      	strh	r2, [r3, #28]
	dev->CFR_value = CFR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	83da      	strh	r2, [r3, #30]
	uint16_t temp = (dev->CMD & 0xF000) | (dev->CFR_value & 0x0FFF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8b9b      	ldrh	r3, [r3, #28]
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003f9e:	f023 030f 	bic.w	r3, r3, #15
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8bdb      	ldrh	r3, [r3, #30]
 8003fa8:	b21b      	sxth	r3, r3
 8003faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fae:	b21b      	sxth	r3, r3
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	81fb      	strh	r3, [r7, #14]

	ADS8327_Transmit16(dev, temp);
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fee9 	bl	8003d92 <ADS8327_Transmit16>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7ff fec4 	bl	8003d58 <LL_GPIO_SetOutputPin>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ADS8327_Default_CFR>:


void ADS8327_Default_CFR(ADS8327_Device_t *dev, CFR_default_t CFR_default)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
	if (CFR_default == USER_DEFAULT)
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <ADS8327_Default_CFR+0x20>
	{
		ADS8327_Write_CFR(dev, CFR_user_default);
 8003fea:	4b16      	ldr	r3, [pc, #88]	@ (8004044 <ADS8327_Default_CFR+0x6c>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ffba 	bl	8003f6a <ADS8327_Write_CFR>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
		ADS8327_Transmit16(dev, dev->CMD);
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
	}
}
 8003ff6:	e020      	b.n	800403a <ADS8327_Default_CFR+0x62>
	else if (CFR_default == FACTORY_DEFAULT)
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d11d      	bne.n	800403a <ADS8327_Default_CFR+0x62>
		LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7ff feb3 	bl	8003d74 <LL_GPIO_ResetOutputPin>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8004014:	839a      	strh	r2, [r3, #28]
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f640 62fd 	movw	r2, #3837	@ 0xefd
 800401c:	83da      	strh	r2, [r3, #30]
		ADS8327_Transmit16(dev, dev->CMD);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8b9b      	ldrh	r3, [r3, #28]
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff feb4 	bl	8003d92 <ADS8327_Transmit16>
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7ff fe8f 	bl	8003d58 <LL_GPIO_SetOutputPin>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000034 	.word	0x20000034

08004048 <ADS8327_Read_Data_Polling>:


uint16_t ADS8327_Read_Data_Polling(ADS8327_Device_t *dev, int timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	LL_GPIO_ResetOutputPin(dev->convst_port, dev->convst_pin);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7ff fe89 	bl	8003d74 <LL_GPIO_ResetOutputPin>
	int time = timeout;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	60fb      	str	r3, [r7, #12]
	while(LL_GPIO_IsInputPinSet(dev->EOC_port, dev->EOC_pin) && (time--));
 8004066:	bf00      	nop
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f7ff fe5b 	bl	8003d2e <LL_GPIO_IsInputPinSet>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <ADS8327_Read_Data_Polling+0x40>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ef      	bne.n	8004068 <ADS8327_Read_Data_Polling+0x20>
	time = timeout;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	60fb      	str	r3, [r7, #12]
	while(!LL_GPIO_IsInputPinSet(dev->EOC_port, dev->EOC_pin) && (time--));
 800408c:	bf00      	nop
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7ff fe48 	bl	8003d2e <LL_GPIO_IsInputPinSet>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <ADS8327_Read_Data_Polling+0x66>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	60fa      	str	r2, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ef      	bne.n	800408e <ADS8327_Read_Data_Polling+0x46>

	LL_GPIO_SetOutputPin(dev->convst_port, dev->convst_pin);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7ff fe4d 	bl	8003d58 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7ff fe53 	bl	8003d74 <LL_GPIO_ResetOutputPin>

	dev->ADC_val = ADS8327_Receive16(dev);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff feb2 	bl	8003e38 <ADS8327_Receive16>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	841a      	strh	r2, [r3, #32]

	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 80040dc:	bf00      	nop
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fdf0 	bl	8003cc8 <LL_SPI_IsActiveFlag_BSY>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f7      	bne.n	80040de <ADS8327_Read_Data_Polling+0x96>
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f7ff fe2d 	bl	8003d58 <LL_GPIO_SetOutputPin>

	return dev->ADC_val;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8c1b      	ldrh	r3, [r3, #32]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <ISR_TIMTrigger_IRQHandler>:
	}
}
*/

void ISR_TIMTrigger_IRQHandler(ADS8327_Device_t *dev)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	WRITE_REG(dev->convst_port->BSRR, dev->convst_pin);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6912      	ldr	r2, [r2, #16]
 800411c:	619a      	str	r2, [r3, #24]
	// Collect data
	if(adc_rec_ind < adc_rec_total)
 800411e:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <ISR_TIMTrigger_IRQHandler+0xa0>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4b23      	ldr	r3, [pc, #140]	@ (80041b0 <ISR_TIMTrigger_IRQHandler+0xa4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d220      	bcs.n	800416c <ISR_TIMTrigger_IRQHandler+0x60>
	{
		WRITE_REG(dev->cs_port->BSRR, (dev->cs_pin << 16));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0412      	lsls	r2, r2, #16
 8004134:	619a      	str	r2, [r3, #24]
		SET_BIT(dev->spi->CR2, SPI_CR2_TXEIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004144:	605a      	str	r2, [r3, #4]
		*(__IO uint16_t *)&dev->spi->DR = 0xAAAA;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004150:	801a      	strh	r2, [r3, #0]
		adc_ptr[adc_rec_ind++] = dev->ADC_val;
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <ISR_TIMTrigger_IRQHandler+0xa8>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <ISR_TIMTrigger_IRQHandler+0xa0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	4813      	ldr	r0, [pc, #76]	@ (80041ac <ISR_TIMTrigger_IRQHandler+0xa0>)
 800415e:	6001      	str	r1, [r0, #0]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	8c12      	ldrh	r2, [r2, #32]
 8004168:	801a      	strh	r2, [r3, #0]
	//	LL_GPIO_SetOutputPin(dev->convst_port, dev->convst_pin);
	//	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
	//	LL_SPI_EnableIT_TXE(dev->spi);
	//	LL_SPI_TransmitData16(dev->spi, 0xAAAA); 	// Transmit dummy

}
 800416a:	e01a      	b.n	80041a2 <ISR_TIMTrigger_IRQHandler+0x96>
		CLEAR_BIT(dev->spi->CR2, SPI_CR2_TXEIE);		//Clear TXE
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800417a:	605a      	str	r2, [r3, #4]
		CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <ISR_TIMTrigger_IRQHandler+0xac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0d      	ldr	r2, [pc, #52]	@ (80041b8 <ISR_TIMTrigger_IRQHandler+0xac>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <ISR_TIMTrigger_IRQHandler+0xac>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <ISR_TIMTrigger_IRQHandler+0xac>)
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	60d3      	str	r3, [r2, #12]
		UARTprintf("\r\n %d samples successfully taken!\r\n", adc_rec_ind-3);
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <ISR_TIMTrigger_IRQHandler+0xa0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3b03      	subs	r3, #3
 800419a:	4619      	mov	r1, r3
 800419c:	4807      	ldr	r0, [pc, #28]	@ (80041bc <ISR_TIMTrigger_IRQHandler+0xb0>)
 800419e:	f002 f875 	bl	800628c <UARTprintf>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20018994 	.word	0x20018994
 80041b0:	20018998 	.word	0x20018998
 80041b4:	20000000 	.word	0x20000000
 80041b8:	40010000 	.word	0x40010000
 80041bc:	08009320 	.word	0x08009320

080041c0 <ISR_SPI_IRQHandler>:

void ISR_SPI_IRQHandler(ADS8327_Device_t *dev)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	// Kiểm tra cờ ngắt TXE
	if (READ_BIT(dev->spi->SR, SPI_SR_TXE) == (SPI_SR_TXE))//LL_SPI_IsActiveFlag_TXE(dev->spi))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d11c      	bne.n	8004210 <ISR_SPI_IRQHandler+0x50>
	{
		WRITE_REG(dev->convst_port->BSRR, (dev->convst_pin << 16));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	0412      	lsls	r2, r2, #16
 80041e0:	619a      	str	r2, [r3, #24]
		dev->ADC_val = (uint16_t)(READ_REG(dev->spi->DR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	841a      	strh	r2, [r3, #32]
		WRITE_REG(dev->cs_port->BSRR, dev->cs_pin);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6892      	ldr	r2, [r2, #8]
 80041f6:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(dev->spi->CR2, SPI_CR2_TXEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004206:	605a      	str	r2, [r3, #4]
		dev->tran_ind = 0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//		dev->ADC_val = LL_SPI_ReceiveData16(dev->spi);
//		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
//		LL_SPI_DisableIT_TXE(dev->spi);
//		dev->tran_ind = 0;
	}
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <SPI_SetPrescaler>:
	LL_SPI_EnableIT_TXE(dev->spi);
	dev->tran_ind = 1;
}

void SPI_SetPrescaler(SPI_TypeDef *spi, uint32_t Prescaler)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
    // Kiểm tra giá trị prescaler hợp lệ
    if ((Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV2) &&
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b08      	cmp	r3, #8
 8004230:	d011      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV4) &&
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b10      	cmp	r3, #16
 8004236:	d00e      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV8) &&
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b18      	cmp	r3, #24
 800423c:	d00b      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV16) &&
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b20      	cmp	r3, #32
 8004242:	d008      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV32) &&
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b28      	cmp	r3, #40	@ 0x28
 8004248:	d005      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV64) &&
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b30      	cmp	r3, #48	@ 0x30
 800424e:	d002      	beq.n	8004256 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV128) &&
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b38      	cmp	r3, #56	@ 0x38
 8004254:	d10a      	bne.n	800426c <SPI_SetPrescaler+0x50>
    {
        // Xử lý lỗi nếu prescaler không hợp lệ
        return;
    }
    // Vô hiệu hóa SPIx
    LL_SPI_Disable(spi);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fcc7 	bl	8003bea <LL_SPI_Disable>
    // Cấu hình lại prescaler
    LL_SPI_SetBaudRatePrescaler(spi, Prescaler);
 800425c:	6839      	ldr	r1, [r7, #0]
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fce6 	bl	8003c30 <LL_SPI_SetBaudRatePrescaler>
    // Kích hoạt lại SPIx
    LL_SPI_Enable(spi);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fcb0 	bl	8003bca <LL_SPI_Enable>
 800426a:	e000      	b.n	800426e <SPI_SetPrescaler+0x52>
        return;
 800426c:	bf00      	nop
}
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <SPI_SetDataLength>:

// Hàm thay đổi data length của SPIx
void SPI_SetDataLength(SPI_TypeDef *spi, uint32_t DataWidth)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
    // Kiểm tra giá trị DataWidth hợp lệ
    if ((DataWidth != LL_SPI_DATAWIDTH_8BIT)  &&
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <SPI_SetDataLength+0x18>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800428a:	d10a      	bne.n	80042a2 <SPI_SetDataLength+0x2e>
    {
        // Xử lý lỗi nếu DataWidth không hợp lệ
        return;
    }
    // Vô hiệu hóa SPIx để thay đổi cấu hình
    LL_SPI_Disable(spi);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fcac 	bl	8003bea <LL_SPI_Disable>
    // Cập nhật Data Width
    LL_SPI_SetDataWidth(spi, DataWidth);
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fcde 	bl	8003c56 <LL_SPI_SetDataWidth>
    // Kích hoạt lại SPIx
    LL_SPI_Enable(spi);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fc95 	bl	8003bca <LL_SPI_Enable>
 80042a0:	e000      	b.n	80042a4 <SPI_SetDataLength+0x30>
        return;
 80042a2:	bf00      	nop
}
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <ADS8327_Device_Init>:
							uint32_t cs_pin,
							GPIO_TypeDef *convst_port,
							uint32_t convst_pin,
							GPIO_TypeDef *EOC_port,
							uint32_t EOC_pin)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]

	dev->spi = spi;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	609a      	str	r2, [r3, #8]
	dev->convst_port = convst_port;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	60da      	str	r2, [r3, #12]
	dev->convst_pin = convst_pin;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	611a      	str	r2, [r3, #16]
	dev->EOC_port = EOC_port;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	615a      	str	r2, [r3, #20]
	dev->EOC_pin = EOC_pin;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	619a      	str	r2, [r3, #24]
	dev->ADC_val = 0xFFFF;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042e8:	841a      	strh	r2, [r3, #32]
	dev->tran_ind = 0;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	while (!LL_SPI_IsEnabled(dev->spi))
 80042f2:	e005      	b.n	8004300 <ADS8327_Device_Init+0x56>
	{
		LL_SPI_Enable(dev->spi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fc66 	bl	8003bca <LL_SPI_Enable>
		__NOP();
 80042fe:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fc80 	bl	8003c0a <LL_SPI_IsEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f1      	beq.n	80042f4 <ADS8327_Device_Init+0x4a>
	}

	ADS8327_Default_CFR(dev, USER_DEFAULT);
 8004310:	2100      	movs	r1, #0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff fe60 	bl	8003fd8 <ADS8327_Default_CFR>
	ADS8327_Wake_Up(dev);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fe04 	bl	8003f26 <ADS8327_Wake_Up>
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 800433c:	e01f      	b.n	800437e <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b20      	cmp	r3, #32
 8004344:	d105      	bne.n	8004352 <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	e012      	b.n	8004378 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00f      	beq.n	8004378 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b07      	cmp	r3, #7
 800435c:	d80a      	bhi.n	8004374 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 800435e:	491d      	ldr	r1, [pc, #116]	@ (80043d4 <CmdLineProcess+0xac>)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3301      	adds	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e001      	b.n	8004378 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8004374:	2302      	movs	r3, #2
 8004376:	e028      	b.n	80043ca <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1db      	bne.n	800433e <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01d      	beq.n	80043c8 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 800438c:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <CmdLineProcess+0xb0>)
 800438e:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8004390:	e016      	b.n	80043c0 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8004392:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <CmdLineProcess+0xac>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f7fb ff17 	bl	80001d0 <strcmp>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4909      	ldr	r1, [pc, #36]	@ (80043d4 <CmdLineProcess+0xac>)
 80043b0:	4610      	mov	r0, r2
 80043b2:	4798      	blx	r3
 80043b4:	4603      	mov	r3, r0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e007      	b.n	80043ca <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	330c      	adds	r3, #12
 80043be:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e4      	bne.n	8004392 <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20018a70 	.word	0x20018a70
 80043d8:	2000004c 	.word	0x2000004c

080043dc <LL_TIM_EnableCounter>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_TIM_DisableCounter>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 0201 	bic.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_TIM_SetCounter>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_TIM_SetAutoReload>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_TIM_EnableIT_UPDATE>:
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_TIM_DisableIT_UPDATE>:
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f023 0201 	bic.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <command_init>:
static uint8_t photo_index = 0;
static uint32_t samp_rate = 0;


void	command_init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	USART6_init();
 8004498:	f001 fc84 	bl	8005da4 <USART6_init>
	p_CommandRingBuffer = uart_get_USART6_rx_buffer_address();
 800449c:	f001 fcf0 	bl	8005e80 <uart_get_USART6_rx_buffer_address>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4a07      	ldr	r2, [pc, #28]	@ (80044c0 <command_init+0x2c>)
 80044a4:	6013      	str	r3, [r2, #0]
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 80044a6:	2220      	movs	r2, #32
 80044a8:	2100      	movs	r1, #0
 80044aa:	4806      	ldr	r0, [pc, #24]	@ (80044c4 <command_init+0x30>)
 80044ac:	f002 ff29 	bl	8007302 <memset>
	s_commandBufferIndex = 0;
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <command_init+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
	USART6_send_string("EXP_LASER_TEST V1.1.0 \r\n>");
 80044b6:	4805      	ldr	r0, [pc, #20]	@ (80044cc <command_init+0x38>)
 80044b8:	f001 fcb0 	bl	8005e1c <USART6_send_string>
}
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20018a94 	.word	0x20018a94
 80044c4:	20018a98 	.word	0x20018a98
 80044c8:	20018ab8 	.word	0x20018ab8
 80044cc:	080095d4 	.word	0x080095d4

080044d0 <ftoa>:
	0.05,				// 1
	0.005,				// 2
};

char * ftoa(double f, char * buf, int precision)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
	char * p = ptr;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;
	if (precision > MAX_PRECISION)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	dd01      	ble.n	80044f0 <ftoa+0x20>
	precision = MAX_PRECISION;
 80044ec:	2302      	movs	r3, #2
 80044ee:	603b      	str	r3, [r7, #0]
	if (f < 0)
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044fc:	f7fc faf6 	bl	8000aec <__aeabi_dcmplt>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <ftoa+0x4c>
	{
		f = -f;
 8004506:	68bc      	ldr	r4, [r7, #8]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800450e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	627a      	str	r2, [r7, #36]	@ 0x24
 8004518:	222d      	movs	r2, #45	@ 0x2d
 800451a:	701a      	strb	r2, [r3, #0]
	}
	if (precision < 0)  
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	da4f      	bge.n	80045c2 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	4b7c      	ldr	r3, [pc, #496]	@ (8004718 <ftoa+0x248>)
 8004528:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800452c:	f7fc fade 	bl	8000aec <__aeabi_dcmplt>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <ftoa+0x6c>
 8004536:	2306      	movs	r3, #6
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	e042      	b.n	80045c2 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	4b76      	ldr	r3, [pc, #472]	@ (800471c <ftoa+0x24c>)
 8004542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004546:	f7fc fad1 	bl	8000aec <__aeabi_dcmplt>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <ftoa+0x86>
 8004550:	2305      	movs	r3, #5
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	e035      	b.n	80045c2 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	4b71      	ldr	r3, [pc, #452]	@ (8004720 <ftoa+0x250>)
 800455c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004560:	f7fc fac4 	bl	8000aec <__aeabi_dcmplt>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <ftoa+0xa0>
 800456a:	2304      	movs	r3, #4
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	e028      	b.n	80045c2 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	4b6b      	ldr	r3, [pc, #428]	@ (8004724 <ftoa+0x254>)
 8004576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800457a:	f7fc fab7 	bl	8000aec <__aeabi_dcmplt>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <ftoa+0xba>
 8004584:	2303      	movs	r3, #3
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	e01b      	b.n	80045c2 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800458a:	a35f      	add	r3, pc, #380	@ (adr r3, 8004708 <ftoa+0x238>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004594:	f7fc faaa 	bl	8000aec <__aeabi_dcmplt>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <ftoa+0xd4>
 800459e:	2302      	movs	r3, #2
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	e00e      	b.n	80045c2 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 80045a4:	a35a      	add	r3, pc, #360	@ (adr r3, 8004710 <ftoa+0x240>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ae:	f7fc fa9d 	bl	8000aec <__aeabi_dcmplt>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <ftoa+0xee>
 80045b8:	2301      	movs	r3, #1
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	e001      	b.n	80045c2 <ftoa+0xf2>
		else precision = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	603b      	str	r3, [r7, #0]
	}
	if (precision)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <ftoa+0x114>
	f += rounders[precision];
 80045c8:	4a57      	ldr	r2, [pc, #348]	@ (8004728 <ftoa+0x258>)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045d8:	f7fb fe60 	bl	800029c <__adddf3>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	intPart = f;
 80045e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045e8:	f7fc faa8 	bl	8000b3c <__aeabi_d2iz>
 80045ec:	4603      	mov	r3, r0
 80045ee:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80045f0:	69f8      	ldr	r0, [r7, #28]
 80045f2:	f7fb ff9f 	bl	8000534 <__aeabi_i2d>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045fe:	f7fb fe4b 	bl	8000298 <__aeabi_dsub>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <ftoa+0x14c>
	*ptr++ = '0';
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	627a      	str	r2, [r7, #36]	@ 0x24
 8004616:	2230      	movs	r2, #48	@ 0x30
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e038      	b.n	800468e <ftoa+0x1be>
	else
	{
		p = ptr;
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	623b      	str	r3, [r7, #32]
		while (intPart)
 8004620:	e01a      	b.n	8004658 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	4b41      	ldr	r3, [pc, #260]	@ (800472c <ftoa+0x25c>)
 8004626:	fb83 1302 	smull	r1, r3, r3, r2
 800462a:	1099      	asrs	r1, r3, #2
 800462c:	17d3      	asrs	r3, r2, #31
 800462e:	1ac9      	subs	r1, r1, r3
 8004630:	460b      	mov	r3, r1
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	1ad1      	subs	r1, r2, r3
 800463a:	b2ca      	uxtb	r2, r1
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	6239      	str	r1, [r7, #32]
 8004642:	3230      	adds	r2, #48	@ 0x30
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4a38      	ldr	r2, [pc, #224]	@ (800472c <ftoa+0x25c>)
 800464c:	fb82 1203 	smull	r1, r2, r2, r3
 8004650:	1092      	asrs	r2, r2, #2
 8004652:	17db      	asrs	r3, r3, #31
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	61fb      	str	r3, [r7, #28]
		while (intPart)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e1      	bne.n	8004622 <ftoa+0x152>
		}
		p1 = p;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	61bb      	str	r3, [r7, #24]
		while (p > ptr)
 8004662:	e00e      	b.n	8004682 <ftoa+0x1b2>
		{
			c = *--p;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	3b01      	subs	r3, #1
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	781a      	ldrb	r2, [r3, #0]
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	627a      	str	r2, [r7, #36]	@ 0x24
 800467e:	7dfa      	ldrb	r2, [r7, #23]
 8004680:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	429a      	cmp	r2, r3
 8004688:	d8ec      	bhi.n	8004664 <ftoa+0x194>
		}
		ptr = p1;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	if (precision)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d030      	beq.n	80046f6 <ftoa+0x226>
	{
		*ptr++ = '.';
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	627a      	str	r2, [r7, #36]	@ 0x24
 800469a:	222e      	movs	r2, #46	@ 0x2e
 800469c:	701a      	strb	r2, [r3, #0]
		while (precision--)
 800469e:	e025      	b.n	80046ec <ftoa+0x21c>
		{
			f *= 10.0;
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	4b1d      	ldr	r3, [pc, #116]	@ (800471c <ftoa+0x24c>)
 80046a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046aa:	f7fb ffad 	bl	8000608 <__aeabi_dmul>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 80046b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ba:	f7fc fa67 	bl	8000b8c <__aeabi_d2uiz>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80046c8:	7dfa      	ldrb	r2, [r7, #23]
 80046ca:	3230      	adds	r2, #48	@ 0x30
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]
			f -= c;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb ff2e 	bl	8000534 <__aeabi_i2d>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046e0:	f7fb fdda 	bl	8000298 <__aeabi_dsub>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	603a      	str	r2, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1d4      	bne.n	80046a0 <ftoa+0x1d0>
		}
	}
	*ptr = 0;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
	return buf;
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3728      	adds	r7, #40	@ 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bdb0      	pop	{r4, r5, r7, pc}
 8004706:	bf00      	nop
 8004708:	00000000 	.word	0x00000000
 800470c:	40c38800 	.word	0x40c38800
 8004710:	00000000 	.word	0x00000000
 8004714:	40f86a00 	.word	0x40f86a00
 8004718:	3ff00000 	.word	0x3ff00000
 800471c:	40240000 	.word	0x40240000
 8004720:	40590000 	.word	0x40590000
 8004724:	408f4000 	.word	0x408f4000
 8004728:	08009808 	.word	0x08009808
 800472c:	66666667 	.word	0x66666667

08004730 <Map>:

int32_t Map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	1a8a      	subs	r2, r1, r2
 800474a:	fb03 f202 	mul.w	r2, r3, r2
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	fb92 f2f3 	sdiv	r2, r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4413      	add	r3, r2
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <crc16_CCITT_update>:

static void crc16_CCITT_update(uint16_t *crc, uint16_t data)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
    uint8_t bytes[2] = {data >> 8, data & 0xFF};
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	b29b      	uxth	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	733b      	strb	r3, [r7, #12]
 800477e:	887b      	ldrh	r3, [r7, #2]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	737b      	strb	r3, [r7, #13]
    for (uint8_t i = 0; i < 2; i++)
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e032      	b.n	80047f0 <crc16_CCITT_update+0x88>
    {
        *crc ^= bytes[i] << 8;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b21a      	sxth	r2, r3
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	3310      	adds	r3, #16
 8004794:	443b      	add	r3, r7
 8004796:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800479a:	b21b      	sxth	r3, r3
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	b21b      	sxth	r3, r3
 80047a0:	4053      	eors	r3, r2
 80047a2:	b21b      	sxth	r3, r3
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	73bb      	strb	r3, [r7, #14]
 80047ae:	e019      	b.n	80047e4 <crc16_CCITT_update+0x7c>
            *crc = (*crc & 0x8000) ? (*crc << 1) ^ 0x1021 : *crc << 1;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b21b      	sxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	da0b      	bge.n	80047d2 <crc16_CCITT_update+0x6a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b21b      	sxth	r3, r3
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	b21b      	sxth	r3, r3
 80047c4:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80047c8:	f083 0301 	eor.w	r3, r3, #1
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	e003      	b.n	80047da <crc16_CCITT_update+0x72>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++)
 80047de:	7bbb      	ldrb	r3, [r7, #14]
 80047e0:	3301      	adds	r3, #1
 80047e2:	73bb      	strb	r3, [r7, #14]
 80047e4:	7bbb      	ldrb	r3, [r7, #14]
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	d9e2      	bls.n	80047b0 <crc16_CCITT_update+0x48>
    for (uint8_t i = 0; i < 2; i++)
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	3301      	adds	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d9c9      	bls.n	800478a <crc16_CCITT_update+0x22>
    }
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <htoa>:

static void htoa(uint16_t hex_value, char *output)
{
 8004804:	b4b0      	push	{r4, r5, r7}
 8004806:	b089      	sub	sp, #36	@ 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	80fb      	strh	r3, [r7, #6]
    const char hex_chars[] = "0123456789ABCDEF";
 8004810:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <htoa+0x88>)
 8004812:	f107 040c 	add.w	r4, r7, #12
 8004816:	461d      	mov	r5, r3
 8004818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800481a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	7023      	strb	r3, [r4, #0]
    output[0] = hex_chars[(hex_value >> 12) & 0x0F];
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	0b1b      	lsrs	r3, r3, #12
 8004824:	b29b      	uxth	r3, r3
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	3320      	adds	r3, #32
 800482c:	443b      	add	r3, r7
 800482e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	701a      	strb	r2, [r3, #0]
    output[1] = hex_chars[(hex_value >> 8) & 0x0F];
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b29b      	uxth	r3, r3
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	3220      	adds	r2, #32
 8004846:	443a      	add	r2, r7
 8004848:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800484c:	701a      	strb	r2, [r3, #0]
    output[2] = hex_chars[(hex_value >> 4) & 0x0F];
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	b29b      	uxth	r3, r3
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	3302      	adds	r3, #2
 800485c:	3220      	adds	r2, #32
 800485e:	443a      	add	r2, r7
 8004860:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004864:	701a      	strb	r2, [r3, #0]
    output[3] = hex_chars[hex_value & 0x0F];
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	3303      	adds	r3, #3
 8004870:	3220      	adds	r2, #32
 8004872:	443a      	add	r2, r7
 8004874:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004878:	701a      	strb	r2, [r3, #0]
    output[4] = ' ';
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	3304      	adds	r3, #4
 800487e:	2220      	movs	r2, #32
 8004880:	701a      	strb	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	3724      	adds	r7, #36	@ 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	bcb0      	pop	{r4, r5, r7}
 800488a:	4770      	bx	lr
 800488c:	080095f0 	.word	0x080095f0

08004890 <cur_cal>:

static float cur_cal(uint16_t adc_val)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	80fb      	strh	r3, [r7, #6]
	float temp = (adc_val* 1000 * 3.3f)/4095.0f;	//mV
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ac:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80048e4 <cur_cal+0x54>
 80048b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048b4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80048e8 <cur_cal+0x58>
 80048b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048bc:	edc7 7a03 	vstr	s15, [r7, #12]
	temp /= 250;
 80048c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80048c4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80048ec <cur_cal+0x5c>
 80048c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048cc:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	ee07 3a90 	vmov	s15, r3
}
 80048d6:	eeb0 0a67 	vmov.f32	s0, s15
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40533333 	.word	0x40533333
 80048e8:	457ff000 	.word	0x457ff000
 80048ec:	437a0000 	.word	0x437a0000

080048f0 <command_task_update>:

void command_task_update(void*)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	char rxData;
	int8_t	ret_val;
	while (! rbuffer_empty(p_CommandRingBuffer))
 80048f8:	e061      	b.n	80049be <command_task_update+0xce>
	{
		rxData = rbuffer_remove(p_CommandRingBuffer);
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <command_task_update+0xf0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 f887 	bl	8005a12 <rbuffer_remove>
 8004904:	4603      	mov	r3, r0
 8004906:	73bb      	strb	r3, [r7, #14]
		if ((rxData != '\r')&&(rxData != '\n'))	USART6_send_char(rxData);
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	2b0d      	cmp	r3, #13
 800490c:	d006      	beq.n	800491c <command_task_update+0x2c>
 800490e:	7bbb      	ldrb	r3, [r7, #14]
 8004910:	2b0a      	cmp	r3, #10
 8004912:	d003      	beq.n	800491c <command_task_update+0x2c>
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	4618      	mov	r0, r3
 8004918:	f001 fa5c 	bl	8005dd4 <USART6_send_char>
		if (rxData == '\r')//got a return or new line
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	2b0d      	cmp	r3, #13
 8004920:	d129      	bne.n	8004976 <command_task_update+0x86>
		{
			if (s_commandBufferIndex > 0)		//if we got the CR or LF at the begining, discard	
 8004922:	4b30      	ldr	r3, [pc, #192]	@ (80049e4 <command_task_update+0xf4>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01d      	beq.n	8004966 <command_task_update+0x76>
			{
				s_commandBuffer[s_commandBufferIndex] = 0;
 800492a:	4b2e      	ldr	r3, [pc, #184]	@ (80049e4 <command_task_update+0xf4>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	4b2d      	ldr	r3, [pc, #180]	@ (80049e8 <command_task_update+0xf8>)
 8004932:	2100      	movs	r1, #0
 8004934:	5499      	strb	r1, [r3, r2]
				ret_val = CmdLineProcess(s_commandBuffer);
 8004936:	482c      	ldr	r0, [pc, #176]	@ (80049e8 <command_task_update+0xf8>)
 8004938:	f7ff fcf6 	bl	8004328 <CmdLineProcess>
 800493c:	4603      	mov	r3, r0
 800493e:	73fb      	strb	r3, [r7, #15]
				s_commandBufferIndex = 0;
 8004940:	4b28      	ldr	r3, [pc, #160]	@ (80049e4 <command_task_update+0xf4>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
				if(ret_val < 5)
 8004946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494a:	2b04      	cmp	r3, #4
 800494c:	dc37      	bgt.n	80049be <command_task_update+0xce>
				{
					USART6_send_string(ErrorCode[ret_val]);
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	4a26      	ldr	r2, [pc, #152]	@ (80049ec <command_task_update+0xfc>)
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fa5f 	bl	8005e1c <USART6_send_string>
					USART6_send_string("\r\n> ");
 800495e:	4824      	ldr	r0, [pc, #144]	@ (80049f0 <command_task_update+0x100>)
 8004960:	f001 fa5c 	bl	8005e1c <USART6_send_string>
 8004964:	e02b      	b.n	80049be <command_task_update+0xce>
				}
			}	
			else
			{
				if(ret_val < 5)	USART6_send_string("\r\n> ");
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496a:	2b04      	cmp	r3, #4
 800496c:	dc27      	bgt.n	80049be <command_task_update+0xce>
 800496e:	4820      	ldr	r0, [pc, #128]	@ (80049f0 <command_task_update+0x100>)
 8004970:	f001 fa54 	bl	8005e1c <USART6_send_string>
 8004974:	e023      	b.n	80049be <command_task_update+0xce>
			}
		}
		else if ((rxData == 8) || (rxData == 127))	
 8004976:	7bbb      	ldrb	r3, [r7, #14]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d002      	beq.n	8004982 <command_task_update+0x92>
 800497c:	7bbb      	ldrb	r3, [r7, #14]
 800497e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004980:	d10a      	bne.n	8004998 <command_task_update+0xa8>
		{
			if (s_commandBufferIndex > 0) s_commandBufferIndex--;
 8004982:	4b18      	ldr	r3, [pc, #96]	@ (80049e4 <command_task_update+0xf4>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d019      	beq.n	80049be <command_task_update+0xce>
 800498a:	4b16      	ldr	r3, [pc, #88]	@ (80049e4 <command_task_update+0xf4>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <command_task_update+0xf4>)
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e012      	b.n	80049be <command_task_update+0xce>
		}
		else
		{
			s_commandBuffer[s_commandBufferIndex] = rxData;
 8004998:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <command_task_update+0xf4>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <command_task_update+0xf8>)
 80049a0:	7bbb      	ldrb	r3, [r7, #14]
 80049a2:	5453      	strb	r3, [r2, r1]
			s_commandBufferIndex ++;
 80049a4:	4b0f      	ldr	r3, [pc, #60]	@ (80049e4 <command_task_update+0xf4>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <command_task_update+0xf4>)
 80049ae:	701a      	strb	r2, [r3, #0]
			if (s_commandBufferIndex >= COMMAND_MAX_LENGTH) s_commandBufferIndex= 0;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <command_task_update+0xf4>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b1f      	cmp	r3, #31
 80049b6:	d902      	bls.n	80049be <command_task_update+0xce>
 80049b8:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <command_task_update+0xf4>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
	while (! rbuffer_empty(p_CommandRingBuffer))
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <command_task_update+0xf0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 ffe6 	bl	8005994 <rbuffer_empty>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f083 0301 	eor.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d192      	bne.n	80048fa <command_task_update+0xa>
		}
	}	
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20018a94 	.word	0x20018a94
 80049e4:	20018ab8 	.word	0x20018ab8
 80049e8:	20018a98 	.word	0x20018a98
 80049ec:	20000038 	.word	0x20000038
 80049f0:	08009604 	.word	0x08009604

080049f4 <Cmd_help>:



int Cmd_help(int argc, char *argv[]) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;

	USART6_send_string("\r\nAvailable commands:");
 80049fe:	480f      	ldr	r0, [pc, #60]	@ (8004a3c <Cmd_help+0x48>)
 8004a00:	f001 fa0c 	bl	8005e1c <USART6_send_string>
	pEntry = &g_psCmdTable[0];
 8004a04:	4b0e      	ldr	r3, [pc, #56]	@ (8004a40 <Cmd_help+0x4c>)
 8004a06:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8004a08:	e00f      	b.n	8004a2a <Cmd_help+0x36>
		USART6_send_string("\r\n");
 8004a0a:	480e      	ldr	r0, [pc, #56]	@ (8004a44 <Cmd_help+0x50>)
 8004a0c:	f001 fa06 	bl	8005e1c <USART6_send_string>
		USART6_send_string(pEntry->pcCmd);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fa01 	bl	8005e1c <USART6_send_string>
		USART6_send_string(pEntry->pcHelp);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f9fc 	bl	8005e1c <USART6_send_string>
		pEntry++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	330c      	adds	r3, #12
 8004a28:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1eb      	bne.n	8004a0a <Cmd_help+0x16>

	}
	return CMDLINE_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	0800960c 	.word	0x0800960c
 8004a40:	2000004c 	.word	0x2000004c
 8004a44:	08009624 	.word	0x08009624

08004a48 <Cmd_set_laser>:
// Format: get_temp
// Get the temperature from NTC
//
//*****************************************************************************
int Cmd_set_laser(int argc, char *argv[])
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	uint8_t laser_ind = atoi(argv[2]);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	3308      	adds	r3, #8
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fcb6 	bl	80063ca <atoi>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	73fb      	strb	r3, [r7, #15]
	uint8_t percent = atof(argv[3]);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fcab 	bl	80063c4 <atof>
 8004a6e:	ec53 2b10 	vmov	r2, r3, d0
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	f7fc f889 	bl	8000b8c <__aeabi_d2uiz>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73bb      	strb	r3, [r7, #14]
	if(!strcmp(argv[1], "int"))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3304      	adds	r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4951      	ldr	r1, [pc, #324]	@ (8004bcc <Cmd_set_laser+0x184>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fb fba2 	bl	80001d0 <strcmp>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d145      	bne.n	8004b1e <Cmd_set_laser+0xd6>
	{
		if(!laser_ind)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d112      	bne.n	8004abe <Cmd_set_laser+0x76>
		{
			if(argc < 3)		return CMDLINE_TOO_FEW_ARGS;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	dc01      	bgt.n	8004aa2 <Cmd_set_laser+0x5a>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e090      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			else if(argc > 3)	return CMDLINE_TOO_MANY_ARGS;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	dd01      	ble.n	8004aac <Cmd_set_laser+0x64>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e08b      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			MCP4902_Shutdown(&DAC_device, MCP4902_CHA);
 8004aac:	2100      	movs	r1, #0
 8004aae:	4848      	ldr	r0, [pc, #288]	@ (8004bd0 <Cmd_set_laser+0x188>)
 8004ab0:	f000 fdee 	bl	8005690 <MCP4902_Shutdown>
			ADG1414_Chain_SwitchAllOff(&laser_int);
 8004ab4:	4847      	ldr	r0, [pc, #284]	@ (8004bd4 <Cmd_set_laser+0x18c>)
 8004ab6:	f7ff f86b 	bl	8003b90 <ADG1414_Chain_SwitchAllOff>
			return CMDLINE_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e082      	b.n	8004bc4 <Cmd_set_laser+0x17c>
		}

		else if((laser_ind > 0)&&(laser_ind <= 36))
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d027      	beq.n	8004b14 <Cmd_set_laser+0xcc>
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b24      	cmp	r3, #36	@ 0x24
 8004ac8:	d824      	bhi.n	8004b14 <Cmd_set_laser+0xcc>
		{
			if(argc < 4)		return CMDLINE_TOO_FEW_ARGS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	dc01      	bgt.n	8004ad4 <Cmd_set_laser+0x8c>
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e077      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			else if(argc > 4)	return CMDLINE_TOO_MANY_ARGS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	dd01      	ble.n	8004ade <Cmd_set_laser+0x96>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e072      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			if((percent < 0)||(percent > 100))	return CMDLINE_INVALID_ARG;
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	2b64      	cmp	r3, #100	@ 0x64
 8004ae2:	d901      	bls.n	8004ae8 <Cmd_set_laser+0xa0>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	e06d      	b.n	8004bc4 <Cmd_set_laser+0x17c>

			uint8_t dac_val = Map(percent, 0, 100, 0, 255);
 8004ae8:	7bb8      	ldrb	r0, [r7, #14]
 8004aea:	23ff      	movs	r3, #255	@ 0xff
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	2264      	movs	r2, #100	@ 0x64
 8004af2:	2100      	movs	r1, #0
 8004af4:	f7ff fe1c 	bl	8004730 <Map>
 8004af8:	4603      	mov	r3, r0
 8004afa:	733b      	strb	r3, [r7, #12]
			MCP4902_Set_DAC(&DAC_device, MCP4902_CHA, dac_val);
 8004afc:	7b3b      	ldrb	r3, [r7, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	2100      	movs	r1, #0
 8004b02:	4833      	ldr	r0, [pc, #204]	@ (8004bd0 <Cmd_set_laser+0x188>)
 8004b04:	f000 fe1a 	bl	800573c <MCP4902_Set_DAC>
			ADG1414_Chain_SwitchOn(&laser_int, laser_ind);
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4831      	ldr	r0, [pc, #196]	@ (8004bd4 <Cmd_set_laser+0x18c>)
 8004b0e:	f7fe ffcf 	bl	8003ab0 <ADG1414_Chain_SwitchOn>
		{
 8004b12:	e056      	b.n	8004bc2 <Cmd_set_laser+0x17a>
		}
		else if(laser_ind > 36)	return CMDLINE_INVALID_ARG;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b24      	cmp	r3, #36	@ 0x24
 8004b18:	d953      	bls.n	8004bc2 <Cmd_set_laser+0x17a>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	e052      	b.n	8004bc4 <Cmd_set_laser+0x17c>

	}

	else if(!strcmp(argv[1], "ext"))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	492c      	ldr	r1, [pc, #176]	@ (8004bd8 <Cmd_set_laser+0x190>)
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fb fb52 	bl	80001d0 <strcmp>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d145      	bne.n	8004bbe <Cmd_set_laser+0x176>
	{
		if(!laser_ind)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d112      	bne.n	8004b5e <Cmd_set_laser+0x116>
		{
			if(argc < 3)		return CMDLINE_TOO_FEW_ARGS;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	dc01      	bgt.n	8004b42 <Cmd_set_laser+0xfa>
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e040      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			else if(argc > 3)	return CMDLINE_TOO_MANY_ARGS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	dd01      	ble.n	8004b4c <Cmd_set_laser+0x104>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e03b      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			MCP4902_Shutdown(&DAC_device, MCP4902_CHB);
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4820      	ldr	r0, [pc, #128]	@ (8004bd0 <Cmd_set_laser+0x188>)
 8004b50:	f000 fd9e 	bl	8005690 <MCP4902_Shutdown>
			ADG1414_Chain_SwitchAllOff(&laser_ext);
 8004b54:	4821      	ldr	r0, [pc, #132]	@ (8004bdc <Cmd_set_laser+0x194>)
 8004b56:	f7ff f81b 	bl	8003b90 <ADG1414_Chain_SwitchAllOff>
			return CMDLINE_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e032      	b.n	8004bc4 <Cmd_set_laser+0x17c>
		}

		else if((laser_ind > 0)&&(laser_ind <= 8))
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d027      	beq.n	8004bb4 <Cmd_set_laser+0x16c>
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d824      	bhi.n	8004bb4 <Cmd_set_laser+0x16c>
		{
			if(argc < 4)		return CMDLINE_TOO_FEW_ARGS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	dc01      	bgt.n	8004b74 <Cmd_set_laser+0x12c>
 8004b70:	2303      	movs	r3, #3
 8004b72:	e027      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			else if(argc > 4)	return CMDLINE_TOO_MANY_ARGS;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	dd01      	ble.n	8004b7e <Cmd_set_laser+0x136>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e022      	b.n	8004bc4 <Cmd_set_laser+0x17c>
			if((percent < 0)||(percent > 100))	return CMDLINE_INVALID_ARG;
 8004b7e:	7bbb      	ldrb	r3, [r7, #14]
 8004b80:	2b64      	cmp	r3, #100	@ 0x64
 8004b82:	d901      	bls.n	8004b88 <Cmd_set_laser+0x140>
 8004b84:	2304      	movs	r3, #4
 8004b86:	e01d      	b.n	8004bc4 <Cmd_set_laser+0x17c>

			uint8_t dac_val = Map(percent, 0, 100, 0, 255);
 8004b88:	7bb8      	ldrb	r0, [r7, #14]
 8004b8a:	23ff      	movs	r3, #255	@ 0xff
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2264      	movs	r2, #100	@ 0x64
 8004b92:	2100      	movs	r1, #0
 8004b94:	f7ff fdcc 	bl	8004730 <Map>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	737b      	strb	r3, [r7, #13]
			MCP4902_Set_DAC(&DAC_device, MCP4902_CHB, dac_val);
 8004b9c:	7b7b      	ldrb	r3, [r7, #13]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	480b      	ldr	r0, [pc, #44]	@ (8004bd0 <Cmd_set_laser+0x188>)
 8004ba4:	f000 fdca 	bl	800573c <MCP4902_Set_DAC>
			ADG1414_Chain_SwitchOn(&laser_ext, laser_ind);
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	4619      	mov	r1, r3
 8004bac:	480b      	ldr	r0, [pc, #44]	@ (8004bdc <Cmd_set_laser+0x194>)
 8004bae:	f7fe ff7f 	bl	8003ab0 <ADG1414_Chain_SwitchOn>
		{
 8004bb2:	e006      	b.n	8004bc2 <Cmd_set_laser+0x17a>
		}
		else if(laser_ind > 8)	return CMDLINE_INVALID_ARG;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d903      	bls.n	8004bc2 <Cmd_set_laser+0x17a>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	e002      	b.n	8004bc4 <Cmd_set_laser+0x17c>

	}

	else return CMDLINE_INVALID_ARG;
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	e000      	b.n	8004bc4 <Cmd_set_laser+0x17c>
 	return CMDLINE_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08009628 	.word	0x08009628
 8004bd0:	2001899c 	.word	0x2001899c
 8004bd4:	200189b4 	.word	0x200189b4
 8004bd8:	0800962c 	.word	0x0800962c
 8004bdc:	200189d4 	.word	0x200189d4

08004be0 <Cmd_get_current>:

// Format: get_current [int/ext]
int Cmd_get_current(int argc, char *argv[])
{
 8004be0:	b5b0      	push	{r4, r5, r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	dc01      	bgt.n	8004bf4 <Cmd_get_current+0x14>
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e055      	b.n	8004ca0 <Cmd_get_current+0xc0>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	dd01      	ble.n	8004bfe <Cmd_get_current+0x1e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e050      	b.n	8004ca0 <Cmd_get_current+0xc0>
	char buf[10];
	float data_temp;
	if(!strcmp(argv[1], "int"))
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	3304      	adds	r3, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4928      	ldr	r1, [pc, #160]	@ (8004ca8 <Cmd_get_current+0xc8>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fb fae2 	bl	80001d0 <strcmp>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11c      	bne.n	8004c4c <Cmd_get_current+0x6c>
	{
		USART6_send_string("\r\nCurrent int: ");
 8004c12:	4826      	ldr	r0, [pc, #152]	@ (8004cac <Cmd_get_current+0xcc>)
 8004c14:	f001 f902 	bl	8005e1c <USART6_send_string>
		data_temp = cur_cal(mcu_adc.ADC_Data[0]);
 8004c18:	4b25      	ldr	r3, [pc, #148]	@ (8004cb0 <Cmd_get_current+0xd0>)
 8004c1a:	899b      	ldrh	r3, [r3, #12]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fe37 	bl	8004890 <cur_cal>
 8004c22:	ed87 0a05 	vstr	s0, [r7, #20]
		UARTprintf("%s mA",ftoa((float)data_temp, buf, 2));
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f7fb fc96 	bl	8000558 <__aeabi_f2d>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	2102      	movs	r1, #2
 8004c36:	4618      	mov	r0, r3
 8004c38:	ec45 4b10 	vmov	d0, r4, r5
 8004c3c:	f7ff fc48 	bl	80044d0 <ftoa>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4619      	mov	r1, r3
 8004c44:	481b      	ldr	r0, [pc, #108]	@ (8004cb4 <Cmd_get_current+0xd4>)
 8004c46:	f001 fb21 	bl	800628c <UARTprintf>
 8004c4a:	e028      	b.n	8004c9e <Cmd_get_current+0xbe>
	}
	else if(!strcmp(argv[1], "ext"))
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4919      	ldr	r1, [pc, #100]	@ (8004cb8 <Cmd_get_current+0xd8>)
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fabb 	bl	80001d0 <strcmp>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11c      	bne.n	8004c9a <Cmd_get_current+0xba>
	{
		USART6_send_string("\r\nCurrent ext: ");
 8004c60:	4816      	ldr	r0, [pc, #88]	@ (8004cbc <Cmd_get_current+0xdc>)
 8004c62:	f001 f8db 	bl	8005e1c <USART6_send_string>
		data_temp = cur_cal(mcu_adc.ADC_Data[1]);
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <Cmd_get_current+0xd0>)
 8004c68:	89db      	ldrh	r3, [r3, #14]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fe10 	bl	8004890 <cur_cal>
 8004c70:	ed87 0a05 	vstr	s0, [r7, #20]
		UARTprintf("%s mA",ftoa((float)data_temp, buf, 2));
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f7fb fc6f 	bl	8000558 <__aeabi_f2d>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	2102      	movs	r1, #2
 8004c84:	4618      	mov	r0, r3
 8004c86:	ec45 4b10 	vmov	d0, r4, r5
 8004c8a:	f7ff fc21 	bl	80044d0 <ftoa>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4619      	mov	r1, r3
 8004c92:	4808      	ldr	r0, [pc, #32]	@ (8004cb4 <Cmd_get_current+0xd4>)
 8004c94:	f001 fafa 	bl	800628c <UARTprintf>
 8004c98:	e001      	b.n	8004c9e <Cmd_get_current+0xbe>
	}
	else return CMDLINE_INVALID_ARG;
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	e000      	b.n	8004ca0 <Cmd_get_current+0xc0>
	return CMDLINE_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca8:	08009628 	.word	0x08009628
 8004cac:	08009630 	.word	0x08009630
 8004cb0:	200189f4 	.word	0x200189f4
 8004cb4:	08009640 	.word	0x08009640
 8004cb8:	0800962c 	.word	0x0800962c
 8004cbc:	08009648 	.word	0x08009648

08004cc0 <Cmd_pd_get>:

//Format: pd_get [pd_index]
int Cmd_pd_get(int argc, char *argv[])
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	dc01      	bgt.n	8004cd4 <Cmd_pd_get+0x14>
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e031      	b.n	8004d38 <Cmd_pd_get+0x78>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	dd01      	ble.n	8004cde <Cmd_pd_get+0x1e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e02c      	b.n	8004d38 <Cmd_pd_get+0x78>

	uint8_t pd_ind = atoi(argv[1]);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 fb70 	bl	80063ca <atoi>
 8004cea:	4603      	mov	r3, r0
 8004cec:	73fb      	strb	r3, [r7, #15]
	if((pd_ind < 1) || (pd_ind > 36)) return CMDLINE_INVALID_ARG;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <Cmd_pd_get+0x3a>
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b24      	cmp	r3, #36	@ 0x24
 8004cf8:	d901      	bls.n	8004cfe <Cmd_pd_get+0x3e>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e01c      	b.n	8004d38 <Cmd_pd_get+0x78>

	SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_8BIT);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	480f      	ldr	r0, [pc, #60]	@ (8004d40 <Cmd_pd_get+0x80>)
 8004d02:	f7ff fab7 	bl	8004274 <SPI_SetDataLength>
	SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV16);
 8004d06:	2118      	movs	r1, #24
 8004d08:	480d      	ldr	r0, [pc, #52]	@ (8004d40 <Cmd_pd_get+0x80>)
 8004d0a:	f7ff fa87 	bl	800421c <SPI_SetPrescaler>
	ADG1414_Chain_SwitchOn(&photo_sw, pd_ind);
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	4619      	mov	r1, r3
 8004d12:	480c      	ldr	r0, [pc, #48]	@ (8004d44 <Cmd_pd_get+0x84>)
 8004d14:	f7fe fecc 	bl	8003ab0 <ADG1414_Chain_SwitchOn>
	LL_mDelay(10);
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f7fe fc69 	bl	80035f0 <LL_mDelay>

	ADS8327_Read_Data_Polling(&photo_adc, 1000);
 8004d1e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004d22:	4809      	ldr	r0, [pc, #36]	@ (8004d48 <Cmd_pd_get+0x88>)
 8004d24:	f7ff f990 	bl	8004048 <ADS8327_Read_Data_Polling>
	UARTprintf("\r\nPD_index[%d]: %d", pd_ind, (uint16_t)photo_adc.ADC_val);
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4a07      	ldr	r2, [pc, #28]	@ (8004d48 <Cmd_pd_get+0x88>)
 8004d2c:	8c12      	ldrh	r2, [r2, #32]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4806      	ldr	r0, [pc, #24]	@ (8004d4c <Cmd_pd_get+0x8c>)
 8004d32:	f001 faab 	bl	800628c <UARTprintf>
	return CMDLINE_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40003800 	.word	0x40003800
 8004d44:	20018a24 	.word	0x20018a24
 8004d48:	20018a44 	.word	0x20018a44
 8004d4c:	08009658 	.word	0x08009658

08004d50 <Cmd_sample_set_pd>:


//format: sp_set_pd [photo_index]
int Cmd_sample_set_pd(int argc, char *argv[])
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	dc01      	bgt.n	8004d64 <Cmd_sample_set_pd+0x14>
 8004d60:	2303      	movs	r3, #3
 8004d62:	e025      	b.n	8004db0 <Cmd_sample_set_pd+0x60>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	dd01      	ble.n	8004d6e <Cmd_sample_set_pd+0x1e>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e020      	b.n	8004db0 <Cmd_sample_set_pd+0x60>

	uint8_t pd_ind = atoi(argv[1]);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	3304      	adds	r3, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fb28 	bl	80063ca <atoi>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]

	if((pd_ind < 1) || (pd_ind > 36)) return CMDLINE_INVALID_ARG;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <Cmd_sample_set_pd+0x3a>
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b24      	cmp	r3, #36	@ 0x24
 8004d88:	d901      	bls.n	8004d8e <Cmd_sample_set_pd+0x3e>
 8004d8a:	2304      	movs	r3, #4
 8004d8c:	e010      	b.n	8004db0 <Cmd_sample_set_pd+0x60>

	SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_8BIT);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4809      	ldr	r0, [pc, #36]	@ (8004db8 <Cmd_sample_set_pd+0x68>)
 8004d92:	f7ff fa6f 	bl	8004274 <SPI_SetDataLength>
	SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV16);
 8004d96:	2118      	movs	r1, #24
 8004d98:	4807      	ldr	r0, [pc, #28]	@ (8004db8 <Cmd_sample_set_pd+0x68>)
 8004d9a:	f7ff fa3f 	bl	800421c <SPI_SetPrescaler>
	ADG1414_Chain_SwitchOn(&photo_sw, pd_ind);
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	4619      	mov	r1, r3
 8004da2:	4806      	ldr	r0, [pc, #24]	@ (8004dbc <Cmd_sample_set_pd+0x6c>)
 8004da4:	f7fe fe84 	bl	8003ab0 <ADG1414_Chain_SwitchOn>
	photo_index = pd_ind;
 8004da8:	4a05      	ldr	r2, [pc, #20]	@ (8004dc0 <Cmd_sample_set_pd+0x70>)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	7013      	strb	r3, [r2, #0]
	return CMDLINE_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40003800 	.word	0x40003800
 8004dbc:	20018a24 	.word	0x20018a24
 8004dc0:	20018ab9 	.word	0x20018ab9

08004dc4 <Cmd_sample_set_rate>:

//format: sp_set_rate [sampling_rate] [num_samples]
int Cmd_sample_set_rate(int argc, char *argv[])
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	dc01      	bgt.n	8004dd8 <Cmd_sample_set_rate+0x14>
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e07d      	b.n	8004ed4 <Cmd_sample_set_rate+0x110>
	if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	dd01      	ble.n	8004de2 <Cmd_sample_set_rate+0x1e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e078      	b.n	8004ed4 <Cmd_sample_set_rate+0x110>

	uint32_t sp_rate = atoi(argv[1]);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 faee 	bl	80063ca <atoi>
 8004dee:	4603      	mov	r3, r0
 8004df0:	617b      	str	r3, [r7, #20]
	uint32_t num_sample = atoi(argv[2]);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fae6 	bl	80063ca <atoi>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	613b      	str	r3, [r7, #16]

	if((sp_rate < 1) || (sp_rate > 330000)) return CMDLINE_INVALID_ARG;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <Cmd_sample_set_rate+0x4c>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a34      	ldr	r2, [pc, #208]	@ (8004edc <Cmd_sample_set_rate+0x118>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <Cmd_sample_set_rate+0x50>
 8004e10:	2304      	movs	r3, #4
 8004e12:	e05f      	b.n	8004ed4 <Cmd_sample_set_rate+0x110>
	if((num_sample < 1) || (num_sample > 50000)) return CMDLINE_INVALID_ARG;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <Cmd_sample_set_rate+0x60>
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d901      	bls.n	8004e28 <Cmd_sample_set_rate+0x64>
 8004e24:	2304      	movs	r3, #4
 8004e26:	e055      	b.n	8004ed4 <Cmd_sample_set_rate+0x110>

	uint32_t AutoReload = ROUND(1000000.0f / sp_rate) - 1;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e32:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8004ee0 <Cmd_sample_set_rate+0x11c>
 8004e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e42:	db1a      	blt.n	8004e7a <Cmd_sample_set_rate+0xb6>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004ee0 <Cmd_sample_set_rate+0x11c>
 8004e52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e56:	ee16 0a90 	vmov	r0, s13
 8004e5a:	f7fb fb7d 	bl	8000558 <__aeabi_f2d>
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <Cmd_sample_set_rate+0x120>)
 8004e64:	f7fb fa1a 	bl	800029c <__adddf3>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f7fb fe64 	bl	8000b3c <__aeabi_d2iz>
 8004e74:	4603      	mov	r3, r0
 8004e76:	3b01      	subs	r3, #1
 8004e78:	e019      	b.n	8004eae <Cmd_sample_set_rate+0xea>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e84:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004ee0 <Cmd_sample_set_rate+0x11c>
 8004e88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e8c:	ee16 0a90 	vmov	r0, s13
 8004e90:	f7fb fb62 	bl	8000558 <__aeabi_f2d>
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <Cmd_sample_set_rate+0x120>)
 8004e9a:	f7fb f9fd 	bl	8000298 <__aeabi_dsub>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb fe49 	bl	8000b3c <__aeabi_d2iz>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	3b01      	subs	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
	LL_TIM_DisableIT_UPDATE(TIM1);
 8004eb0:	480d      	ldr	r0, [pc, #52]	@ (8004ee8 <Cmd_sample_set_rate+0x124>)
 8004eb2:	f7ff fadf 	bl	8004474 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM1);
 8004eb6:	480c      	ldr	r0, [pc, #48]	@ (8004ee8 <Cmd_sample_set_rate+0x124>)
 8004eb8:	f7ff faa0 	bl	80043fc <LL_TIM_DisableCounter>
	LL_TIM_SetAutoReload(TIM1, AutoReload);
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	480a      	ldr	r0, [pc, #40]	@ (8004ee8 <Cmd_sample_set_rate+0x124>)
 8004ec0:	f7ff faba 	bl	8004438 <LL_TIM_SetAutoReload>

	adc_rec_total = num_sample + 3;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3303      	adds	r3, #3
 8004ec8:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <Cmd_sample_set_rate+0x128>)
 8004eca:	6013      	str	r3, [r2, #0]
	samp_rate = sp_rate;
 8004ecc:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <Cmd_sample_set_rate+0x12c>)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6013      	str	r3, [r2, #0]
	return CMDLINE_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	00050910 	.word	0x00050910
 8004ee0:	49742400 	.word	0x49742400
 8004ee4:	3fe00000 	.word	0x3fe00000
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	20018998 	.word	0x20018998
 8004ef0:	20018abc 	.word	0x20018abc

08004ef4 <Cmd_sample_trig>:

//format: sp_trig
int Cmd_sample_trig(int argc, char *argv[])
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	dc01      	bgt.n	8004f08 <Cmd_sample_trig+0x14>
 8004f04:	2303      	movs	r3, #3
 8004f06:	e038      	b.n	8004f7a <Cmd_sample_trig+0x86>
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	dd01      	ble.n	8004f12 <Cmd_sample_trig+0x1e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e033      	b.n	8004f7a <Cmd_sample_trig+0x86>

	if (!adc_rec_total)
 8004f12:	4b1c      	ldr	r3, [pc, #112]	@ (8004f84 <Cmd_sample_trig+0x90>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <Cmd_sample_trig+0x30>
	{
		USART6_send_string("\r\nThe args: [num_samples] must be different from '0'");
 8004f1a:	481b      	ldr	r0, [pc, #108]	@ (8004f88 <Cmd_sample_trig+0x94>)
 8004f1c:	f000 ff7e 	bl	8005e1c <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 8004f20:	2304      	movs	r3, #4
 8004f22:	e02a      	b.n	8004f7a <Cmd_sample_trig+0x86>
	}
	if (!samp_rate)
 8004f24:	4b19      	ldr	r3, [pc, #100]	@ (8004f8c <Cmd_sample_trig+0x98>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <Cmd_sample_trig+0x42>
	{
		USART6_send_string("\r\nThe args: [sampling_rate] must be different from '0'");
 8004f2c:	4818      	ldr	r0, [pc, #96]	@ (8004f90 <Cmd_sample_trig+0x9c>)
 8004f2e:	f000 ff75 	bl	8005e1c <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 8004f32:	2304      	movs	r3, #4
 8004f34:	e021      	b.n	8004f7a <Cmd_sample_trig+0x86>
	}
	// Prepare to collect data
	memset(adc_rec_buf, 0x00, adc_rec_total * 2);		//Clear pre buffer
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <Cmd_sample_trig+0x90>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4814      	ldr	r0, [pc, #80]	@ (8004f94 <Cmd_sample_trig+0xa0>)
 8004f42:	f002 f9de 	bl	8007302 <memset>
	adc_ptr = adc_rec_buf;
 8004f46:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <Cmd_sample_trig+0xa4>)
 8004f48:	4a12      	ldr	r2, [pc, #72]	@ (8004f94 <Cmd_sample_trig+0xa0>)
 8004f4a:	601a      	str	r2, [r3, #0]
	adc_rec_ind = 0;
 8004f4c:	4b13      	ldr	r3, [pc, #76]	@ (8004f9c <Cmd_sample_trig+0xa8>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
	SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_16BIT);
 8004f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f56:	4812      	ldr	r0, [pc, #72]	@ (8004fa0 <Cmd_sample_trig+0xac>)
 8004f58:	f7ff f98c 	bl	8004274 <SPI_SetDataLength>
	SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV2);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4810      	ldr	r0, [pc, #64]	@ (8004fa0 <Cmd_sample_trig+0xac>)
 8004f60:	f7ff f95c 	bl	800421c <SPI_SetPrescaler>
	// Start collect data
	LL_TIM_SetCounter(TIM1, 0);
 8004f64:	2100      	movs	r1, #0
 8004f66:	480f      	ldr	r0, [pc, #60]	@ (8004fa4 <Cmd_sample_trig+0xb0>)
 8004f68:	f7ff fa58 	bl	800441c <LL_TIM_SetCounter>
	LL_TIM_EnableIT_UPDATE(TIM1);  // Bật ngắt Update
 8004f6c:	480d      	ldr	r0, [pc, #52]	@ (8004fa4 <Cmd_sample_trig+0xb0>)
 8004f6e:	f7ff fa71 	bl	8004454 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);    // Bật timer
 8004f72:	480c      	ldr	r0, [pc, #48]	@ (8004fa4 <Cmd_sample_trig+0xb0>)
 8004f74:	f7ff fa32 	bl	80043dc <LL_TIM_EnableCounter>

	return CMDLINE_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20018998 	.word	0x20018998
 8004f88:	0800966c 	.word	0x0800966c
 8004f8c:	20018abc 	.word	0x20018abc
 8004f90:	080096a4 	.word	0x080096a4
 8004f94:	200002e0 	.word	0x200002e0
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	20018994 	.word	0x20018994
 8004fa0:	40003800 	.word	0x40003800
 8004fa4:	40010000 	.word	0x40010000

08004fa8 <Cmd_sample_status_get>:

//format: sp_status
int Cmd_sample_status_get(int argc, char *argv[])
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
	if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dc01      	bgt.n	8004fbc <Cmd_sample_status_get+0x14>
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e01c      	b.n	8004ff6 <Cmd_sample_status_get+0x4e>
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	dd01      	ble.n	8004fc6 <Cmd_sample_status_get+0x1e>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e017      	b.n	8004ff6 <Cmd_sample_status_get+0x4e>

	UARTprintf("\r\nPhoto: %d   Sampling_Rate: %d SPS   Num_Samples: %d S", photo_index, samp_rate, adc_rec_total);
 8004fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <Cmd_sample_status_get+0x58>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <Cmd_sample_status_get+0x5c>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <Cmd_sample_status_get+0x60>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	480d      	ldr	r0, [pc, #52]	@ (800500c <Cmd_sample_status_get+0x64>)
 8004fd6:	f001 f959 	bl	800628c <UARTprintf>
	if(adc_rec_ind == adc_rec_total)	USART6_send_string("\r\n-> ADC Data ready to get!");
 8004fda:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <Cmd_sample_status_get+0x68>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <Cmd_sample_status_get+0x60>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d103      	bne.n	8004fee <Cmd_sample_status_get+0x46>
 8004fe6:	480b      	ldr	r0, [pc, #44]	@ (8005014 <Cmd_sample_status_get+0x6c>)
 8004fe8:	f000 ff18 	bl	8005e1c <USART6_send_string>
 8004fec:	e002      	b.n	8004ff4 <Cmd_sample_status_get+0x4c>
	else USART6_send_string("\r\n-> ADC Data is not ready!");
 8004fee:	480a      	ldr	r0, [pc, #40]	@ (8005018 <Cmd_sample_status_get+0x70>)
 8004ff0:	f000 ff14 	bl	8005e1c <USART6_send_string>
	return CMDLINE_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20018ab9 	.word	0x20018ab9
 8005004:	20018abc 	.word	0x20018abc
 8005008:	20018998 	.word	0x20018998
 800500c:	080096dc 	.word	0x080096dc
 8005010:	20018994 	.word	0x20018994
 8005014:	08009714 	.word	0x08009714
 8005018:	08009730 	.word	0x08009730

0800501c <Cmd_sample_get>:

//format: sp_get [num_samples]
int Cmd_sample_get(int argc, char *argv[])
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b01      	cmp	r3, #1
 800502a:	dc01      	bgt.n	8005030 <Cmd_sample_get+0x14>
 800502c:	2303      	movs	r3, #3
 800502e:	e073      	b.n	8005118 <Cmd_sample_get+0xfc>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	dd01      	ble.n	800503a <Cmd_sample_get+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e06e      	b.n	8005118 <Cmd_sample_get+0xfc>
	if (!adc_rec_ind)
 800503a:	4b39      	ldr	r3, [pc, #228]	@ (8005120 <Cmd_sample_get+0x104>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <Cmd_sample_get+0x30>
	{
		USART6_send_string("\r\nPlease send cmd 'sp_trig' first!");
 8005042:	4838      	ldr	r0, [pc, #224]	@ (8005124 <Cmd_sample_get+0x108>)
 8005044:	f000 feea 	bl	8005e1c <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 8005048:	2304      	movs	r3, #4
 800504a:	e065      	b.n	8005118 <Cmd_sample_get+0xfc>
	}
	uint32_t num_sample = atoi(argv[1]);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	3304      	adds	r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f9b9 	bl	80063ca <atoi>
 8005058:	4603      	mov	r3, r0
 800505a:	61bb      	str	r3, [r7, #24]
	uint16_t crc_val = 0xffff;
 800505c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005060:	827b      	strh	r3, [r7, #18]
	uint8_t bytes_temp[3];

	if((num_sample < 1) || (num_sample > 50000)) return CMDLINE_INVALID_ARG;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <Cmd_sample_get+0x56>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <Cmd_sample_get+0x5a>
 8005072:	2304      	movs	r3, #4
 8005074:	e050      	b.n	8005118 <Cmd_sample_get+0xfc>

	uint32_t header = (0x000FFFFF & num_sample) | 0xFFF00000;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800507c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8005080:	617b      	str	r3, [r7, #20]
	bytes_temp[0] = (uint8_t)(header >> 16);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	b2db      	uxtb	r3, r3
 8005088:	733b      	strb	r3, [r7, #12]
	bytes_temp[1] = (uint8_t)(header >> 8);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	b2db      	uxtb	r3, r3
 8005090:	737b      	strb	r3, [r7, #13]
	bytes_temp[2] = (uint8_t)header;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	73bb      	strb	r3, [r7, #14]
	USART6_send_array((const char*)bytes_temp, 3);
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	2103      	movs	r1, #3
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fed1 	bl	8005e46 <USART6_send_array>

	for(uint32_t i = 0; i < num_sample; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e023      	b.n	80050f2 <Cmd_sample_get+0xd6>
	{
		crc16_CCITT_update(&crc_val, adc_rec_buf[i+3]);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3303      	adds	r3, #3
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <Cmd_sample_get+0x10c>)
 80050b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80050b4:	f107 0312 	add.w	r3, r7, #18
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fb54 	bl	8004768 <crc16_CCITT_update>
		bytes_temp[0] = adc_rec_buf[i+3] >> 8;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3303      	adds	r3, #3
 80050c4:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <Cmd_sample_get+0x10c>)
 80050c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	733b      	strb	r3, [r7, #12]
		bytes_temp[1] = adc_rec_buf[i+3] & 0xFF;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3303      	adds	r3, #3
 80050d6:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <Cmd_sample_get+0x10c>)
 80050d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	737b      	strb	r3, [r7, #13]
		USART6_send_array((const char*)bytes_temp, 2);
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	2102      	movs	r1, #2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fead 	bl	8005e46 <USART6_send_array>
	for(uint32_t i = 0; i < num_sample; i++)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	3301      	adds	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d3d7      	bcc.n	80050aa <Cmd_sample_get+0x8e>
	}
	bytes_temp[0] = crc_val >> 8;
 80050fa:	8a7b      	ldrh	r3, [r7, #18]
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	b29b      	uxth	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	733b      	strb	r3, [r7, #12]
	bytes_temp[1] = crc_val & 0xFF;
 8005104:	8a7b      	ldrh	r3, [r7, #18]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	737b      	strb	r3, [r7, #13]
	USART6_send_array((const char*)&bytes_temp, 2);
 800510a:	f107 030c 	add.w	r3, r7, #12
 800510e:	2102      	movs	r1, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fe98 	bl	8005e46 <USART6_send_array>
	return CMDLINE_NOT_RETURN;
 8005116:	2305      	movs	r3, #5
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20018994 	.word	0x20018994
 8005124:	0800974c 	.word	0x0800974c
 8005128:	200002e0 	.word	0x200002e0

0800512c <Cmd_sample_get_char>:

//format: sp_get_c [num_samples]
int Cmd_sample_get_char(int argc, char *argv[])
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b01      	cmp	r3, #1
 800513a:	dc01      	bgt.n	8005140 <Cmd_sample_get_char+0x14>
 800513c:	2303      	movs	r3, #3
 800513e:	e059      	b.n	80051f4 <Cmd_sample_get_char+0xc8>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	dd01      	ble.n	800514a <Cmd_sample_get_char+0x1e>
 8005146:	2302      	movs	r3, #2
 8005148:	e054      	b.n	80051f4 <Cmd_sample_get_char+0xc8>
	if (!adc_rec_ind)
 800514a:	4b2c      	ldr	r3, [pc, #176]	@ (80051fc <Cmd_sample_get_char+0xd0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <Cmd_sample_get_char+0x30>
	{
		USART6_send_string("Please send cmd 'sp_trig' first!");
 8005152:	482b      	ldr	r0, [pc, #172]	@ (8005200 <Cmd_sample_get_char+0xd4>)
 8005154:	f000 fe62 	bl	8005e1c <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 8005158:	2304      	movs	r3, #4
 800515a:	e04b      	b.n	80051f4 <Cmd_sample_get_char+0xc8>
	}
	uint32_t num_sample = atoi(argv[1]);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	3304      	adds	r3, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f001 f931 	bl	80063ca <atoi>
 8005168:	4603      	mov	r3, r0
 800516a:	613b      	str	r3, [r7, #16]
	uint16_t crc_val = 0xffff;
 800516c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005170:	81fb      	strh	r3, [r7, #14]

	if((num_sample < 1) || (num_sample > 50000)) return CMDLINE_INVALID_ARG;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <Cmd_sample_get_char+0x56>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <Cmd_sample_get_char+0x5a>
 8005182:	2304      	movs	r3, #4
 8005184:	e036      	b.n	80051f4 <Cmd_sample_get_char+0xc8>

	char ascii_buf[5];
	USART6_send_string("\r\n");
 8005186:	481f      	ldr	r0, [pc, #124]	@ (8005204 <Cmd_sample_get_char+0xd8>)
 8005188:	f000 fe48 	bl	8005e1c <USART6_send_string>
	for(uint32_t i = 0; i < num_sample; i++)
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e01e      	b.n	80051d0 <Cmd_sample_get_char+0xa4>
	{
		crc16_CCITT_update(&crc_val, adc_rec_buf[i+3]);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3303      	adds	r3, #3
 8005196:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <Cmd_sample_get_char+0xdc>)
 8005198:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800519c:	f107 030e 	add.w	r3, r7, #14
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fae0 	bl	8004768 <crc16_CCITT_update>
		htoa(adc_rec_buf[i+3], ascii_buf);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3303      	adds	r3, #3
 80051ac:	4a16      	ldr	r2, [pc, #88]	@ (8005208 <Cmd_sample_get_char+0xdc>)
 80051ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b2:	f107 0208 	add.w	r2, r7, #8
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fb23 	bl	8004804 <htoa>
		USART6_send_array(ascii_buf, 5);
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	2105      	movs	r1, #5
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fe3e 	bl	8005e46 <USART6_send_array>
	for(uint32_t i = 0; i < num_sample; i++)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	3301      	adds	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3dc      	bcc.n	8005192 <Cmd_sample_get_char+0x66>
	}

	htoa(crc_val, ascii_buf);
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	f107 0208 	add.w	r2, r7, #8
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fb0f 	bl	8004804 <htoa>
	USART6_send_array(ascii_buf, 5);
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	2105      	movs	r1, #5
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fe2a 	bl	8005e46 <USART6_send_array>
	return CMDLINE_NOT_RETURN;
 80051f2:	2305      	movs	r3, #5
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20018994 	.word	0x20018994
 8005200:	08009770 	.word	0x08009770
 8005204:	08009624 	.word	0x08009624
 8005208:	200002e0 	.word	0x200002e0

0800520c <Cmd_get_temp>:

//format: get_temp
int Cmd_get_temp(int argc, char *argv[])
{
 800520c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8005210:	b089      	sub	sp, #36	@ 0x24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
	char buf[10];

	for(uint8_t i = 0; i < 8; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e031      	b.n	8005282 <Cmd_get_temp+0x76>
	{
		if(mcu_adc.ADC_Data[i+2] < 10)
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	3302      	adds	r3, #2
 8005222:	4a1c      	ldr	r2, [pc, #112]	@ (8005294 <Cmd_get_temp+0x88>)
 8005224:	3304      	adds	r3, #4
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	4413      	add	r3, r2
 800522a:	889b      	ldrh	r3, [r3, #4]
 800522c:	2b09      	cmp	r3, #9
 800522e:	d805      	bhi.n	800523c <Cmd_get_temp+0x30>
		{
			UARTprintf("\r\n NTC[%d]: ERROR", i);
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	4619      	mov	r1, r3
 8005234:	4818      	ldr	r0, [pc, #96]	@ (8005298 <Cmd_get_temp+0x8c>)
 8005236:	f001 f829 	bl	800628c <UARTprintf>
 800523a:	e01f      	b.n	800527c <Cmd_get_temp+0x70>
		}
		else
		{
			float temp = ntc_convertToC(mcu_adc.ADC_Data[i+2]);
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	3302      	adds	r3, #2
 8005240:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <Cmd_get_temp+0x88>)
 8005242:	3304      	adds	r3, #4
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	889b      	ldrh	r3, [r3, #4]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fafc 	bl	8005848 <ntc_convertToC>
 8005250:	ed87 0a06 	vstr	s0, [r7, #24]
			UARTprintf("\r\n NTC[%d]: %s C", i, ftoa((float)temp, buf, 2));
 8005254:	7ffc      	ldrb	r4, [r7, #31]
 8005256:	69b8      	ldr	r0, [r7, #24]
 8005258:	f7fb f97e 	bl	8000558 <__aeabi_f2d>
 800525c:	4680      	mov	r8, r0
 800525e:	4689      	mov	r9, r1
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	2102      	movs	r1, #2
 8005266:	4618      	mov	r0, r3
 8005268:	ec49 8b10 	vmov	d0, r8, r9
 800526c:	f7ff f930 	bl	80044d0 <ftoa>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	4621      	mov	r1, r4
 8005276:	4809      	ldr	r0, [pc, #36]	@ (800529c <Cmd_get_temp+0x90>)
 8005278:	f001 f808 	bl	800628c <UARTprintf>
	for(uint8_t i = 0; i < 8; i++)
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	3301      	adds	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b07      	cmp	r3, #7
 8005286:	d9ca      	bls.n	800521e <Cmd_get_temp+0x12>
		}
	}
	return CMDLINE_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3724      	adds	r7, #36	@ 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8005294:	200189f4 	.word	0x200189f4
 8005298:	08009794 	.word	0x08009794
 800529c:	080097a8 	.word	0x080097a8

080052a0 <Cmd_sample_get_buf>:

//format: sp_get_buf
int Cmd_sample_get_buf(int argc, char *argv[])
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dc01      	bgt.n	80052b4 <Cmd_sample_get_buf+0x14>
 80052b0:	2303      	movs	r3, #3
 80052b2:	e063      	b.n	800537c <Cmd_sample_get_buf+0xdc>
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	dd01      	ble.n	80052be <Cmd_sample_get_buf+0x1e>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e05e      	b.n	800537c <Cmd_sample_get_buf+0xdc>
	if (!adc_rec_ind)
 80052be:	4b31      	ldr	r3, [pc, #196]	@ (8005384 <Cmd_sample_get_buf+0xe4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <Cmd_sample_get_buf+0x30>
	{
		USART6_send_string("\r\nPlease send cmd 'sp_trig' first!");
 80052c6:	4830      	ldr	r0, [pc, #192]	@ (8005388 <Cmd_sample_get_buf+0xe8>)
 80052c8:	f000 fda8 	bl	8005e1c <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 80052cc:	2304      	movs	r3, #4
 80052ce:	e055      	b.n	800537c <Cmd_sample_get_buf+0xdc>
	}
	uint16_t crc_val = 0xffff;
 80052d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052d4:	81fb      	strh	r3, [r7, #14]
	uint8_t bytes_temp[3];

	uint32_t header = (0x000FFFFF & adc_rec_total) | 0xFFF00000;
 80052d6:	4b2d      	ldr	r3, [pc, #180]	@ (800538c <Cmd_sample_get_buf+0xec>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80052de:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80052e2:	613b      	str	r3, [r7, #16]
	bytes_temp[0] = (uint8_t)(header >> 16);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	723b      	strb	r3, [r7, #8]
	bytes_temp[1] = (uint8_t)(header >> 8);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	727b      	strb	r3, [r7, #9]
	bytes_temp[2] = (uint8_t)header;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	72bb      	strb	r3, [r7, #10]
	USART6_send_array((const char*)bytes_temp, 3);
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	2103      	movs	r1, #3
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fda0 	bl	8005e46 <USART6_send_array>

	for(uint32_t i = 0; i < adc_rec_total; i++)
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e023      	b.n	8005354 <Cmd_sample_get_buf+0xb4>
	{
		crc16_CCITT_update(&crc_val, adc_rec_buf[i+3]);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3303      	adds	r3, #3
 8005310:	4a1f      	ldr	r2, [pc, #124]	@ (8005390 <Cmd_sample_get_buf+0xf0>)
 8005312:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005316:	f107 030e 	add.w	r3, r7, #14
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fa23 	bl	8004768 <crc16_CCITT_update>
		bytes_temp[0] = adc_rec_buf[i+3] >> 8;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3303      	adds	r3, #3
 8005326:	4a1a      	ldr	r2, [pc, #104]	@ (8005390 <Cmd_sample_get_buf+0xf0>)
 8005328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	b29b      	uxth	r3, r3
 8005330:	b2db      	uxtb	r3, r3
 8005332:	723b      	strb	r3, [r7, #8]
		bytes_temp[1] = adc_rec_buf[i+3] & 0xFF;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3303      	adds	r3, #3
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <Cmd_sample_get_buf+0xf0>)
 800533a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	727b      	strb	r3, [r7, #9]
		USART6_send_array((const char*)bytes_temp, 2);
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	2102      	movs	r1, #2
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fd7c 	bl	8005e46 <USART6_send_array>
	for(uint32_t i = 0; i < adc_rec_total; i++)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	3301      	adds	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <Cmd_sample_get_buf+0xec>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	429a      	cmp	r2, r3
 800535c:	d3d6      	bcc.n	800530c <Cmd_sample_get_buf+0x6c>
	}
	bytes_temp[0] = crc_val >> 8;
 800535e:	89fb      	ldrh	r3, [r7, #14]
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	b29b      	uxth	r3, r3
 8005364:	b2db      	uxtb	r3, r3
 8005366:	723b      	strb	r3, [r7, #8]
	bytes_temp[1] = crc_val & 0xFF;
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	727b      	strb	r3, [r7, #9]
	USART6_send_array((const char*)&bytes_temp, 2);
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	2102      	movs	r1, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fd66 	bl	8005e46 <USART6_send_array>
	return CMDLINE_NOT_RETURN;
 800537a:	2305      	movs	r3, #5
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20018994 	.word	0x20018994
 8005388:	0800974c 	.word	0x0800974c
 800538c:	20018998 	.word	0x20018998
 8005390:	200002e0 	.word	0x200002e0

08005394 <Cmd_sample_get_buf_char>:

//format: sp_get_buf_c
int Cmd_sample_get_buf_char(int argc, char *argv[])
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dc01      	bgt.n	80053a8 <Cmd_sample_get_buf_char+0x14>
 80053a4:	2303      	movs	r3, #3
 80053a6:	e048      	b.n	800543a <Cmd_sample_get_buf_char+0xa6>
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	dd01      	ble.n	80053b2 <Cmd_sample_get_buf_char+0x1e>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e043      	b.n	800543a <Cmd_sample_get_buf_char+0xa6>
	if (!adc_rec_ind)
 80053b2:	4b24      	ldr	r3, [pc, #144]	@ (8005444 <Cmd_sample_get_buf_char+0xb0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d104      	bne.n	80053c4 <Cmd_sample_get_buf_char+0x30>
	{
		USART6_send_string("Please send cmd 'sp_trig' first!");
 80053ba:	4823      	ldr	r0, [pc, #140]	@ (8005448 <Cmd_sample_get_buf_char+0xb4>)
 80053bc:	f000 fd2e 	bl	8005e1c <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 80053c0:	2304      	movs	r3, #4
 80053c2:	e03a      	b.n	800543a <Cmd_sample_get_buf_char+0xa6>
	}
	uint16_t crc_val = 0xffff;
 80053c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053c8:	827b      	strh	r3, [r7, #18]

	char ascii_buf[5];
	USART6_send_string("\r\n");
 80053ca:	4820      	ldr	r0, [pc, #128]	@ (800544c <Cmd_sample_get_buf_char+0xb8>)
 80053cc:	f000 fd26 	bl	8005e1c <USART6_send_string>
	for(uint32_t i = 0; i < adc_rec_total; i++)
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e01e      	b.n	8005414 <Cmd_sample_get_buf_char+0x80>
	{
		crc16_CCITT_update(&crc_val, adc_rec_buf[i+3]);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	3303      	adds	r3, #3
 80053da:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <Cmd_sample_get_buf_char+0xbc>)
 80053dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80053e0:	f107 0312 	add.w	r3, r7, #18
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff f9be 	bl	8004768 <crc16_CCITT_update>
		htoa(adc_rec_buf[i+3], ascii_buf);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3303      	adds	r3, #3
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <Cmd_sample_get_buf_char+0xbc>)
 80053f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f6:	f107 020c 	add.w	r2, r7, #12
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fa01 	bl	8004804 <htoa>
		USART6_send_array(ascii_buf, 5);
 8005402:	f107 030c 	add.w	r3, r7, #12
 8005406:	2105      	movs	r1, #5
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fd1c 	bl	8005e46 <USART6_send_array>
	for(uint32_t i = 0; i < adc_rec_total; i++)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	3301      	adds	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	4b0f      	ldr	r3, [pc, #60]	@ (8005454 <Cmd_sample_get_buf_char+0xc0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	429a      	cmp	r2, r3
 800541c:	d3db      	bcc.n	80053d6 <Cmd_sample_get_buf_char+0x42>
	}

	htoa(crc_val, ascii_buf);
 800541e:	8a7b      	ldrh	r3, [r7, #18]
 8005420:	f107 020c 	add.w	r2, r7, #12
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff f9ec 	bl	8004804 <htoa>
	USART6_send_array(ascii_buf, 5);
 800542c:	f107 030c 	add.w	r3, r7, #12
 8005430:	2105      	movs	r1, #5
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fd07 	bl	8005e46 <USART6_send_array>
	return CMDLINE_NOT_RETURN;
 8005438:	2305      	movs	r3, #5
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20018994 	.word	0x20018994
 8005448:	08009770 	.word	0x08009770
 800544c:	08009624 	.word	0x08009624
 8005450:	200002e0 	.word	0x200002e0
 8005454:	20018998 	.word	0x20018998

08005458 <LL_SPI_Enable>:
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_SPI_IsEnabled>:
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005488:	2b40      	cmp	r3, #64	@ 0x40
 800548a:	d101      	bne.n	8005490 <LL_SPI_IsEnabled+0x18>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <LL_SPI_IsEnabled+0x1a>
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_SPI_IsActiveFlag_TXE>:
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d101      	bne.n	80054b6 <LL_SPI_IsActiveFlag_TXE+0x18>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_SPI_IsActiveFlag_BSY>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d4:	2b80      	cmp	r3, #128	@ 0x80
 80054d6:	d101      	bne.n	80054dc <LL_SPI_IsActiveFlag_BSY+0x18>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <LL_SPI_IsActiveFlag_BSY+0x1a>
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_SPI_TransmitData8>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	330c      	adds	r3, #12
 80054fa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	701a      	strb	r2, [r3, #0]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	330c      	adds	r3, #12
 800551e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	887a      	ldrh	r2, [r7, #2]
 8005524:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <LL_GPIO_SetOutputPin>:
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	619a      	str	r2, [r3, #24]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <LL_GPIO_ResetOutputPin>:
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	041a      	lsls	r2, r3, #16
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	619a      	str	r2, [r3, #24]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <MCP4902_Write>:
	return (dac*_VREF_DAC)/2.55f;
}

/* Hàm gửi dữ liệu qua SPI */
static void MCP4902_Write(MCP4902_Device_t *dev)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8005574:	bf00      	nop
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff8f 	bl	800549e <LL_SPI_IsActiveFlag_TXE>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f7      	beq.n	8005576 <MCP4902_Write+0xa>


    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e076      	b.n	800567a <MCP4902_Write+0x10e>
    {
    	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7ff ffd9 	bl	800554e <LL_GPIO_ResetOutputPin>
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <MCP4902_Write+0x50>
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	3314      	adds	r3, #20
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b21b      	sxth	r3, r3
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	b21a      	sxth	r2, r3
 80055b2:	4b36      	ldr	r3, [pc, #216]	@ (800568c <MCP4902_Write+0x120>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	e00b      	b.n	80055d4 <MCP4902_Write+0x68>
				   ((1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4));
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	3314      	adds	r3, #20
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80055d0:	b21b      	sxth	r3, r3
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	817b      	strh	r3, [r7, #10]

        LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	b29b      	uxth	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f7ff ff80 	bl	80054ea <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 80055ea:	bf00      	nop
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff ff54 	bl	800549e <LL_SPI_IsActiveFlag_TXE>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f7      	beq.n	80055ec <MCP4902_Write+0x80>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 80055fc:	bf00      	nop
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ff5e 	bl	80054c4 <LL_SPI_IsActiveFlag_BSY>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f7      	bne.n	80055fe <MCP4902_Write+0x92>

        LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	897a      	ldrh	r2, [r7, #10]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff ff66 	bl	80054ea <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 800561e:	bf00      	nop
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ff3a 	bl	800549e <LL_SPI_IsActiveFlag_TXE>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f7      	beq.n	8005620 <MCP4902_Write+0xb4>
		while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8005630:	bf00      	nop
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff ff44 	bl	80054c4 <LL_SPI_IsActiveFlag_BSY>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f7      	bne.n	8005632 <MCP4902_Write+0xc6>

        LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f7ff ff70 	bl	8005532 <LL_GPIO_SetOutputPin>

		LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7ff ff76 	bl	800554e <LL_GPIO_ResetOutputPin>
		__NOP();
 8005662:	bf00      	nop
		LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f7ff ff5f 	bl	8005532 <LL_GPIO_SetOutputPin>
    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b01      	cmp	r3, #1
 800567e:	dd85      	ble.n	800558c <MCP4902_Write+0x20>
    }


}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	ffffb000 	.word	0xffffb000

08005690 <MCP4902_Shutdown>:

void MCP4902_Shutdown(MCP4902_Device_t *dev, uint8_t channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800569c:	bf00      	nop
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fefb 	bl	800549e <LL_SPI_IsActiveFlag_TXE>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f7      	beq.n	800569e <MCP4902_Shutdown+0xe>
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f7ff ff48 	bl	800554e <LL_GPIO_ResetOutputPin>

	temp = channel ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)) : (1<<MCP4902_GA_BIT);
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <MCP4902_Shutdown+0x3a>
 80056c4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80056c8:	e001      	b.n	80056ce <MCP4902_Shutdown+0x3e>
 80056ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056ce:	81fb      	strh	r3, [r7, #14]
	LL_SPI_TransmitData16(dev->spi, temp);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	89fa      	ldrh	r2, [r7, #14]
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff18 	bl	800550e <LL_SPI_TransmitData16>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 80056de:	bf00      	nop
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff feda 	bl	800549e <LL_SPI_IsActiveFlag_TXE>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f7      	beq.n	80056e0 <MCP4902_Shutdown+0x50>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 80056f0:	bf00      	nop
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fee4 	bl	80054c4 <LL_SPI_IsActiveFlag_BSY>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f7      	bne.n	80056f2 <MCP4902_Shutdown+0x62>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7ff ff10 	bl	8005532 <LL_GPIO_SetOutputPin>

    LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f7ff ff16 	bl	800554e <LL_GPIO_ResetOutputPin>
	__NOP();
 8005722:	bf00      	nop
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff feff 	bl	8005532 <LL_GPIO_SetOutputPin>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <MCP4902_Set_DAC>:

void MCP4902_Set_DAC(MCP4902_Device_t *dev, uint8_t channel, uint8_t DAC_val)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
 8005748:	4613      	mov	r3, r2
 800574a:	70bb      	strb	r3, [r7, #2]
	dev->dac_channel[channel] = DAC_val;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	78ba      	ldrb	r2, [r7, #2]
 8005754:	751a      	strb	r2, [r3, #20]
	MCP4902_Write(dev);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ff08 	bl	800556c <MCP4902_Write>
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <MCP4902_Device_Init>:
							SPI_TypeDef *spi,
							GPIO_TypeDef *cs_port,
							uint32_t cs_pin,
							GPIO_TypeDef *latch_port,
							uint32_t latch_pin)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	@ 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	609a      	str	r2, [r3, #8]
	dev->latch_port = latch_port;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005788:	60da      	str	r2, [r3, #12]
	dev->latch_pin = latch_pin;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800578e:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 0314 	add.w	r3, r7, #20
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
 80057a0:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = dev->cs_pin;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80057a8:	2301      	movs	r3, #1
 80057aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80057ac:	2302      	movs	r3, #2
 80057ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80057b4:	2300      	movs	r3, #0
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
	LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f107 0214 	add.w	r2, r7, #20
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd f8ff 	bl	80029c6 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = dev->latch_pin;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(dev->latch_port, &GPIO_InitStruct);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f107 0214 	add.w	r2, r7, #20
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fd f8f4 	bl	80029c6 <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7ff fea2 	bl	8005532 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7ff fe9a 	bl	8005532 <LL_GPIO_SetOutputPin>

	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005802:	e008      	b.n	8005816 <MCP4902_Device_Init+0xb2>
	{
		dev->dac_channel[i] = 0;
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	4413      	add	r3, r2
 800580a:	3314      	adds	r3, #20
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	3301      	adds	r3, #1
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	2b01      	cmp	r3, #1
 800581a:	ddf3      	ble.n	8005804 <MCP4902_Device_Init+0xa0>
	}

	while (!LL_SPI_IsEnabled(dev->spi))
 800581c:	e005      	b.n	800582a <MCP4902_Device_Init+0xc6>
	{
		LL_SPI_Enable(dev->spi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fe18 	bl	8005458 <LL_SPI_Enable>
		__NOP();
 8005828:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fe22 	bl	8005478 <LL_SPI_IsEnabled>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f1      	beq.n	800581e <MCP4902_Device_Init+0xba>
	}

	MCP4902_Write(dev);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fe96 	bl	800556c <MCP4902_Write>
}
 8005840:	bf00      	nop
 8005842:	3730      	adds	r7, #48	@ 0x30
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <ntc_convertToC>:
#define _NTC_ADC_MAX          4095 //
#define _NTC_BETA             3950


float ntc_convertToC(uint16_t adcValue)
{
 8005848:	b5b0      	push	{r4, r5, r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	80fb      	strh	r3, [r7, #6]
	float rntc = ((double)_NTC_R_SERIES * ((double)_NTC_ADC_MAX - adcValue)) / adcValue;		//ntc pullup
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fa fe6d 	bl	8000534 <__aeabi_i2d>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	a132      	add	r1, pc, #200	@ (adr r1, 8005928 <ntc_convertToC+0xe0>)
 8005860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005864:	f7fa fd18 	bl	8000298 <__aeabi_dsub>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	a32f      	add	r3, pc, #188	@ (adr r3, 8005930 <ntc_convertToC+0xe8>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fec7 	bl	8000608 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4614      	mov	r4, r2
 8005880:	461d      	mov	r5, r3
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	4618      	mov	r0, r3
 8005886:	f7fa fe55 	bl	8000534 <__aeabi_i2d>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fa ffe3 	bl	800085c <__aeabi_ddiv>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	f7fb f995 	bl	8000bcc <__aeabi_d2f>
 80058a2:	4603      	mov	r3, r0
 80058a4:	60fb      	str	r3, [r7, #12]
	//float rntc = ((double)_NTC_R_SERIES * adcValue)/((double)_NTC_ADC_MAX - adcValue);		//ntc pulldown
	float temp;
	temp = rntc / (float)_NTC_R_NOMINAL;
 80058a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80058aa:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8005918 <ntc_convertToC+0xd0>
 80058ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058b2:	edc7 7a02 	vstr	s15, [r7, #8]
	temp = logf(temp);
 80058b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80058ba:	f003 fc03 	bl	80090c4 <logf>
 80058be:	ed87 0a02 	vstr	s0, [r7, #8]
	temp /= (float)_NTC_BETA;
 80058c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80058c6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800591c <ntc_convertToC+0xd4>
 80058ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058ce:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 1.0f / ((float)_NTC_TEMP_NOMINAL + 273.15f);
 80058d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80058d6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005920 <ntc_convertToC+0xd8>
 80058da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058de:	edc7 7a02 	vstr	s15, [r7, #8]
	temp = 1.0f / temp;
 80058e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80058ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ee:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 273.15f;
 80058f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80058f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005924 <ntc_convertToC+0xdc>
 80058fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058fe:	edc7 7a02 	vstr	s15, [r7, #8]
	return temp;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	ee07 3a90 	vmov	s15, r3
}
 8005908:	eeb0 0a67 	vmov.f32	s0, s15
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bdb0      	pop	{r4, r5, r7, pc}
 8005912:	bf00      	nop
 8005914:	f3af 8000 	nop.w
 8005918:	461c4000 	.word	0x461c4000
 800591c:	4576e000 	.word	0x4576e000
 8005920:	3b5bcf0f 	.word	0x3b5bcf0f
 8005924:	43889333 	.word	0x43889333
 8005928:	00000000 	.word	0x00000000
 800592c:	40affe00 	.word	0x40affe00
 8005930:	00000000 	.word	0x00000000
 8005934:	40c38800 	.word	0x40c38800

08005938 <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005940:	b672      	cpsid	i
}
 8005942:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 800595c:	b662      	cpsie	i
}
 800595e:	bf00      	nop
	__enable_irq();
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800597a:	b29b      	uxth	r3, r3
 800597c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005980:	bf0c      	ite	eq
 8005982:	2301      	moveq	r3, #1
 8005984:	2300      	movne	r3, #0
 8005986:	b2db      	uxtb	r3, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	4603      	mov	r3, r0
 80059c2:	6039      	str	r1, [r7, #0]
 80059c4:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 80059ce:	b292      	uxth	r2, r2
 80059d0:	4413      	add	r3, r2
 80059d2:	79fa      	ldrb	r2, [r7, #7]
 80059d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059d6:	b672      	cpsid	i
}
 80059d8:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3301      	adds	r3, #1
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3301      	adds	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8005a02:	b662      	cpsie	i
}
 8005a04:	bf00      	nop
	__enable_irq();
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8005a22:	b292      	uxth	r2, r2
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a2a:	b672      	cpsid	i
}
 8005a2c:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3301      	adds	r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8005a56:	b662      	cpsie	i
}
 8005a58:	bf00      	nop
	__enable_irq();
	return data;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2301      	moveq	r3, #1
 8005a7e:	2300      	movne	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b80      	cmp	r3, #128	@ 0x80
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005b34:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005b58:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005b84:	68fb      	ldr	r3, [r7, #12]
}
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b089      	sub	sp, #36	@ 0x24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f043 0320 	orr.w	r3, r3, #32
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	61ba      	str	r2, [r7, #24]
 8005bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e7      	bne.n	8005b9a <LL_USART_EnableIT_RXNE+0x8>
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	3724      	adds	r7, #36	@ 0x24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b089      	sub	sp, #36	@ 0x24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	330c      	adds	r3, #12
 8005be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	61ba      	str	r2, [r7, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e7      	bne.n	8005be0 <LL_USART_EnableIT_TXE+0x8>
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3724      	adds	r7, #36	@ 0x24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b089      	sub	sp, #36	@ 0x24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	61ba      	str	r2, [r7, #24]
 8005c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6979      	ldr	r1, [r7, #20]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e7      	bne.n	8005c26 <LL_USART_DisableIT_TXE+0x8>
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	3724      	adds	r7, #36	@ 0x24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b2db      	uxtb	r3, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005cb0:	78fa      	ldrb	r2, [r7, #3]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	605a      	str	r2, [r3, #4]
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <USART6_IRQ>:
usart_meta_t *p_USART6_meta = &USART6_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART6_IRQ(void) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(USART6)) {
 8005cca:	4834      	ldr	r0, [pc, #208]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005ccc:	f7ff ff18 	bl	8005b00 <LL_USART_IsActiveFlag_TXE>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01e      	beq.n	8005d14 <USART6_IRQ+0x50>
        if (!rbuffer_empty(&p_USART6_meta->rb_tx)) {
 8005cd6:	4b32      	ldr	r3, [pc, #200]	@ (8005da0 <USART6_IRQ+0xdc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fe58 	bl	8005994 <rbuffer_empty>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f083 0301 	eor.w	r3, r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <USART6_IRQ+0x4a>
            data = rbuffer_remove(&p_USART6_meta->rb_tx);
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8005da0 <USART6_IRQ+0xdc>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fe8a 	bl	8005a12 <rbuffer_remove>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
            LL_USART_TransmitData8(USART6, (uint8_t)data);
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	4619      	mov	r1, r3
 8005d06:	4825      	ldr	r0, [pc, #148]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d08:	f7ff ffcc 	bl	8005ca4 <LL_USART_TransmitData8>
 8005d0c:	e002      	b.n	8005d14 <USART6_IRQ+0x50>
        } else {
            LL_USART_DisableIT_TXE(USART6);
 8005d0e:	4823      	ldr	r0, [pc, #140]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d10:	f7ff ff85 	bl	8005c1e <LL_USART_DisableIT_TXE>
        }
    }
    if ((LL_USART_IsActiveFlag_RXNE(USART6) != RESET) && (LL_USART_IsEnabledIT_RXNE(USART6) != RESET)) {
 8005d14:	4821      	ldr	r0, [pc, #132]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d16:	f7ff fee0 	bl	8005ada <LL_USART_IsActiveFlag_RXNE>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d03a      	beq.n	8005d96 <USART6_IRQ+0xd2>
 8005d20:	481e      	ldr	r0, [pc, #120]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d22:	f7ff ff9f 	bl	8005c64 <LL_USART_IsEnabledIT_RXNE>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d034      	beq.n	8005d96 <USART6_IRQ+0xd2>
        unsigned char data = LL_USART_ReceiveData8(USART6);
 8005d2c:	481b      	ldr	r0, [pc, #108]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d2e:	f7ff ffac 	bl	8005c8a <LL_USART_ReceiveData8>
 8005d32:	4603      	mov	r3, r0
 8005d34:	71bb      	strb	r3, [r7, #6]

        if ((LL_USART_IsActiveFlag_ORE(USART6) != RESET) ||
 8005d36:	4819      	ldr	r0, [pc, #100]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d38:	f7ff febc 	bl	8005ab4 <LL_USART_IsActiveFlag_ORE>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <USART6_IRQ+0x96>
            (LL_USART_IsActiveFlag_FE(USART6) != RESET) ||
 8005d42:	4816      	ldr	r0, [pc, #88]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d44:	f7ff fe90 	bl	8005a68 <LL_USART_IsActiveFlag_FE>
 8005d48:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(USART6) != RESET) ||
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <USART6_IRQ+0x96>
            (LL_USART_IsActiveFlag_NE(USART6) != RESET)) {
 8005d4e:	4813      	ldr	r0, [pc, #76]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d50:	f7ff fe9d 	bl	8005a8e <LL_USART_IsActiveFlag_NE>
 8005d54:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(USART6) != RESET) ||
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <USART6_IRQ+0xaa>
            LL_USART_ClearFlag_ORE(USART6);
 8005d5a:	4810      	ldr	r0, [pc, #64]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d5c:	f7ff ff07 	bl	8005b6e <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(USART6);
 8005d60:	480e      	ldr	r0, [pc, #56]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d62:	f7ff fee0 	bl	8005b26 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(USART6);
 8005d66:	480d      	ldr	r0, [pc, #52]	@ (8005d9c <USART6_IRQ+0xd8>)
 8005d68:	f7ff feef 	bl	8005b4a <LL_USART_ClearFlag_NE>
        } else {
            if (!rbuffer_full(&p_USART6_meta->rb_rx)) {
                rbuffer_insert(data, &p_USART6_meta->rb_rx);
            }
        }
        return;
 8005d6c:	e012      	b.n	8005d94 <USART6_IRQ+0xd0>
            if (!rbuffer_full(&p_USART6_meta->rb_rx)) {
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <USART6_IRQ+0xdc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fdfa 	bl	800596c <rbuffer_full>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f083 0301 	eor.w	r3, r3, #1
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <USART6_IRQ+0xd0>
                rbuffer_insert(data, &p_USART6_meta->rb_rx);
 8005d84:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <USART6_IRQ+0xdc>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	79bb      	ldrb	r3, [r7, #6]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fe13 	bl	80059ba <rbuffer_insert>
        return;
 8005d94:	bf00      	nop
    }
}
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40011400 	.word	0x40011400
 8005da0:	200000f4 	.word	0x200000f4

08005da4 <USART6_init>:

void USART6_init(void) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
    rbuffer_init(&p_USART6_meta->rb_tx); // Init Tx buffer
 8005da8:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <USART6_init+0x28>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fdc1 	bl	8005938 <rbuffer_init>
    rbuffer_init(&p_USART6_meta->rb_rx); // Init Rx buffer
 8005db6:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <USART6_init+0x28>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fdbc 	bl	8005938 <rbuffer_init>
    LL_USART_EnableIT_RXNE(USART6);
 8005dc0:	4803      	ldr	r0, [pc, #12]	@ (8005dd0 <USART6_init+0x2c>)
 8005dc2:	f7ff fee6 	bl	8005b92 <LL_USART_EnableIT_RXNE>
}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200000f4 	.word	0x200000f4
 8005dd0:	40011400 	.word	0x40011400

08005dd4 <USART6_send_char>:

void USART6_send_char(char c) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
    while (rbuffer_full(&p_USART6_meta->rb_tx))
 8005dde:	bf00      	nop
 8005de0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <USART6_send_char+0x40>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fdbf 	bl	800596c <rbuffer_full>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f5      	bne.n	8005de0 <USART6_send_char+0xc>
        ;
    rbuffer_insert(c, &p_USART6_meta->rb_tx);
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <USART6_send_char+0x40>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fdda 	bl	80059ba <rbuffer_insert>
    LL_USART_EnableIT_TXE(USART6);
 8005e06:	4804      	ldr	r0, [pc, #16]	@ (8005e18 <USART6_send_char+0x44>)
 8005e08:	f7ff fee6 	bl	8005bd8 <LL_USART_EnableIT_TXE>
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	200000f4 	.word	0x200000f4
 8005e18:	40011400 	.word	0x40011400

08005e1c <USART6_send_string>:

void USART6_send_string(const char *str) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    while (*str) {
 8005e24:	e006      	b.n	8005e34 <USART6_send_string+0x18>
        USART6_send_char(*str++);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff ffd0 	bl	8005dd4 <USART6_send_char>
    while (*str) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f4      	bne.n	8005e26 <USART6_send_string+0xa>
    }
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USART6_send_array>:

void USART6_send_array(const char *str, uint8_t len) {
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
 8005e56:	e009      	b.n	8005e6c <USART6_send_array+0x26>
        USART6_send_char(*str++);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ffb7 	bl	8005dd4 <USART6_send_char>
    for (udx = 0; udx < len; udx++) {
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3f1      	bcc.n	8005e58 <USART6_send_array+0x12>
    }
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <uart_get_USART6_rx_buffer_address>:
    LL_USART_Init(USART6, &USART_InitStruct);
    LL_USART_ConfigAsyncMode(USART6);
    LL_USART_Enable(USART6);
}

volatile ringbuffer_t* uart_get_USART6_rx_buffer_address(void) {
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
    return &p_USART6_meta->rb_rx; // Trả về địa chỉ buffer Rx
 8005e84:	4b03      	ldr	r3, [pc, #12]	@ (8005e94 <uart_get_USART6_rx_buffer_address+0x14>)
 8005e86:	681b      	ldr	r3, [r3, #0]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	200000f4 	.word	0x200000f4

08005e98 <UARTvprintf>:

static void UARTvprintf(const char *pcString, va_list vaArgP)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	@ 0x38
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 8005ea2:	e1e2      	b.n	800626a <UARTvprintf+0x3d2>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea8:	e002      	b.n	8005eb0 <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 8005eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eac:	3301      	adds	r3, #1
 8005eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b25      	cmp	r3, #37	@ 0x25
 8005eba:	d005      	beq.n	8005ec8 <UARTvprintf+0x30>
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f0      	bne.n	8005eaa <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        CONSOLE_UART_WRITE(pcString, ui32Idx);
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff ffb9 	bl	8005e46 <USART6_send_array>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b25      	cmp	r3, #37	@ 0x25
 8005ee2:	f040 81c2 	bne.w	800626a <UARTvprintf+0x3d2>
        {
            //
            // Skip the %.
            //
            pcString++;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	623b      	str	r3, [r7, #32]
            cFill = ' ';
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	3b25      	subs	r3, #37	@ 0x25
 8005f00:	2b53      	cmp	r3, #83	@ 0x53
 8005f02:	f200 81ac 	bhi.w	800625e <UARTvprintf+0x3c6>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UARTvprintf+0x74>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08006251 	.word	0x08006251
 8005f10:	0800625f 	.word	0x0800625f
 8005f14:	0800625f 	.word	0x0800625f
 8005f18:	0800625f 	.word	0x0800625f
 8005f1c:	0800625f 	.word	0x0800625f
 8005f20:	0800625f 	.word	0x0800625f
 8005f24:	0800625f 	.word	0x0800625f
 8005f28:	0800625f 	.word	0x0800625f
 8005f2c:	0800625f 	.word	0x0800625f
 8005f30:	0800625f 	.word	0x0800625f
 8005f34:	0800625f 	.word	0x0800625f
 8005f38:	0800605d 	.word	0x0800605d
 8005f3c:	0800605d 	.word	0x0800605d
 8005f40:	0800605d 	.word	0x0800605d
 8005f44:	0800605d 	.word	0x0800605d
 8005f48:	0800605d 	.word	0x0800605d
 8005f4c:	0800605d 	.word	0x0800605d
 8005f50:	0800605d 	.word	0x0800605d
 8005f54:	0800605d 	.word	0x0800605d
 8005f58:	0800605d 	.word	0x0800605d
 8005f5c:	0800605d 	.word	0x0800605d
 8005f60:	0800625f 	.word	0x0800625f
 8005f64:	0800625f 	.word	0x0800625f
 8005f68:	0800625f 	.word	0x0800625f
 8005f6c:	0800625f 	.word	0x0800625f
 8005f70:	0800625f 	.word	0x0800625f
 8005f74:	0800625f 	.word	0x0800625f
 8005f78:	0800625f 	.word	0x0800625f
 8005f7c:	0800625f 	.word	0x0800625f
 8005f80:	0800625f 	.word	0x0800625f
 8005f84:	0800625f 	.word	0x0800625f
 8005f88:	0800625f 	.word	0x0800625f
 8005f8c:	0800625f 	.word	0x0800625f
 8005f90:	0800625f 	.word	0x0800625f
 8005f94:	0800625f 	.word	0x0800625f
 8005f98:	0800625f 	.word	0x0800625f
 8005f9c:	0800625f 	.word	0x0800625f
 8005fa0:	0800625f 	.word	0x0800625f
 8005fa4:	0800625f 	.word	0x0800625f
 8005fa8:	0800625f 	.word	0x0800625f
 8005fac:	0800625f 	.word	0x0800625f
 8005fb0:	0800625f 	.word	0x0800625f
 8005fb4:	0800625f 	.word	0x0800625f
 8005fb8:	0800625f 	.word	0x0800625f
 8005fbc:	0800625f 	.word	0x0800625f
 8005fc0:	0800625f 	.word	0x0800625f
 8005fc4:	0800625f 	.word	0x0800625f
 8005fc8:	0800625f 	.word	0x0800625f
 8005fcc:	0800625f 	.word	0x0800625f
 8005fd0:	0800625f 	.word	0x0800625f
 8005fd4:	0800625f 	.word	0x0800625f
 8005fd8:	08006141 	.word	0x08006141
 8005fdc:	0800625f 	.word	0x0800625f
 8005fe0:	0800625f 	.word	0x0800625f
 8005fe4:	0800625f 	.word	0x0800625f
 8005fe8:	0800625f 	.word	0x0800625f
 8005fec:	0800625f 	.word	0x0800625f
 8005ff0:	0800625f 	.word	0x0800625f
 8005ff4:	0800625f 	.word	0x0800625f
 8005ff8:	0800625f 	.word	0x0800625f
 8005ffc:	0800625f 	.word	0x0800625f
 8006000:	0800625f 	.word	0x0800625f
 8006004:	08006091 	.word	0x08006091
 8006008:	080060a9 	.word	0x080060a9
 800600c:	0800625f 	.word	0x0800625f
 8006010:	0800625f 	.word	0x0800625f
 8006014:	0800625f 	.word	0x0800625f
 8006018:	0800625f 	.word	0x0800625f
 800601c:	080060a9 	.word	0x080060a9
 8006020:	0800625f 	.word	0x0800625f
 8006024:	0800625f 	.word	0x0800625f
 8006028:	0800625f 	.word	0x0800625f
 800602c:	0800625f 	.word	0x0800625f
 8006030:	0800625f 	.word	0x0800625f
 8006034:	0800625f 	.word	0x0800625f
 8006038:	08006141 	.word	0x08006141
 800603c:	0800625f 	.word	0x0800625f
 8006040:	0800625f 	.word	0x0800625f
 8006044:	080060d3 	.word	0x080060d3
 8006048:	0800625f 	.word	0x0800625f
 800604c:	08006129 	.word	0x08006129
 8006050:	0800625f 	.word	0x0800625f
 8006054:	0800625f 	.word	0x0800625f
 8006058:	08006141 	.word	0x08006141
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3b01      	subs	r3, #1
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b30      	cmp	r3, #48	@ 0x30
 8006064:	d105      	bne.n	8006072 <UARTvprintf+0x1da>
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <UARTvprintf+0x1da>
                    {
                        cFill = '0';
 800606c:	2330      	movs	r3, #48	@ 0x30
 800606e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	623b      	str	r3, [r7, #32]
                    ui32Count += pcString[-1] - '0';
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3b01      	subs	r3, #1
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	4413      	add	r3, r2
 800608a:	3b30      	subs	r3, #48	@ 0x30
 800608c:	623b      	str	r3, [r7, #32]

                    //
                    // Get the next character.
                    //
                    goto again;
 800608e:	e732      	b.n	8005ef6 <UARTvprintf+0x5e>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	603a      	str	r2, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Print out the character.
                    //
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);
 800609a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800609e:	2101      	movs	r1, #1
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fed0 	bl	8005e46 <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 80060a6:	e0e0      	b.n	800626a <UARTvprintf+0x3d2>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	603a      	str	r2, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da05      	bge.n	80060c8 <UARTvprintf+0x230>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 80060bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060be:	425b      	negs	r3, r3
 80060c0:	62bb      	str	r3, [r7, #40]	@ 0x28

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e001      	b.n	80060cc <UARTvprintf+0x234>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 80060cc:	230a      	movs	r3, #10
 80060ce:	61fb      	str	r3, [r7, #28]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80060d0:	e041      	b.n	8006156 <UARTvprintf+0x2be>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	603a      	str	r2, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 80060dc:	2300      	movs	r3, #0
 80060de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060e0:	e002      	b.n	80060e8 <UARTvprintf+0x250>
 80060e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e4:	3301      	adds	r3, #1
 80060e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ec:	4413      	add	r3, r2
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f6      	bne.n	80060e2 <UARTvprintf+0x24a>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcStr, ui32Idx);
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060fc:	f7ff fea3 	bl	8005e46 <USART6_send_array>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	429a      	cmp	r2, r3
 8006106:	f240 80af 	bls.w	8006268 <UARTvprintf+0x3d0>
                    {
                        ui32Count -= ui32Idx;
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	623b      	str	r3, [r7, #32]
                        while(ui32Count--)
 8006112:	e003      	b.n	800611c <UARTvprintf+0x284>
                        {
                            CONSOLE_UART_WRITE(" ", 1);
 8006114:	2101      	movs	r1, #1
 8006116:	485a      	ldr	r0, [pc, #360]	@ (8006280 <UARTvprintf+0x3e8>)
 8006118:	f7ff fe95 	bl	8005e46 <USART6_send_array>
                        while(ui32Count--)
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	1e5a      	subs	r2, r3, #1
 8006120:	623a      	str	r2, [r7, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f6      	bne.n	8006114 <UARTvprintf+0x27c>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8006126:	e09f      	b.n	8006268 <UARTvprintf+0x3d0>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	603a      	str	r2, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8006136:	230a      	movs	r3, #10
 8006138:	61fb      	str	r3, [r7, #28]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	61bb      	str	r3, [r7, #24]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 800613e:	e00a      	b.n	8006156 <UARTvprintf+0x2be>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	603a      	str	r2, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 800614e:	2310      	movs	r3, #16
 8006150:	61fb      	str	r3, [r7, #28]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615a:	e007      	b.n	800616c <UARTvprintf+0x2d4>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	3b01      	subs	r3, #1
 800616a:	623b      	str	r3, [r7, #32]
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 800616c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	fb03 f202 	mul.w	r2, r3, r2
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	429a      	cmp	r2, r3
 8006178:	d809      	bhi.n	800618e <UARTvprintf+0x2f6>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 800617a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	fb03 f202 	mul.w	r2, r3, r2
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	fbb2 f2f3 	udiv	r2, r2, r3
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 800618a:	429a      	cmp	r2, r3
 800618c:	d0e6      	beq.n	800615c <UARTvprintf+0x2c4>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <UARTvprintf+0x302>
                    {
                        ui32Count--;
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	3b01      	subs	r3, #1
 8006198:	623b      	str	r3, [r7, #32]

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00d      	beq.n	80061bc <UARTvprintf+0x324>
 80061a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061a4:	2b30      	cmp	r3, #48	@ 0x30
 80061a6:	d109      	bne.n	80061bc <UARTvprintf+0x324>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80061ae:	3338      	adds	r3, #56	@ 0x38
 80061b0:	443b      	add	r3, r7
 80061b2:	222d      	movs	r2, #45	@ 0x2d
 80061b4:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d915      	bls.n	80061ee <UARTvprintf+0x356>
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	2b0f      	cmp	r3, #15
 80061c6:	d812      	bhi.n	80061ee <UARTvprintf+0x356>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	e00b      	b.n	80061e8 <UARTvprintf+0x350>
                        {
                            pcBuf[ui32Pos++] = cFill;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80061d6:	3338      	adds	r3, #56	@ 0x38
 80061d8:	443b      	add	r3, r7
 80061da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80061de:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	623b      	str	r3, [r7, #32]
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <UARTvprintf+0x338>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d021      	beq.n	8006238 <UARTvprintf+0x3a0>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80061fa:	3338      	adds	r3, #56	@ 0x38
 80061fc:	443b      	add	r3, r7
 80061fe:	222d      	movs	r2, #45	@ 0x2d
 8006200:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8006204:	e018      	b.n	8006238 <UARTvprintf+0x3a0>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8006206:	481f      	ldr	r0, [pc, #124]	@ (8006284 <UARTvprintf+0x3ec>)
 8006208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	fbb3 f1f2 	udiv	r1, r3, r2
 8006216:	fb01 f202 	mul.w	r2, r1, r2
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	6279      	str	r1, [r7, #36]	@ 0x24
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8006224:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 8006226:	3338      	adds	r3, #56	@ 0x38
 8006228:	443b      	add	r3, r7
 800622a:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <UARTvprintf+0x36e>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcBuf, ui32Pos);
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	b2da      	uxtb	r2, r3
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fdfc 	bl	8005e46 <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 800624e:	e00c      	b.n	800626a <UARTvprintf+0x3d2>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    CONSOLE_UART_WRITE(pcString - 1, 1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3b01      	subs	r3, #1
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fdf5 	bl	8005e46 <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 800625c:	e005      	b.n	800626a <UARTvprintf+0x3d2>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    CONSOLE_UART_WRITE("ERROR", 5);
 800625e:	2105      	movs	r1, #5
 8006260:	4809      	ldr	r0, [pc, #36]	@ (8006288 <UARTvprintf+0x3f0>)
 8006262:	f7ff fdf0 	bl	8005e46 <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8006266:	e000      	b.n	800626a <UARTvprintf+0x3d2>
                    break;
 8006268:	bf00      	nop
    while(*pcString)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f47f ae18 	bne.w	8005ea4 <UARTvprintf+0xc>
                }
            }
        }
    }
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3738      	adds	r7, #56	@ 0x38
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	080097d0 	.word	0x080097d0
 8006284:	080097bc 	.word	0x080097bc
 8006288:	080097d4 	.word	0x080097d4

0800628c <UARTprintf>:

//*****************************************************************************

void UARTprintf(const char *pcString, ...)
{
 800628c:	b40f      	push	{r0, r1, r2, r3}
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
    va_list vaArgP;
    va_start(vaArgP, pcString);
 8006294:	f107 0314 	add.w	r3, r7, #20
 8006298:	607b      	str	r3, [r7, #4]
    UARTvprintf(pcString, vaArgP);
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	6938      	ldr	r0, [r7, #16]
 800629e:	f7ff fdfb 	bl	8005e98 <UARTvprintf>
    va_end(vaArgP);
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr

080062b0 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 80062b4:	4b04      	ldr	r3, [pc, #16]	@ (80062c8 <SchedulerSysTickIntHandler+0x18>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	4a03      	ldr	r2, [pc, #12]	@ (80062c8 <SchedulerSysTickIntHandler+0x18>)
 80062bc:	6013      	str	r3, [r2, #0]
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20018cd0 	.word	0x20018cd0

080062cc <SchedulerInit>:
//!
//! \return None.
//
//*****************************************************************************
void SchedulerInit(uint32_t TicksPerSecond)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((SystemCoreClock / TicksPerSecond) - 1UL);  /* set reload register */
 80062d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <SchedulerInit+0x38>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	4a0a      	ldr	r2, [pc, #40]	@ (8006308 <SchedulerInit+0x3c>)
 80062e0:	3b01      	subs	r3, #1
 80062e2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80062e4:	4b08      	ldr	r3, [pc, #32]	@ (8006308 <SchedulerInit+0x3c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <SchedulerInit+0x3c>)
 80062ec:	2207      	movs	r2, #7
 80062ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk	|
				   SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer interrupt */
  SchedulerTickPerSecond = TicksPerSecond;
 80062f0:	4a06      	ldr	r2, [pc, #24]	@ (800630c <SchedulerInit+0x40>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6013      	str	r3, [r2, #0]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000030 	.word	0x20000030
 8006308:	e000e010 	.word	0xe000e010
 800630c:	200000f8 	.word	0x200000f8

08006310 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	e022      	b.n	8006362 <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4a14      	ldr	r2, [pc, #80]	@ (8006378 <SchedulerRun+0x68>)
 8006328:	4413      	add	r3, r2
 800632a:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	7c1b      	ldrb	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d013      	beq.n	800635c <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f823 	bl	8006384 <SchedulerElapsedTicksGet>
 800633e:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 8006344:	429a      	cmp	r2, r3
 8006346:	d309      	bcc.n	800635c <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8006348:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <SchedulerRun+0x6c>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	6852      	ldr	r2, [r2, #4]
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3301      	adds	r3, #1
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <SchedulerRun+0x70>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	429a      	cmp	r2, r3
 800636a:	d3d7      	bcc.n	800631c <SchedulerRun+0xc>
        }
    }
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000008 	.word	0x20000008
 800637c:	20018cd0 	.word	0x20018cd0
 8006380:	20000004 	.word	0x20000004

08006384 <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 800638c:	4b05      	ldr	r3, [pc, #20]	@ (80063a4 <SchedulerElapsedTicksGet+0x20>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f808 	bl	80063a8 <SchedulerElapsedTicksCalc>
 8006398:	4603      	mov	r3, r0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20018cd0 	.word	0x20018cd0

080063a8 <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <atof>:
 80063c4:	2100      	movs	r1, #0
 80063c6:	f000 be07 	b.w	8006fd8 <strtod>

080063ca <atoi>:
 80063ca:	220a      	movs	r2, #10
 80063cc:	2100      	movs	r1, #0
 80063ce:	f000 be89 	b.w	80070e4 <strtol>

080063d2 <sulp>:
 80063d2:	b570      	push	{r4, r5, r6, lr}
 80063d4:	4604      	mov	r4, r0
 80063d6:	460d      	mov	r5, r1
 80063d8:	ec45 4b10 	vmov	d0, r4, r5
 80063dc:	4616      	mov	r6, r2
 80063de:	f001 ffed 	bl	80083bc <__ulp>
 80063e2:	ec51 0b10 	vmov	r0, r1, d0
 80063e6:	b17e      	cbz	r6, 8006408 <sulp+0x36>
 80063e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063ec:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dd09      	ble.n	8006408 <sulp+0x36>
 80063f4:	051b      	lsls	r3, r3, #20
 80063f6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80063fa:	2400      	movs	r4, #0
 80063fc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006400:	4622      	mov	r2, r4
 8006402:	462b      	mov	r3, r5
 8006404:	f7fa f900 	bl	8000608 <__aeabi_dmul>
 8006408:	ec41 0b10 	vmov	d0, r0, r1
 800640c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006410 <_strtod_l>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	b09f      	sub	sp, #124	@ 0x7c
 8006416:	460c      	mov	r4, r1
 8006418:	9217      	str	r2, [sp, #92]	@ 0x5c
 800641a:	2200      	movs	r2, #0
 800641c:	921a      	str	r2, [sp, #104]	@ 0x68
 800641e:	9005      	str	r0, [sp, #20]
 8006420:	f04f 0a00 	mov.w	sl, #0
 8006424:	f04f 0b00 	mov.w	fp, #0
 8006428:	460a      	mov	r2, r1
 800642a:	9219      	str	r2, [sp, #100]	@ 0x64
 800642c:	7811      	ldrb	r1, [r2, #0]
 800642e:	292b      	cmp	r1, #43	@ 0x2b
 8006430:	d04a      	beq.n	80064c8 <_strtod_l+0xb8>
 8006432:	d838      	bhi.n	80064a6 <_strtod_l+0x96>
 8006434:	290d      	cmp	r1, #13
 8006436:	d832      	bhi.n	800649e <_strtod_l+0x8e>
 8006438:	2908      	cmp	r1, #8
 800643a:	d832      	bhi.n	80064a2 <_strtod_l+0x92>
 800643c:	2900      	cmp	r1, #0
 800643e:	d03b      	beq.n	80064b8 <_strtod_l+0xa8>
 8006440:	2200      	movs	r2, #0
 8006442:	920e      	str	r2, [sp, #56]	@ 0x38
 8006444:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006446:	782a      	ldrb	r2, [r5, #0]
 8006448:	2a30      	cmp	r2, #48	@ 0x30
 800644a:	f040 80b2 	bne.w	80065b2 <_strtod_l+0x1a2>
 800644e:	786a      	ldrb	r2, [r5, #1]
 8006450:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006454:	2a58      	cmp	r2, #88	@ 0x58
 8006456:	d16e      	bne.n	8006536 <_strtod_l+0x126>
 8006458:	9302      	str	r3, [sp, #8]
 800645a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4a8f      	ldr	r2, [pc, #572]	@ (80066a0 <_strtod_l+0x290>)
 8006464:	9805      	ldr	r0, [sp, #20]
 8006466:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006468:	a919      	add	r1, sp, #100	@ 0x64
 800646a:	f001 f8a9 	bl	80075c0 <__gethex>
 800646e:	f010 060f 	ands.w	r6, r0, #15
 8006472:	4604      	mov	r4, r0
 8006474:	d005      	beq.n	8006482 <_strtod_l+0x72>
 8006476:	2e06      	cmp	r6, #6
 8006478:	d128      	bne.n	80064cc <_strtod_l+0xbc>
 800647a:	3501      	adds	r5, #1
 800647c:	2300      	movs	r3, #0
 800647e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006480:	930e      	str	r3, [sp, #56]	@ 0x38
 8006482:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 858e 	bne.w	8006fa6 <_strtod_l+0xb96>
 800648a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800648c:	b1cb      	cbz	r3, 80064c2 <_strtod_l+0xb2>
 800648e:	4652      	mov	r2, sl
 8006490:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006494:	ec43 2b10 	vmov	d0, r2, r3
 8006498:	b01f      	add	sp, #124	@ 0x7c
 800649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649e:	2920      	cmp	r1, #32
 80064a0:	d1ce      	bne.n	8006440 <_strtod_l+0x30>
 80064a2:	3201      	adds	r2, #1
 80064a4:	e7c1      	b.n	800642a <_strtod_l+0x1a>
 80064a6:	292d      	cmp	r1, #45	@ 0x2d
 80064a8:	d1ca      	bne.n	8006440 <_strtod_l+0x30>
 80064aa:	2101      	movs	r1, #1
 80064ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80064ae:	1c51      	adds	r1, r2, #1
 80064b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80064b2:	7852      	ldrb	r2, [r2, #1]
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d1c5      	bne.n	8006444 <_strtod_l+0x34>
 80064b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 8570 	bne.w	8006fa2 <_strtod_l+0xb92>
 80064c2:	4652      	mov	r2, sl
 80064c4:	465b      	mov	r3, fp
 80064c6:	e7e5      	b.n	8006494 <_strtod_l+0x84>
 80064c8:	2100      	movs	r1, #0
 80064ca:	e7ef      	b.n	80064ac <_strtod_l+0x9c>
 80064cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80064ce:	b13a      	cbz	r2, 80064e0 <_strtod_l+0xd0>
 80064d0:	2135      	movs	r1, #53	@ 0x35
 80064d2:	a81c      	add	r0, sp, #112	@ 0x70
 80064d4:	f002 f86c 	bl	80085b0 <__copybits>
 80064d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064da:	9805      	ldr	r0, [sp, #20]
 80064dc:	f001 fc42 	bl	8007d64 <_Bfree>
 80064e0:	3e01      	subs	r6, #1
 80064e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80064e4:	2e04      	cmp	r6, #4
 80064e6:	d806      	bhi.n	80064f6 <_strtod_l+0xe6>
 80064e8:	e8df f006 	tbb	[pc, r6]
 80064ec:	201d0314 	.word	0x201d0314
 80064f0:	14          	.byte	0x14
 80064f1:	00          	.byte	0x00
 80064f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80064f6:	05e1      	lsls	r1, r4, #23
 80064f8:	bf48      	it	mi
 80064fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80064fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006502:	0d1b      	lsrs	r3, r3, #20
 8006504:	051b      	lsls	r3, r3, #20
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1bb      	bne.n	8006482 <_strtod_l+0x72>
 800650a:	f000 ff5b 	bl	80073c4 <__errno>
 800650e:	2322      	movs	r3, #34	@ 0x22
 8006510:	6003      	str	r3, [r0, #0]
 8006512:	e7b6      	b.n	8006482 <_strtod_l+0x72>
 8006514:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006518:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800651c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006520:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006524:	e7e7      	b.n	80064f6 <_strtod_l+0xe6>
 8006526:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80066a8 <_strtod_l+0x298>
 800652a:	e7e4      	b.n	80064f6 <_strtod_l+0xe6>
 800652c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006530:	f04f 3aff 	mov.w	sl, #4294967295
 8006534:	e7df      	b.n	80064f6 <_strtod_l+0xe6>
 8006536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	9219      	str	r2, [sp, #100]	@ 0x64
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b30      	cmp	r3, #48	@ 0x30
 8006540:	d0f9      	beq.n	8006536 <_strtod_l+0x126>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d09d      	beq.n	8006482 <_strtod_l+0x72>
 8006546:	2301      	movs	r3, #1
 8006548:	2700      	movs	r7, #0
 800654a:	9308      	str	r3, [sp, #32]
 800654c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800654e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006550:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006552:	46b9      	mov	r9, r7
 8006554:	220a      	movs	r2, #10
 8006556:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006558:	7805      	ldrb	r5, [r0, #0]
 800655a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800655e:	b2d9      	uxtb	r1, r3
 8006560:	2909      	cmp	r1, #9
 8006562:	d928      	bls.n	80065b6 <_strtod_l+0x1a6>
 8006564:	494f      	ldr	r1, [pc, #316]	@ (80066a4 <_strtod_l+0x294>)
 8006566:	2201      	movs	r2, #1
 8006568:	f000 fed3 	bl	8007312 <strncmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	d032      	beq.n	80065d6 <_strtod_l+0x1c6>
 8006570:	2000      	movs	r0, #0
 8006572:	462a      	mov	r2, r5
 8006574:	900a      	str	r0, [sp, #40]	@ 0x28
 8006576:	464d      	mov	r5, r9
 8006578:	4603      	mov	r3, r0
 800657a:	2a65      	cmp	r2, #101	@ 0x65
 800657c:	d001      	beq.n	8006582 <_strtod_l+0x172>
 800657e:	2a45      	cmp	r2, #69	@ 0x45
 8006580:	d114      	bne.n	80065ac <_strtod_l+0x19c>
 8006582:	b91d      	cbnz	r5, 800658c <_strtod_l+0x17c>
 8006584:	9a08      	ldr	r2, [sp, #32]
 8006586:	4302      	orrs	r2, r0
 8006588:	d096      	beq.n	80064b8 <_strtod_l+0xa8>
 800658a:	2500      	movs	r5, #0
 800658c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800658e:	1c62      	adds	r2, r4, #1
 8006590:	9219      	str	r2, [sp, #100]	@ 0x64
 8006592:	7862      	ldrb	r2, [r4, #1]
 8006594:	2a2b      	cmp	r2, #43	@ 0x2b
 8006596:	d07a      	beq.n	800668e <_strtod_l+0x27e>
 8006598:	2a2d      	cmp	r2, #45	@ 0x2d
 800659a:	d07e      	beq.n	800669a <_strtod_l+0x28a>
 800659c:	f04f 0c00 	mov.w	ip, #0
 80065a0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80065a4:	2909      	cmp	r1, #9
 80065a6:	f240 8085 	bls.w	80066b4 <_strtod_l+0x2a4>
 80065aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80065ac:	f04f 0800 	mov.w	r8, #0
 80065b0:	e0a5      	b.n	80066fe <_strtod_l+0x2ee>
 80065b2:	2300      	movs	r3, #0
 80065b4:	e7c8      	b.n	8006548 <_strtod_l+0x138>
 80065b6:	f1b9 0f08 	cmp.w	r9, #8
 80065ba:	bfd8      	it	le
 80065bc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80065be:	f100 0001 	add.w	r0, r0, #1
 80065c2:	bfda      	itte	le
 80065c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80065c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80065ca:	fb02 3707 	mlagt	r7, r2, r7, r3
 80065ce:	f109 0901 	add.w	r9, r9, #1
 80065d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80065d4:	e7bf      	b.n	8006556 <_strtod_l+0x146>
 80065d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	9219      	str	r2, [sp, #100]	@ 0x64
 80065dc:	785a      	ldrb	r2, [r3, #1]
 80065de:	f1b9 0f00 	cmp.w	r9, #0
 80065e2:	d03b      	beq.n	800665c <_strtod_l+0x24c>
 80065e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80065e6:	464d      	mov	r5, r9
 80065e8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d912      	bls.n	8006616 <_strtod_l+0x206>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7c2      	b.n	800657a <_strtod_l+0x16a>
 80065f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80065fa:	785a      	ldrb	r2, [r3, #1]
 80065fc:	3001      	adds	r0, #1
 80065fe:	2a30      	cmp	r2, #48	@ 0x30
 8006600:	d0f8      	beq.n	80065f4 <_strtod_l+0x1e4>
 8006602:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006606:	2b08      	cmp	r3, #8
 8006608:	f200 84d2 	bhi.w	8006fb0 <_strtod_l+0xba0>
 800660c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800660e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006610:	2000      	movs	r0, #0
 8006612:	930c      	str	r3, [sp, #48]	@ 0x30
 8006614:	4605      	mov	r5, r0
 8006616:	3a30      	subs	r2, #48	@ 0x30
 8006618:	f100 0301 	add.w	r3, r0, #1
 800661c:	d018      	beq.n	8006650 <_strtod_l+0x240>
 800661e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006620:	4419      	add	r1, r3
 8006622:	910a      	str	r1, [sp, #40]	@ 0x28
 8006624:	462e      	mov	r6, r5
 8006626:	f04f 0e0a 	mov.w	lr, #10
 800662a:	1c71      	adds	r1, r6, #1
 800662c:	eba1 0c05 	sub.w	ip, r1, r5
 8006630:	4563      	cmp	r3, ip
 8006632:	dc15      	bgt.n	8006660 <_strtod_l+0x250>
 8006634:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006638:	182b      	adds	r3, r5, r0
 800663a:	2b08      	cmp	r3, #8
 800663c:	f105 0501 	add.w	r5, r5, #1
 8006640:	4405      	add	r5, r0
 8006642:	dc1a      	bgt.n	800667a <_strtod_l+0x26a>
 8006644:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006646:	230a      	movs	r3, #10
 8006648:	fb03 2301 	mla	r3, r3, r1, r2
 800664c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800664e:	2300      	movs	r3, #0
 8006650:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006652:	1c51      	adds	r1, r2, #1
 8006654:	9119      	str	r1, [sp, #100]	@ 0x64
 8006656:	7852      	ldrb	r2, [r2, #1]
 8006658:	4618      	mov	r0, r3
 800665a:	e7c5      	b.n	80065e8 <_strtod_l+0x1d8>
 800665c:	4648      	mov	r0, r9
 800665e:	e7ce      	b.n	80065fe <_strtod_l+0x1ee>
 8006660:	2e08      	cmp	r6, #8
 8006662:	dc05      	bgt.n	8006670 <_strtod_l+0x260>
 8006664:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006666:	fb0e f606 	mul.w	r6, lr, r6
 800666a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800666c:	460e      	mov	r6, r1
 800666e:	e7dc      	b.n	800662a <_strtod_l+0x21a>
 8006670:	2910      	cmp	r1, #16
 8006672:	bfd8      	it	le
 8006674:	fb0e f707 	mulle.w	r7, lr, r7
 8006678:	e7f8      	b.n	800666c <_strtod_l+0x25c>
 800667a:	2b0f      	cmp	r3, #15
 800667c:	bfdc      	itt	le
 800667e:	230a      	movle	r3, #10
 8006680:	fb03 2707 	mlale	r7, r3, r7, r2
 8006684:	e7e3      	b.n	800664e <_strtod_l+0x23e>
 8006686:	2300      	movs	r3, #0
 8006688:	930a      	str	r3, [sp, #40]	@ 0x28
 800668a:	2301      	movs	r3, #1
 800668c:	e77a      	b.n	8006584 <_strtod_l+0x174>
 800668e:	f04f 0c00 	mov.w	ip, #0
 8006692:	1ca2      	adds	r2, r4, #2
 8006694:	9219      	str	r2, [sp, #100]	@ 0x64
 8006696:	78a2      	ldrb	r2, [r4, #2]
 8006698:	e782      	b.n	80065a0 <_strtod_l+0x190>
 800669a:	f04f 0c01 	mov.w	ip, #1
 800669e:	e7f8      	b.n	8006692 <_strtod_l+0x282>
 80066a0:	0800999c 	.word	0x0800999c
 80066a4:	08009820 	.word	0x08009820
 80066a8:	7ff00000 	.word	0x7ff00000
 80066ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066ae:	1c51      	adds	r1, r2, #1
 80066b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80066b2:	7852      	ldrb	r2, [r2, #1]
 80066b4:	2a30      	cmp	r2, #48	@ 0x30
 80066b6:	d0f9      	beq.n	80066ac <_strtod_l+0x29c>
 80066b8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80066bc:	2908      	cmp	r1, #8
 80066be:	f63f af75 	bhi.w	80065ac <_strtod_l+0x19c>
 80066c2:	3a30      	subs	r2, #48	@ 0x30
 80066c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80066ca:	f04f 080a 	mov.w	r8, #10
 80066ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066d0:	1c56      	adds	r6, r2, #1
 80066d2:	9619      	str	r6, [sp, #100]	@ 0x64
 80066d4:	7852      	ldrb	r2, [r2, #1]
 80066d6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80066da:	f1be 0f09 	cmp.w	lr, #9
 80066de:	d939      	bls.n	8006754 <_strtod_l+0x344>
 80066e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066e2:	1a76      	subs	r6, r6, r1
 80066e4:	2e08      	cmp	r6, #8
 80066e6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80066ea:	dc03      	bgt.n	80066f4 <_strtod_l+0x2e4>
 80066ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066ee:	4588      	cmp	r8, r1
 80066f0:	bfa8      	it	ge
 80066f2:	4688      	movge	r8, r1
 80066f4:	f1bc 0f00 	cmp.w	ip, #0
 80066f8:	d001      	beq.n	80066fe <_strtod_l+0x2ee>
 80066fa:	f1c8 0800 	rsb	r8, r8, #0
 80066fe:	2d00      	cmp	r5, #0
 8006700:	d14e      	bne.n	80067a0 <_strtod_l+0x390>
 8006702:	9908      	ldr	r1, [sp, #32]
 8006704:	4308      	orrs	r0, r1
 8006706:	f47f aebc 	bne.w	8006482 <_strtod_l+0x72>
 800670a:	2b00      	cmp	r3, #0
 800670c:	f47f aed4 	bne.w	80064b8 <_strtod_l+0xa8>
 8006710:	2a69      	cmp	r2, #105	@ 0x69
 8006712:	d028      	beq.n	8006766 <_strtod_l+0x356>
 8006714:	dc25      	bgt.n	8006762 <_strtod_l+0x352>
 8006716:	2a49      	cmp	r2, #73	@ 0x49
 8006718:	d025      	beq.n	8006766 <_strtod_l+0x356>
 800671a:	2a4e      	cmp	r2, #78	@ 0x4e
 800671c:	f47f aecc 	bne.w	80064b8 <_strtod_l+0xa8>
 8006720:	499a      	ldr	r1, [pc, #616]	@ (800698c <_strtod_l+0x57c>)
 8006722:	a819      	add	r0, sp, #100	@ 0x64
 8006724:	f001 f96e 	bl	8007a04 <__match>
 8006728:	2800      	cmp	r0, #0
 800672a:	f43f aec5 	beq.w	80064b8 <_strtod_l+0xa8>
 800672e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b28      	cmp	r3, #40	@ 0x28
 8006734:	d12e      	bne.n	8006794 <_strtod_l+0x384>
 8006736:	4996      	ldr	r1, [pc, #600]	@ (8006990 <_strtod_l+0x580>)
 8006738:	aa1c      	add	r2, sp, #112	@ 0x70
 800673a:	a819      	add	r0, sp, #100	@ 0x64
 800673c:	f001 f976 	bl	8007a2c <__hexnan>
 8006740:	2805      	cmp	r0, #5
 8006742:	d127      	bne.n	8006794 <_strtod_l+0x384>
 8006744:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006746:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800674a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800674e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006752:	e696      	b.n	8006482 <_strtod_l+0x72>
 8006754:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006756:	fb08 2101 	mla	r1, r8, r1, r2
 800675a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800675e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006760:	e7b5      	b.n	80066ce <_strtod_l+0x2be>
 8006762:	2a6e      	cmp	r2, #110	@ 0x6e
 8006764:	e7da      	b.n	800671c <_strtod_l+0x30c>
 8006766:	498b      	ldr	r1, [pc, #556]	@ (8006994 <_strtod_l+0x584>)
 8006768:	a819      	add	r0, sp, #100	@ 0x64
 800676a:	f001 f94b 	bl	8007a04 <__match>
 800676e:	2800      	cmp	r0, #0
 8006770:	f43f aea2 	beq.w	80064b8 <_strtod_l+0xa8>
 8006774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006776:	4988      	ldr	r1, [pc, #544]	@ (8006998 <_strtod_l+0x588>)
 8006778:	3b01      	subs	r3, #1
 800677a:	a819      	add	r0, sp, #100	@ 0x64
 800677c:	9319      	str	r3, [sp, #100]	@ 0x64
 800677e:	f001 f941 	bl	8007a04 <__match>
 8006782:	b910      	cbnz	r0, 800678a <_strtod_l+0x37a>
 8006784:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006786:	3301      	adds	r3, #1
 8006788:	9319      	str	r3, [sp, #100]	@ 0x64
 800678a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80069a8 <_strtod_l+0x598>
 800678e:	f04f 0a00 	mov.w	sl, #0
 8006792:	e676      	b.n	8006482 <_strtod_l+0x72>
 8006794:	4881      	ldr	r0, [pc, #516]	@ (800699c <_strtod_l+0x58c>)
 8006796:	f000 fe53 	bl	8007440 <nan>
 800679a:	ec5b ab10 	vmov	sl, fp, d0
 800679e:	e670      	b.n	8006482 <_strtod_l+0x72>
 80067a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80067a4:	eba8 0303 	sub.w	r3, r8, r3
 80067a8:	f1b9 0f00 	cmp.w	r9, #0
 80067ac:	bf08      	it	eq
 80067ae:	46a9      	moveq	r9, r5
 80067b0:	2d10      	cmp	r5, #16
 80067b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b4:	462c      	mov	r4, r5
 80067b6:	bfa8      	it	ge
 80067b8:	2410      	movge	r4, #16
 80067ba:	f7f9 feab 	bl	8000514 <__aeabi_ui2d>
 80067be:	2d09      	cmp	r5, #9
 80067c0:	4682      	mov	sl, r0
 80067c2:	468b      	mov	fp, r1
 80067c4:	dc13      	bgt.n	80067ee <_strtod_l+0x3de>
 80067c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f43f ae5a 	beq.w	8006482 <_strtod_l+0x72>
 80067ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d0:	dd78      	ble.n	80068c4 <_strtod_l+0x4b4>
 80067d2:	2b16      	cmp	r3, #22
 80067d4:	dc5f      	bgt.n	8006896 <_strtod_l+0x486>
 80067d6:	4972      	ldr	r1, [pc, #456]	@ (80069a0 <_strtod_l+0x590>)
 80067d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e0:	4652      	mov	r2, sl
 80067e2:	465b      	mov	r3, fp
 80067e4:	f7f9 ff10 	bl	8000608 <__aeabi_dmul>
 80067e8:	4682      	mov	sl, r0
 80067ea:	468b      	mov	fp, r1
 80067ec:	e649      	b.n	8006482 <_strtod_l+0x72>
 80067ee:	4b6c      	ldr	r3, [pc, #432]	@ (80069a0 <_strtod_l+0x590>)
 80067f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80067f8:	f7f9 ff06 	bl	8000608 <__aeabi_dmul>
 80067fc:	4682      	mov	sl, r0
 80067fe:	4638      	mov	r0, r7
 8006800:	468b      	mov	fp, r1
 8006802:	f7f9 fe87 	bl	8000514 <__aeabi_ui2d>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4650      	mov	r0, sl
 800680c:	4659      	mov	r1, fp
 800680e:	f7f9 fd45 	bl	800029c <__adddf3>
 8006812:	2d0f      	cmp	r5, #15
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	ddd5      	ble.n	80067c6 <_strtod_l+0x3b6>
 800681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681c:	1b2c      	subs	r4, r5, r4
 800681e:	441c      	add	r4, r3
 8006820:	2c00      	cmp	r4, #0
 8006822:	f340 8093 	ble.w	800694c <_strtod_l+0x53c>
 8006826:	f014 030f 	ands.w	r3, r4, #15
 800682a:	d00a      	beq.n	8006842 <_strtod_l+0x432>
 800682c:	495c      	ldr	r1, [pc, #368]	@ (80069a0 <_strtod_l+0x590>)
 800682e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006832:	4652      	mov	r2, sl
 8006834:	465b      	mov	r3, fp
 8006836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683a:	f7f9 fee5 	bl	8000608 <__aeabi_dmul>
 800683e:	4682      	mov	sl, r0
 8006840:	468b      	mov	fp, r1
 8006842:	f034 040f 	bics.w	r4, r4, #15
 8006846:	d073      	beq.n	8006930 <_strtod_l+0x520>
 8006848:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800684c:	dd49      	ble.n	80068e2 <_strtod_l+0x4d2>
 800684e:	2400      	movs	r4, #0
 8006850:	46a0      	mov	r8, r4
 8006852:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006854:	46a1      	mov	r9, r4
 8006856:	9a05      	ldr	r2, [sp, #20]
 8006858:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80069a8 <_strtod_l+0x598>
 800685c:	2322      	movs	r3, #34	@ 0x22
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	f04f 0a00 	mov.w	sl, #0
 8006864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	f43f ae0b 	beq.w	8006482 <_strtod_l+0x72>
 800686c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800686e:	9805      	ldr	r0, [sp, #20]
 8006870:	f001 fa78 	bl	8007d64 <_Bfree>
 8006874:	9805      	ldr	r0, [sp, #20]
 8006876:	4649      	mov	r1, r9
 8006878:	f001 fa74 	bl	8007d64 <_Bfree>
 800687c:	9805      	ldr	r0, [sp, #20]
 800687e:	4641      	mov	r1, r8
 8006880:	f001 fa70 	bl	8007d64 <_Bfree>
 8006884:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006886:	9805      	ldr	r0, [sp, #20]
 8006888:	f001 fa6c 	bl	8007d64 <_Bfree>
 800688c:	9805      	ldr	r0, [sp, #20]
 800688e:	4621      	mov	r1, r4
 8006890:	f001 fa68 	bl	8007d64 <_Bfree>
 8006894:	e5f5      	b.n	8006482 <_strtod_l+0x72>
 8006896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006898:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800689c:	4293      	cmp	r3, r2
 800689e:	dbbc      	blt.n	800681a <_strtod_l+0x40a>
 80068a0:	4c3f      	ldr	r4, [pc, #252]	@ (80069a0 <_strtod_l+0x590>)
 80068a2:	f1c5 050f 	rsb	r5, r5, #15
 80068a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80068aa:	4652      	mov	r2, sl
 80068ac:	465b      	mov	r3, fp
 80068ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068b2:	f7f9 fea9 	bl	8000608 <__aeabi_dmul>
 80068b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b8:	1b5d      	subs	r5, r3, r5
 80068ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068c2:	e78f      	b.n	80067e4 <_strtod_l+0x3d4>
 80068c4:	3316      	adds	r3, #22
 80068c6:	dba8      	blt.n	800681a <_strtod_l+0x40a>
 80068c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ca:	eba3 0808 	sub.w	r8, r3, r8
 80068ce:	4b34      	ldr	r3, [pc, #208]	@ (80069a0 <_strtod_l+0x590>)
 80068d0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80068d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80068d8:	4650      	mov	r0, sl
 80068da:	4659      	mov	r1, fp
 80068dc:	f7f9 ffbe 	bl	800085c <__aeabi_ddiv>
 80068e0:	e782      	b.n	80067e8 <_strtod_l+0x3d8>
 80068e2:	2300      	movs	r3, #0
 80068e4:	4f2f      	ldr	r7, [pc, #188]	@ (80069a4 <_strtod_l+0x594>)
 80068e6:	1124      	asrs	r4, r4, #4
 80068e8:	4650      	mov	r0, sl
 80068ea:	4659      	mov	r1, fp
 80068ec:	461e      	mov	r6, r3
 80068ee:	2c01      	cmp	r4, #1
 80068f0:	dc21      	bgt.n	8006936 <_strtod_l+0x526>
 80068f2:	b10b      	cbz	r3, 80068f8 <_strtod_l+0x4e8>
 80068f4:	4682      	mov	sl, r0
 80068f6:	468b      	mov	fp, r1
 80068f8:	492a      	ldr	r1, [pc, #168]	@ (80069a4 <_strtod_l+0x594>)
 80068fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80068fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006902:	4652      	mov	r2, sl
 8006904:	465b      	mov	r3, fp
 8006906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800690a:	f7f9 fe7d 	bl	8000608 <__aeabi_dmul>
 800690e:	4b26      	ldr	r3, [pc, #152]	@ (80069a8 <_strtod_l+0x598>)
 8006910:	460a      	mov	r2, r1
 8006912:	400b      	ands	r3, r1
 8006914:	4925      	ldr	r1, [pc, #148]	@ (80069ac <_strtod_l+0x59c>)
 8006916:	428b      	cmp	r3, r1
 8006918:	4682      	mov	sl, r0
 800691a:	d898      	bhi.n	800684e <_strtod_l+0x43e>
 800691c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006920:	428b      	cmp	r3, r1
 8006922:	bf86      	itte	hi
 8006924:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80069b0 <_strtod_l+0x5a0>
 8006928:	f04f 3aff 	movhi.w	sl, #4294967295
 800692c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006930:	2300      	movs	r3, #0
 8006932:	9308      	str	r3, [sp, #32]
 8006934:	e076      	b.n	8006a24 <_strtod_l+0x614>
 8006936:	07e2      	lsls	r2, r4, #31
 8006938:	d504      	bpl.n	8006944 <_strtod_l+0x534>
 800693a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693e:	f7f9 fe63 	bl	8000608 <__aeabi_dmul>
 8006942:	2301      	movs	r3, #1
 8006944:	3601      	adds	r6, #1
 8006946:	1064      	asrs	r4, r4, #1
 8006948:	3708      	adds	r7, #8
 800694a:	e7d0      	b.n	80068ee <_strtod_l+0x4de>
 800694c:	d0f0      	beq.n	8006930 <_strtod_l+0x520>
 800694e:	4264      	negs	r4, r4
 8006950:	f014 020f 	ands.w	r2, r4, #15
 8006954:	d00a      	beq.n	800696c <_strtod_l+0x55c>
 8006956:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <_strtod_l+0x590>)
 8006958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800695c:	4650      	mov	r0, sl
 800695e:	4659      	mov	r1, fp
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7f9 ff7a 	bl	800085c <__aeabi_ddiv>
 8006968:	4682      	mov	sl, r0
 800696a:	468b      	mov	fp, r1
 800696c:	1124      	asrs	r4, r4, #4
 800696e:	d0df      	beq.n	8006930 <_strtod_l+0x520>
 8006970:	2c1f      	cmp	r4, #31
 8006972:	dd1f      	ble.n	80069b4 <_strtod_l+0x5a4>
 8006974:	2400      	movs	r4, #0
 8006976:	46a0      	mov	r8, r4
 8006978:	940b      	str	r4, [sp, #44]	@ 0x2c
 800697a:	46a1      	mov	r9, r4
 800697c:	9a05      	ldr	r2, [sp, #20]
 800697e:	2322      	movs	r3, #34	@ 0x22
 8006980:	f04f 0a00 	mov.w	sl, #0
 8006984:	f04f 0b00 	mov.w	fp, #0
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e76b      	b.n	8006864 <_strtod_l+0x454>
 800698c:	0800982b 	.word	0x0800982b
 8006990:	08009988 	.word	0x08009988
 8006994:	08009822 	.word	0x08009822
 8006998:	08009825 	.word	0x08009825
 800699c:	08009952 	.word	0x08009952
 80069a0:	08009b10 	.word	0x08009b10
 80069a4:	08009ae8 	.word	0x08009ae8
 80069a8:	7ff00000 	.word	0x7ff00000
 80069ac:	7ca00000 	.word	0x7ca00000
 80069b0:	7fefffff 	.word	0x7fefffff
 80069b4:	f014 0310 	ands.w	r3, r4, #16
 80069b8:	bf18      	it	ne
 80069ba:	236a      	movne	r3, #106	@ 0x6a
 80069bc:	4ea9      	ldr	r6, [pc, #676]	@ (8006c64 <_strtod_l+0x854>)
 80069be:	9308      	str	r3, [sp, #32]
 80069c0:	4650      	mov	r0, sl
 80069c2:	4659      	mov	r1, fp
 80069c4:	2300      	movs	r3, #0
 80069c6:	07e7      	lsls	r7, r4, #31
 80069c8:	d504      	bpl.n	80069d4 <_strtod_l+0x5c4>
 80069ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069ce:	f7f9 fe1b 	bl	8000608 <__aeabi_dmul>
 80069d2:	2301      	movs	r3, #1
 80069d4:	1064      	asrs	r4, r4, #1
 80069d6:	f106 0608 	add.w	r6, r6, #8
 80069da:	d1f4      	bne.n	80069c6 <_strtod_l+0x5b6>
 80069dc:	b10b      	cbz	r3, 80069e2 <_strtod_l+0x5d2>
 80069de:	4682      	mov	sl, r0
 80069e0:	468b      	mov	fp, r1
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	b1b3      	cbz	r3, 8006a14 <_strtod_l+0x604>
 80069e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80069ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	4659      	mov	r1, fp
 80069f2:	dd0f      	ble.n	8006a14 <_strtod_l+0x604>
 80069f4:	2b1f      	cmp	r3, #31
 80069f6:	dd56      	ble.n	8006aa6 <_strtod_l+0x696>
 80069f8:	2b34      	cmp	r3, #52	@ 0x34
 80069fa:	bfde      	ittt	le
 80069fc:	f04f 33ff 	movle.w	r3, #4294967295
 8006a00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006a04:	4093      	lslle	r3, r2
 8006a06:	f04f 0a00 	mov.w	sl, #0
 8006a0a:	bfcc      	ite	gt
 8006a0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006a10:	ea03 0b01 	andle.w	fp, r3, r1
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	f7fa f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1a7      	bne.n	8006974 <_strtod_l+0x564>
 8006a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a2a:	9805      	ldr	r0, [sp, #20]
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	464a      	mov	r2, r9
 8006a30:	f001 fa00 	bl	8007e34 <__s2b>
 8006a34:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f43f af09 	beq.w	800684e <_strtod_l+0x43e>
 8006a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	eba3 0308 	sub.w	r3, r3, r8
 8006a46:	bfa8      	it	ge
 8006a48:	2300      	movge	r3, #0
 8006a4a:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a4c:	2400      	movs	r4, #0
 8006a4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a52:	9316      	str	r3, [sp, #88]	@ 0x58
 8006a54:	46a0      	mov	r8, r4
 8006a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a58:	9805      	ldr	r0, [sp, #20]
 8006a5a:	6859      	ldr	r1, [r3, #4]
 8006a5c:	f001 f942 	bl	8007ce4 <_Balloc>
 8006a60:	4681      	mov	r9, r0
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f43f aef7 	beq.w	8006856 <_strtod_l+0x446>
 8006a68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	3202      	adds	r2, #2
 8006a6e:	f103 010c 	add.w	r1, r3, #12
 8006a72:	0092      	lsls	r2, r2, #2
 8006a74:	300c      	adds	r0, #12
 8006a76:	f000 fcd2 	bl	800741e <memcpy>
 8006a7a:	ec4b ab10 	vmov	d0, sl, fp
 8006a7e:	9805      	ldr	r0, [sp, #20]
 8006a80:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a82:	a91b      	add	r1, sp, #108	@ 0x6c
 8006a84:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006a88:	f001 fd08 	bl	800849c <__d2b>
 8006a8c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f43f aee1 	beq.w	8006856 <_strtod_l+0x446>
 8006a94:	9805      	ldr	r0, [sp, #20]
 8006a96:	2101      	movs	r1, #1
 8006a98:	f001 fa62 	bl	8007f60 <__i2b>
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	b948      	cbnz	r0, 8006ab4 <_strtod_l+0x6a4>
 8006aa0:	f04f 0800 	mov.w	r8, #0
 8006aa4:	e6d7      	b.n	8006856 <_strtod_l+0x446>
 8006aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	ea03 0a0a 	and.w	sl, r3, sl
 8006ab2:	e7af      	b.n	8006a14 <_strtod_l+0x604>
 8006ab4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006ab6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	bfab      	itete	ge
 8006abc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006abe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006ac0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006ac2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006ac4:	bfac      	ite	ge
 8006ac6:	18ef      	addge	r7, r5, r3
 8006ac8:	1b5e      	sublt	r6, r3, r5
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	1aed      	subs	r5, r5, r3
 8006ace:	4415      	add	r5, r2
 8006ad0:	4b65      	ldr	r3, [pc, #404]	@ (8006c68 <_strtod_l+0x858>)
 8006ad2:	3d01      	subs	r5, #1
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006ada:	da50      	bge.n	8006b7e <_strtod_l+0x76e>
 8006adc:	1b5b      	subs	r3, r3, r5
 8006ade:	2b1f      	cmp	r3, #31
 8006ae0:	eba2 0203 	sub.w	r2, r2, r3
 8006ae4:	f04f 0101 	mov.w	r1, #1
 8006ae8:	dc3d      	bgt.n	8006b66 <_strtod_l+0x756>
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006af0:	2300      	movs	r3, #0
 8006af2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006af4:	18bd      	adds	r5, r7, r2
 8006af6:	9b08      	ldr	r3, [sp, #32]
 8006af8:	42af      	cmp	r7, r5
 8006afa:	4416      	add	r6, r2
 8006afc:	441e      	add	r6, r3
 8006afe:	463b      	mov	r3, r7
 8006b00:	bfa8      	it	ge
 8006b02:	462b      	movge	r3, r5
 8006b04:	42b3      	cmp	r3, r6
 8006b06:	bfa8      	it	ge
 8006b08:	4633      	movge	r3, r6
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfc2      	ittt	gt
 8006b0e:	1aed      	subgt	r5, r5, r3
 8006b10:	1af6      	subgt	r6, r6, r3
 8006b12:	1aff      	subgt	r7, r7, r3
 8006b14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd16      	ble.n	8006b48 <_strtod_l+0x738>
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	9805      	ldr	r0, [sp, #20]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f001 fad6 	bl	80080d0 <__pow5mult>
 8006b24:	4680      	mov	r8, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0ba      	beq.n	8006aa0 <_strtod_l+0x690>
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b2e:	9805      	ldr	r0, [sp, #20]
 8006b30:	f001 fa2c 	bl	8007f8c <__multiply>
 8006b34:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b36:	2800      	cmp	r0, #0
 8006b38:	f43f ae8d 	beq.w	8006856 <_strtod_l+0x446>
 8006b3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b3e:	9805      	ldr	r0, [sp, #20]
 8006b40:	f001 f910 	bl	8007d64 <_Bfree>
 8006b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b46:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	dc1d      	bgt.n	8006b88 <_strtod_l+0x778>
 8006b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dd23      	ble.n	8006b9a <_strtod_l+0x78a>
 8006b52:	4649      	mov	r1, r9
 8006b54:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f001 faba 	bl	80080d0 <__pow5mult>
 8006b5c:	4681      	mov	r9, r0
 8006b5e:	b9e0      	cbnz	r0, 8006b9a <_strtod_l+0x78a>
 8006b60:	f04f 0900 	mov.w	r9, #0
 8006b64:	e677      	b.n	8006856 <_strtod_l+0x446>
 8006b66:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006b6a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006b6e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006b72:	35e2      	adds	r5, #226	@ 0xe2
 8006b74:	fa01 f305 	lsl.w	r3, r1, r5
 8006b78:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b7a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006b7c:	e7ba      	b.n	8006af4 <_strtod_l+0x6e4>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b82:	2301      	movs	r3, #1
 8006b84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b86:	e7b5      	b.n	8006af4 <_strtod_l+0x6e4>
 8006b88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b8a:	9805      	ldr	r0, [sp, #20]
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	f001 faf9 	bl	8008184 <__lshift>
 8006b92:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d1d9      	bne.n	8006b4c <_strtod_l+0x73c>
 8006b98:	e65d      	b.n	8006856 <_strtod_l+0x446>
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	dd07      	ble.n	8006bae <_strtod_l+0x79e>
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	9805      	ldr	r0, [sp, #20]
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	f001 faee 	bl	8008184 <__lshift>
 8006ba8:	4681      	mov	r9, r0
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0d8      	beq.n	8006b60 <_strtod_l+0x750>
 8006bae:	2f00      	cmp	r7, #0
 8006bb0:	dd08      	ble.n	8006bc4 <_strtod_l+0x7b4>
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	9805      	ldr	r0, [sp, #20]
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	f001 fae4 	bl	8008184 <__lshift>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f ae49 	beq.w	8006856 <_strtod_l+0x446>
 8006bc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bc6:	9805      	ldr	r0, [sp, #20]
 8006bc8:	464a      	mov	r2, r9
 8006bca:	f001 fb63 	bl	8008294 <__mdiff>
 8006bce:	4604      	mov	r4, r0
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f43f ae40 	beq.w	8006856 <_strtod_l+0x446>
 8006bd6:	68c3      	ldr	r3, [r0, #12]
 8006bd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60c3      	str	r3, [r0, #12]
 8006bde:	4641      	mov	r1, r8
 8006be0:	f001 fb3c 	bl	800825c <__mcmp>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	da45      	bge.n	8006c74 <_strtod_l+0x864>
 8006be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bea:	ea53 030a 	orrs.w	r3, r3, sl
 8006bee:	d16b      	bne.n	8006cc8 <_strtod_l+0x8b8>
 8006bf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d167      	bne.n	8006cc8 <_strtod_l+0x8b8>
 8006bf8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bfc:	0d1b      	lsrs	r3, r3, #20
 8006bfe:	051b      	lsls	r3, r3, #20
 8006c00:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c04:	d960      	bls.n	8006cc8 <_strtod_l+0x8b8>
 8006c06:	6963      	ldr	r3, [r4, #20]
 8006c08:	b913      	cbnz	r3, 8006c10 <_strtod_l+0x800>
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	dd5b      	ble.n	8006cc8 <_strtod_l+0x8b8>
 8006c10:	4621      	mov	r1, r4
 8006c12:	2201      	movs	r2, #1
 8006c14:	9805      	ldr	r0, [sp, #20]
 8006c16:	f001 fab5 	bl	8008184 <__lshift>
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	f001 fb1d 	bl	800825c <__mcmp>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	dd50      	ble.n	8006cc8 <_strtod_l+0x8b8>
 8006c26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c2a:	9a08      	ldr	r2, [sp, #32]
 8006c2c:	0d1b      	lsrs	r3, r3, #20
 8006c2e:	051b      	lsls	r3, r3, #20
 8006c30:	2a00      	cmp	r2, #0
 8006c32:	d06a      	beq.n	8006d0a <_strtod_l+0x8fa>
 8006c34:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c38:	d867      	bhi.n	8006d0a <_strtod_l+0x8fa>
 8006c3a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006c3e:	f67f ae9d 	bls.w	800697c <_strtod_l+0x56c>
 8006c42:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <_strtod_l+0x85c>)
 8006c44:	4650      	mov	r0, sl
 8006c46:	4659      	mov	r1, fp
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f7f9 fcdd 	bl	8000608 <__aeabi_dmul>
 8006c4e:	4b08      	ldr	r3, [pc, #32]	@ (8006c70 <_strtod_l+0x860>)
 8006c50:	400b      	ands	r3, r1
 8006c52:	4682      	mov	sl, r0
 8006c54:	468b      	mov	fp, r1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f47f ae08 	bne.w	800686c <_strtod_l+0x45c>
 8006c5c:	9a05      	ldr	r2, [sp, #20]
 8006c5e:	2322      	movs	r3, #34	@ 0x22
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e603      	b.n	800686c <_strtod_l+0x45c>
 8006c64:	080099b0 	.word	0x080099b0
 8006c68:	fffffc02 	.word	0xfffffc02
 8006c6c:	39500000 	.word	0x39500000
 8006c70:	7ff00000 	.word	0x7ff00000
 8006c74:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006c78:	d165      	bne.n	8006d46 <_strtod_l+0x936>
 8006c7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006c7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c80:	b35a      	cbz	r2, 8006cda <_strtod_l+0x8ca>
 8006c82:	4a9f      	ldr	r2, [pc, #636]	@ (8006f00 <_strtod_l+0xaf0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d12b      	bne.n	8006ce0 <_strtod_l+0x8d0>
 8006c88:	9b08      	ldr	r3, [sp, #32]
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	b303      	cbz	r3, 8006cd0 <_strtod_l+0x8c0>
 8006c8e:	4b9d      	ldr	r3, [pc, #628]	@ (8006f04 <_strtod_l+0xaf4>)
 8006c90:	465a      	mov	r2, fp
 8006c92:	4013      	ands	r3, r2
 8006c94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	d81b      	bhi.n	8006cd6 <_strtod_l+0x8c6>
 8006c9e:	0d1b      	lsrs	r3, r3, #20
 8006ca0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d119      	bne.n	8006ce0 <_strtod_l+0x8d0>
 8006cac:	4b96      	ldr	r3, [pc, #600]	@ (8006f08 <_strtod_l+0xaf8>)
 8006cae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d102      	bne.n	8006cba <_strtod_l+0x8aa>
 8006cb4:	3101      	adds	r1, #1
 8006cb6:	f43f adce 	beq.w	8006856 <_strtod_l+0x446>
 8006cba:	4b92      	ldr	r3, [pc, #584]	@ (8006f04 <_strtod_l+0xaf4>)
 8006cbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006cc4:	f04f 0a00 	mov.w	sl, #0
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1b9      	bne.n	8006c42 <_strtod_l+0x832>
 8006cce:	e5cd      	b.n	800686c <_strtod_l+0x45c>
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	e7e8      	b.n	8006ca8 <_strtod_l+0x898>
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	e7e6      	b.n	8006ca8 <_strtod_l+0x898>
 8006cda:	ea53 030a 	orrs.w	r3, r3, sl
 8006cde:	d0a2      	beq.n	8006c26 <_strtod_l+0x816>
 8006ce0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ce2:	b1db      	cbz	r3, 8006d1c <_strtod_l+0x90c>
 8006ce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ce6:	4213      	tst	r3, r2
 8006ce8:	d0ee      	beq.n	8006cc8 <_strtod_l+0x8b8>
 8006cea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cec:	9a08      	ldr	r2, [sp, #32]
 8006cee:	4650      	mov	r0, sl
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	b1bb      	cbz	r3, 8006d24 <_strtod_l+0x914>
 8006cf4:	f7ff fb6d 	bl	80063d2 <sulp>
 8006cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cfc:	ec53 2b10 	vmov	r2, r3, d0
 8006d00:	f7f9 facc 	bl	800029c <__adddf3>
 8006d04:	4682      	mov	sl, r0
 8006d06:	468b      	mov	fp, r1
 8006d08:	e7de      	b.n	8006cc8 <_strtod_l+0x8b8>
 8006d0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006d0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d16:	f04f 3aff 	mov.w	sl, #4294967295
 8006d1a:	e7d5      	b.n	8006cc8 <_strtod_l+0x8b8>
 8006d1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d1e:	ea13 0f0a 	tst.w	r3, sl
 8006d22:	e7e1      	b.n	8006ce8 <_strtod_l+0x8d8>
 8006d24:	f7ff fb55 	bl	80063d2 <sulp>
 8006d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d2c:	ec53 2b10 	vmov	r2, r3, d0
 8006d30:	f7f9 fab2 	bl	8000298 <__aeabi_dsub>
 8006d34:	2200      	movs	r2, #0
 8006d36:	2300      	movs	r3, #0
 8006d38:	4682      	mov	sl, r0
 8006d3a:	468b      	mov	fp, r1
 8006d3c:	f7f9 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d0c1      	beq.n	8006cc8 <_strtod_l+0x8b8>
 8006d44:	e61a      	b.n	800697c <_strtod_l+0x56c>
 8006d46:	4641      	mov	r1, r8
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f001 fbff 	bl	800854c <__ratio>
 8006d4e:	ec57 6b10 	vmov	r6, r7, d0
 8006d52:	2200      	movs	r2, #0
 8006d54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fed0 	bl	8000b00 <__aeabi_dcmple>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d06f      	beq.n	8006e44 <_strtod_l+0xa34>
 8006d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d17a      	bne.n	8006e60 <_strtod_l+0xa50>
 8006d6a:	f1ba 0f00 	cmp.w	sl, #0
 8006d6e:	d158      	bne.n	8006e22 <_strtod_l+0xa12>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d15a      	bne.n	8006e30 <_strtod_l+0xa20>
 8006d7a:	4b64      	ldr	r3, [pc, #400]	@ (8006f0c <_strtod_l+0xafc>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4639      	mov	r1, r7
 8006d82:	f7f9 feb3 	bl	8000aec <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d159      	bne.n	8006e3e <_strtod_l+0xa2e>
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4b60      	ldr	r3, [pc, #384]	@ (8006f10 <_strtod_l+0xb00>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	f7f9 fc39 	bl	8000608 <__aeabi_dmul>
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006d9e:	9606      	str	r6, [sp, #24]
 8006da0:	9307      	str	r3, [sp, #28]
 8006da2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006da6:	4d57      	ldr	r5, [pc, #348]	@ (8006f04 <_strtod_l+0xaf4>)
 8006da8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	401d      	ands	r5, r3
 8006db0:	4b58      	ldr	r3, [pc, #352]	@ (8006f14 <_strtod_l+0xb04>)
 8006db2:	429d      	cmp	r5, r3
 8006db4:	f040 80b2 	bne.w	8006f1c <_strtod_l+0xb0c>
 8006db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006dbe:	ec4b ab10 	vmov	d0, sl, fp
 8006dc2:	f001 fafb 	bl	80083bc <__ulp>
 8006dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dca:	ec51 0b10 	vmov	r0, r1, d0
 8006dce:	f7f9 fc1b 	bl	8000608 <__aeabi_dmul>
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	465b      	mov	r3, fp
 8006dd6:	f7f9 fa61 	bl	800029c <__adddf3>
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4949      	ldr	r1, [pc, #292]	@ (8006f04 <_strtod_l+0xaf4>)
 8006dde:	4a4e      	ldr	r2, [pc, #312]	@ (8006f18 <_strtod_l+0xb08>)
 8006de0:	4019      	ands	r1, r3
 8006de2:	4291      	cmp	r1, r2
 8006de4:	4682      	mov	sl, r0
 8006de6:	d942      	bls.n	8006e6e <_strtod_l+0xa5e>
 8006de8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dea:	4b47      	ldr	r3, [pc, #284]	@ (8006f08 <_strtod_l+0xaf8>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d103      	bne.n	8006df8 <_strtod_l+0x9e8>
 8006df0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006df2:	3301      	adds	r3, #1
 8006df4:	f43f ad2f 	beq.w	8006856 <_strtod_l+0x446>
 8006df8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006f08 <_strtod_l+0xaf8>
 8006dfc:	f04f 3aff 	mov.w	sl, #4294967295
 8006e00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e02:	9805      	ldr	r0, [sp, #20]
 8006e04:	f000 ffae 	bl	8007d64 <_Bfree>
 8006e08:	9805      	ldr	r0, [sp, #20]
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	f000 ffaa 	bl	8007d64 <_Bfree>
 8006e10:	9805      	ldr	r0, [sp, #20]
 8006e12:	4641      	mov	r1, r8
 8006e14:	f000 ffa6 	bl	8007d64 <_Bfree>
 8006e18:	9805      	ldr	r0, [sp, #20]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	f000 ffa2 	bl	8007d64 <_Bfree>
 8006e20:	e619      	b.n	8006a56 <_strtod_l+0x646>
 8006e22:	f1ba 0f01 	cmp.w	sl, #1
 8006e26:	d103      	bne.n	8006e30 <_strtod_l+0xa20>
 8006e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f43f ada6 	beq.w	800697c <_strtod_l+0x56c>
 8006e30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006ee0 <_strtod_l+0xad0>
 8006e34:	4f35      	ldr	r7, [pc, #212]	@ (8006f0c <_strtod_l+0xafc>)
 8006e36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	e7b1      	b.n	8006da2 <_strtod_l+0x992>
 8006e3e:	4f34      	ldr	r7, [pc, #208]	@ (8006f10 <_strtod_l+0xb00>)
 8006e40:	2600      	movs	r6, #0
 8006e42:	e7aa      	b.n	8006d9a <_strtod_l+0x98a>
 8006e44:	4b32      	ldr	r3, [pc, #200]	@ (8006f10 <_strtod_l+0xb00>)
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e52:	4606      	mov	r6, r0
 8006e54:	460f      	mov	r7, r1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d09f      	beq.n	8006d9a <_strtod_l+0x98a>
 8006e5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006e5e:	e7a0      	b.n	8006da2 <_strtod_l+0x992>
 8006e60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006ee8 <_strtod_l+0xad8>
 8006e64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e68:	ec57 6b17 	vmov	r6, r7, d7
 8006e6c:	e799      	b.n	8006da2 <_strtod_l+0x992>
 8006e6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1c1      	bne.n	8006e00 <_strtod_l+0x9f0>
 8006e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e80:	0d1b      	lsrs	r3, r3, #20
 8006e82:	051b      	lsls	r3, r3, #20
 8006e84:	429d      	cmp	r5, r3
 8006e86:	d1bb      	bne.n	8006e00 <_strtod_l+0x9f0>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 ff06 	bl	8000c9c <__aeabi_d2lz>
 8006e90:	f7f9 fb8c 	bl	80005ac <__aeabi_l2d>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 f9fc 	bl	8000298 <__aeabi_dsub>
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006ea8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eae:	ea46 060a 	orr.w	r6, r6, sl
 8006eb2:	431e      	orrs	r6, r3
 8006eb4:	d06f      	beq.n	8006f96 <_strtod_l+0xb86>
 8006eb6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ef0 <_strtod_l+0xae0>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 fe16 	bl	8000aec <__aeabi_dcmplt>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f47f acd3 	bne.w	800686c <_strtod_l+0x45c>
 8006ec6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006ef8 <_strtod_l+0xae8>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed0:	f7f9 fe2a 	bl	8000b28 <__aeabi_dcmpgt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d093      	beq.n	8006e00 <_strtod_l+0x9f0>
 8006ed8:	e4c8      	b.n	800686c <_strtod_l+0x45c>
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	bff00000 	.word	0xbff00000
 8006ee8:	00000000 	.word	0x00000000
 8006eec:	3ff00000 	.word	0x3ff00000
 8006ef0:	94a03595 	.word	0x94a03595
 8006ef4:	3fdfffff 	.word	0x3fdfffff
 8006ef8:	35afe535 	.word	0x35afe535
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	000fffff 	.word	0x000fffff
 8006f04:	7ff00000 	.word	0x7ff00000
 8006f08:	7fefffff 	.word	0x7fefffff
 8006f0c:	3ff00000 	.word	0x3ff00000
 8006f10:	3fe00000 	.word	0x3fe00000
 8006f14:	7fe00000 	.word	0x7fe00000
 8006f18:	7c9fffff 	.word	0x7c9fffff
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	b323      	cbz	r3, 8006f6a <_strtod_l+0xb5a>
 8006f20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006f24:	d821      	bhi.n	8006f6a <_strtod_l+0xb5a>
 8006f26:	a328      	add	r3, pc, #160	@ (adr r3, 8006fc8 <_strtod_l+0xbb8>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 fde6 	bl	8000b00 <__aeabi_dcmple>
 8006f34:	b1a0      	cbz	r0, 8006f60 <_strtod_l+0xb50>
 8006f36:	4639      	mov	r1, r7
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7f9 fe27 	bl	8000b8c <__aeabi_d2uiz>
 8006f3e:	2801      	cmp	r0, #1
 8006f40:	bf38      	it	cc
 8006f42:	2001      	movcc	r0, #1
 8006f44:	f7f9 fae6 	bl	8000514 <__aeabi_ui2d>
 8006f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	b9fb      	cbnz	r3, 8006f90 <_strtod_l+0xb80>
 8006f50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f54:	9014      	str	r0, [sp, #80]	@ 0x50
 8006f56:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006f5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006f66:	1b5b      	subs	r3, r3, r5
 8006f68:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006f72:	f001 fa23 	bl	80083bc <__ulp>
 8006f76:	4650      	mov	r0, sl
 8006f78:	ec53 2b10 	vmov	r2, r3, d0
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f86:	f7f9 f989 	bl	800029c <__adddf3>
 8006f8a:	4682      	mov	sl, r0
 8006f8c:	468b      	mov	fp, r1
 8006f8e:	e770      	b.n	8006e72 <_strtod_l+0xa62>
 8006f90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006f94:	e7e0      	b.n	8006f58 <_strtod_l+0xb48>
 8006f96:	a30e      	add	r3, pc, #56	@ (adr r3, 8006fd0 <_strtod_l+0xbc0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fda6 	bl	8000aec <__aeabi_dcmplt>
 8006fa0:	e798      	b.n	8006ed4 <_strtod_l+0xac4>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	930e      	str	r3, [sp, #56]	@ 0x38
 8006fa6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006fa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	f7ff ba6d 	b.w	800648a <_strtod_l+0x7a>
 8006fb0:	2a65      	cmp	r2, #101	@ 0x65
 8006fb2:	f43f ab68 	beq.w	8006686 <_strtod_l+0x276>
 8006fb6:	2a45      	cmp	r2, #69	@ 0x45
 8006fb8:	f43f ab65 	beq.w	8006686 <_strtod_l+0x276>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f7ff bba0 	b.w	8006702 <_strtod_l+0x2f2>
 8006fc2:	bf00      	nop
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	ffc00000 	.word	0xffc00000
 8006fcc:	41dfffff 	.word	0x41dfffff
 8006fd0:	94a03595 	.word	0x94a03595
 8006fd4:	3fcfffff 	.word	0x3fcfffff

08006fd8 <strtod>:
 8006fd8:	460a      	mov	r2, r1
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4802      	ldr	r0, [pc, #8]	@ (8006fe8 <strtod+0x10>)
 8006fde:	4b03      	ldr	r3, [pc, #12]	@ (8006fec <strtod+0x14>)
 8006fe0:	6800      	ldr	r0, [r0, #0]
 8006fe2:	f7ff ba15 	b.w	8006410 <_strtod_l>
 8006fe6:	bf00      	nop
 8006fe8:	20000274 	.word	0x20000274
 8006fec:	20000108 	.word	0x20000108

08006ff0 <_strtol_l.isra.0>:
 8006ff0:	2b24      	cmp	r3, #36	@ 0x24
 8006ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff6:	4686      	mov	lr, r0
 8006ff8:	4690      	mov	r8, r2
 8006ffa:	d801      	bhi.n	8007000 <_strtol_l.isra.0+0x10>
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d106      	bne.n	800700e <_strtol_l.isra.0+0x1e>
 8007000:	f000 f9e0 	bl	80073c4 <__errno>
 8007004:	2316      	movs	r3, #22
 8007006:	6003      	str	r3, [r0, #0]
 8007008:	2000      	movs	r0, #0
 800700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700e:	4834      	ldr	r0, [pc, #208]	@ (80070e0 <_strtol_l.isra.0+0xf0>)
 8007010:	460d      	mov	r5, r1
 8007012:	462a      	mov	r2, r5
 8007014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007018:	5d06      	ldrb	r6, [r0, r4]
 800701a:	f016 0608 	ands.w	r6, r6, #8
 800701e:	d1f8      	bne.n	8007012 <_strtol_l.isra.0+0x22>
 8007020:	2c2d      	cmp	r4, #45	@ 0x2d
 8007022:	d110      	bne.n	8007046 <_strtol_l.isra.0+0x56>
 8007024:	782c      	ldrb	r4, [r5, #0]
 8007026:	2601      	movs	r6, #1
 8007028:	1c95      	adds	r5, r2, #2
 800702a:	f033 0210 	bics.w	r2, r3, #16
 800702e:	d115      	bne.n	800705c <_strtol_l.isra.0+0x6c>
 8007030:	2c30      	cmp	r4, #48	@ 0x30
 8007032:	d10d      	bne.n	8007050 <_strtol_l.isra.0+0x60>
 8007034:	782a      	ldrb	r2, [r5, #0]
 8007036:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800703a:	2a58      	cmp	r2, #88	@ 0x58
 800703c:	d108      	bne.n	8007050 <_strtol_l.isra.0+0x60>
 800703e:	786c      	ldrb	r4, [r5, #1]
 8007040:	3502      	adds	r5, #2
 8007042:	2310      	movs	r3, #16
 8007044:	e00a      	b.n	800705c <_strtol_l.isra.0+0x6c>
 8007046:	2c2b      	cmp	r4, #43	@ 0x2b
 8007048:	bf04      	itt	eq
 800704a:	782c      	ldrbeq	r4, [r5, #0]
 800704c:	1c95      	addeq	r5, r2, #2
 800704e:	e7ec      	b.n	800702a <_strtol_l.isra.0+0x3a>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1f6      	bne.n	8007042 <_strtol_l.isra.0+0x52>
 8007054:	2c30      	cmp	r4, #48	@ 0x30
 8007056:	bf14      	ite	ne
 8007058:	230a      	movne	r3, #10
 800705a:	2308      	moveq	r3, #8
 800705c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007060:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007064:	2200      	movs	r2, #0
 8007066:	fbbc f9f3 	udiv	r9, ip, r3
 800706a:	4610      	mov	r0, r2
 800706c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007070:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007074:	2f09      	cmp	r7, #9
 8007076:	d80f      	bhi.n	8007098 <_strtol_l.isra.0+0xa8>
 8007078:	463c      	mov	r4, r7
 800707a:	42a3      	cmp	r3, r4
 800707c:	dd1b      	ble.n	80070b6 <_strtol_l.isra.0+0xc6>
 800707e:	1c57      	adds	r7, r2, #1
 8007080:	d007      	beq.n	8007092 <_strtol_l.isra.0+0xa2>
 8007082:	4581      	cmp	r9, r0
 8007084:	d314      	bcc.n	80070b0 <_strtol_l.isra.0+0xc0>
 8007086:	d101      	bne.n	800708c <_strtol_l.isra.0+0x9c>
 8007088:	45a2      	cmp	sl, r4
 800708a:	db11      	blt.n	80070b0 <_strtol_l.isra.0+0xc0>
 800708c:	fb00 4003 	mla	r0, r0, r3, r4
 8007090:	2201      	movs	r2, #1
 8007092:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007096:	e7eb      	b.n	8007070 <_strtol_l.isra.0+0x80>
 8007098:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800709c:	2f19      	cmp	r7, #25
 800709e:	d801      	bhi.n	80070a4 <_strtol_l.isra.0+0xb4>
 80070a0:	3c37      	subs	r4, #55	@ 0x37
 80070a2:	e7ea      	b.n	800707a <_strtol_l.isra.0+0x8a>
 80070a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80070a8:	2f19      	cmp	r7, #25
 80070aa:	d804      	bhi.n	80070b6 <_strtol_l.isra.0+0xc6>
 80070ac:	3c57      	subs	r4, #87	@ 0x57
 80070ae:	e7e4      	b.n	800707a <_strtol_l.isra.0+0x8a>
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	e7ed      	b.n	8007092 <_strtol_l.isra.0+0xa2>
 80070b6:	1c53      	adds	r3, r2, #1
 80070b8:	d108      	bne.n	80070cc <_strtol_l.isra.0+0xdc>
 80070ba:	2322      	movs	r3, #34	@ 0x22
 80070bc:	f8ce 3000 	str.w	r3, [lr]
 80070c0:	4660      	mov	r0, ip
 80070c2:	f1b8 0f00 	cmp.w	r8, #0
 80070c6:	d0a0      	beq.n	800700a <_strtol_l.isra.0+0x1a>
 80070c8:	1e69      	subs	r1, r5, #1
 80070ca:	e006      	b.n	80070da <_strtol_l.isra.0+0xea>
 80070cc:	b106      	cbz	r6, 80070d0 <_strtol_l.isra.0+0xe0>
 80070ce:	4240      	negs	r0, r0
 80070d0:	f1b8 0f00 	cmp.w	r8, #0
 80070d4:	d099      	beq.n	800700a <_strtol_l.isra.0+0x1a>
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	d1f6      	bne.n	80070c8 <_strtol_l.isra.0+0xd8>
 80070da:	f8c8 1000 	str.w	r1, [r8]
 80070de:	e794      	b.n	800700a <_strtol_l.isra.0+0x1a>
 80070e0:	080099d9 	.word	0x080099d9

080070e4 <strtol>:
 80070e4:	4613      	mov	r3, r2
 80070e6:	460a      	mov	r2, r1
 80070e8:	4601      	mov	r1, r0
 80070ea:	4802      	ldr	r0, [pc, #8]	@ (80070f4 <strtol+0x10>)
 80070ec:	6800      	ldr	r0, [r0, #0]
 80070ee:	f7ff bf7f 	b.w	8006ff0 <_strtol_l.isra.0>
 80070f2:	bf00      	nop
 80070f4:	20000274 	.word	0x20000274

080070f8 <std>:
 80070f8:	2300      	movs	r3, #0
 80070fa:	b510      	push	{r4, lr}
 80070fc:	4604      	mov	r4, r0
 80070fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007106:	6083      	str	r3, [r0, #8]
 8007108:	8181      	strh	r1, [r0, #12]
 800710a:	6643      	str	r3, [r0, #100]	@ 0x64
 800710c:	81c2      	strh	r2, [r0, #14]
 800710e:	6183      	str	r3, [r0, #24]
 8007110:	4619      	mov	r1, r3
 8007112:	2208      	movs	r2, #8
 8007114:	305c      	adds	r0, #92	@ 0x5c
 8007116:	f000 f8f4 	bl	8007302 <memset>
 800711a:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <std+0x58>)
 800711c:	6263      	str	r3, [r4, #36]	@ 0x24
 800711e:	4b0d      	ldr	r3, [pc, #52]	@ (8007154 <std+0x5c>)
 8007120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <std+0x60>)
 8007124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007126:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <std+0x64>)
 8007128:	6323      	str	r3, [r4, #48]	@ 0x30
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <std+0x68>)
 800712c:	6224      	str	r4, [r4, #32]
 800712e:	429c      	cmp	r4, r3
 8007130:	d006      	beq.n	8007140 <std+0x48>
 8007132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007136:	4294      	cmp	r4, r2
 8007138:	d002      	beq.n	8007140 <std+0x48>
 800713a:	33d0      	adds	r3, #208	@ 0xd0
 800713c:	429c      	cmp	r4, r3
 800713e:	d105      	bne.n	800714c <std+0x54>
 8007140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007148:	f000 b966 	b.w	8007418 <__retarget_lock_init_recursive>
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	0800727d 	.word	0x0800727d
 8007154:	0800729f 	.word	0x0800729f
 8007158:	080072d7 	.word	0x080072d7
 800715c:	080072fb 	.word	0x080072fb
 8007160:	20018cd4 	.word	0x20018cd4

08007164 <stdio_exit_handler>:
 8007164:	4a02      	ldr	r2, [pc, #8]	@ (8007170 <stdio_exit_handler+0xc>)
 8007166:	4903      	ldr	r1, [pc, #12]	@ (8007174 <stdio_exit_handler+0x10>)
 8007168:	4803      	ldr	r0, [pc, #12]	@ (8007178 <stdio_exit_handler+0x14>)
 800716a:	f000 b869 	b.w	8007240 <_fwalk_sglue>
 800716e:	bf00      	nop
 8007170:	200000fc 	.word	0x200000fc
 8007174:	0800875d 	.word	0x0800875d
 8007178:	20000278 	.word	0x20000278

0800717c <cleanup_stdio>:
 800717c:	6841      	ldr	r1, [r0, #4]
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <cleanup_stdio+0x34>)
 8007180:	4299      	cmp	r1, r3
 8007182:	b510      	push	{r4, lr}
 8007184:	4604      	mov	r4, r0
 8007186:	d001      	beq.n	800718c <cleanup_stdio+0x10>
 8007188:	f001 fae8 	bl	800875c <_fflush_r>
 800718c:	68a1      	ldr	r1, [r4, #8]
 800718e:	4b09      	ldr	r3, [pc, #36]	@ (80071b4 <cleanup_stdio+0x38>)
 8007190:	4299      	cmp	r1, r3
 8007192:	d002      	beq.n	800719a <cleanup_stdio+0x1e>
 8007194:	4620      	mov	r0, r4
 8007196:	f001 fae1 	bl	800875c <_fflush_r>
 800719a:	68e1      	ldr	r1, [r4, #12]
 800719c:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <cleanup_stdio+0x3c>)
 800719e:	4299      	cmp	r1, r3
 80071a0:	d004      	beq.n	80071ac <cleanup_stdio+0x30>
 80071a2:	4620      	mov	r0, r4
 80071a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a8:	f001 bad8 	b.w	800875c <_fflush_r>
 80071ac:	bd10      	pop	{r4, pc}
 80071ae:	bf00      	nop
 80071b0:	20018cd4 	.word	0x20018cd4
 80071b4:	20018d3c 	.word	0x20018d3c
 80071b8:	20018da4 	.word	0x20018da4

080071bc <global_stdio_init.part.0>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <global_stdio_init.part.0+0x30>)
 80071c0:	4c0b      	ldr	r4, [pc, #44]	@ (80071f0 <global_stdio_init.part.0+0x34>)
 80071c2:	4a0c      	ldr	r2, [pc, #48]	@ (80071f4 <global_stdio_init.part.0+0x38>)
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	4620      	mov	r0, r4
 80071c8:	2200      	movs	r2, #0
 80071ca:	2104      	movs	r1, #4
 80071cc:	f7ff ff94 	bl	80070f8 <std>
 80071d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071d4:	2201      	movs	r2, #1
 80071d6:	2109      	movs	r1, #9
 80071d8:	f7ff ff8e 	bl	80070f8 <std>
 80071dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071e0:	2202      	movs	r2, #2
 80071e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e6:	2112      	movs	r1, #18
 80071e8:	f7ff bf86 	b.w	80070f8 <std>
 80071ec:	20018e0c 	.word	0x20018e0c
 80071f0:	20018cd4 	.word	0x20018cd4
 80071f4:	08007165 	.word	0x08007165

080071f8 <__sfp_lock_acquire>:
 80071f8:	4801      	ldr	r0, [pc, #4]	@ (8007200 <__sfp_lock_acquire+0x8>)
 80071fa:	f000 b90e 	b.w	800741a <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	20018e15 	.word	0x20018e15

08007204 <__sfp_lock_release>:
 8007204:	4801      	ldr	r0, [pc, #4]	@ (800720c <__sfp_lock_release+0x8>)
 8007206:	f000 b909 	b.w	800741c <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	20018e15 	.word	0x20018e15

08007210 <__sinit>:
 8007210:	b510      	push	{r4, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	f7ff fff0 	bl	80071f8 <__sfp_lock_acquire>
 8007218:	6a23      	ldr	r3, [r4, #32]
 800721a:	b11b      	cbz	r3, 8007224 <__sinit+0x14>
 800721c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007220:	f7ff bff0 	b.w	8007204 <__sfp_lock_release>
 8007224:	4b04      	ldr	r3, [pc, #16]	@ (8007238 <__sinit+0x28>)
 8007226:	6223      	str	r3, [r4, #32]
 8007228:	4b04      	ldr	r3, [pc, #16]	@ (800723c <__sinit+0x2c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f5      	bne.n	800721c <__sinit+0xc>
 8007230:	f7ff ffc4 	bl	80071bc <global_stdio_init.part.0>
 8007234:	e7f2      	b.n	800721c <__sinit+0xc>
 8007236:	bf00      	nop
 8007238:	0800717d 	.word	0x0800717d
 800723c:	20018e0c 	.word	0x20018e0c

08007240 <_fwalk_sglue>:
 8007240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007244:	4607      	mov	r7, r0
 8007246:	4688      	mov	r8, r1
 8007248:	4614      	mov	r4, r2
 800724a:	2600      	movs	r6, #0
 800724c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007250:	f1b9 0901 	subs.w	r9, r9, #1
 8007254:	d505      	bpl.n	8007262 <_fwalk_sglue+0x22>
 8007256:	6824      	ldr	r4, [r4, #0]
 8007258:	2c00      	cmp	r4, #0
 800725a:	d1f7      	bne.n	800724c <_fwalk_sglue+0xc>
 800725c:	4630      	mov	r0, r6
 800725e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d907      	bls.n	8007278 <_fwalk_sglue+0x38>
 8007268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800726c:	3301      	adds	r3, #1
 800726e:	d003      	beq.n	8007278 <_fwalk_sglue+0x38>
 8007270:	4629      	mov	r1, r5
 8007272:	4638      	mov	r0, r7
 8007274:	47c0      	blx	r8
 8007276:	4306      	orrs	r6, r0
 8007278:	3568      	adds	r5, #104	@ 0x68
 800727a:	e7e9      	b.n	8007250 <_fwalk_sglue+0x10>

0800727c <__sread>:
 800727c:	b510      	push	{r4, lr}
 800727e:	460c      	mov	r4, r1
 8007280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007284:	f000 f87a 	bl	800737c <_read_r>
 8007288:	2800      	cmp	r0, #0
 800728a:	bfab      	itete	ge
 800728c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800728e:	89a3      	ldrhlt	r3, [r4, #12]
 8007290:	181b      	addge	r3, r3, r0
 8007292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007296:	bfac      	ite	ge
 8007298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800729a:	81a3      	strhlt	r3, [r4, #12]
 800729c:	bd10      	pop	{r4, pc}

0800729e <__swrite>:
 800729e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a2:	461f      	mov	r7, r3
 80072a4:	898b      	ldrh	r3, [r1, #12]
 80072a6:	05db      	lsls	r3, r3, #23
 80072a8:	4605      	mov	r5, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	4616      	mov	r6, r2
 80072ae:	d505      	bpl.n	80072bc <__swrite+0x1e>
 80072b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b4:	2302      	movs	r3, #2
 80072b6:	2200      	movs	r2, #0
 80072b8:	f000 f84e 	bl	8007358 <_lseek_r>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	4632      	mov	r2, r6
 80072ca:	463b      	mov	r3, r7
 80072cc:	4628      	mov	r0, r5
 80072ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d2:	f000 b865 	b.w	80073a0 <_write_r>

080072d6 <__sseek>:
 80072d6:	b510      	push	{r4, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072de:	f000 f83b 	bl	8007358 <_lseek_r>
 80072e2:	1c43      	adds	r3, r0, #1
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	bf15      	itete	ne
 80072e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072f2:	81a3      	strheq	r3, [r4, #12]
 80072f4:	bf18      	it	ne
 80072f6:	81a3      	strhne	r3, [r4, #12]
 80072f8:	bd10      	pop	{r4, pc}

080072fa <__sclose>:
 80072fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fe:	f000 b81b 	b.w	8007338 <_close_r>

08007302 <memset>:
 8007302:	4402      	add	r2, r0
 8007304:	4603      	mov	r3, r0
 8007306:	4293      	cmp	r3, r2
 8007308:	d100      	bne.n	800730c <memset+0xa>
 800730a:	4770      	bx	lr
 800730c:	f803 1b01 	strb.w	r1, [r3], #1
 8007310:	e7f9      	b.n	8007306 <memset+0x4>

08007312 <strncmp>:
 8007312:	b510      	push	{r4, lr}
 8007314:	b16a      	cbz	r2, 8007332 <strncmp+0x20>
 8007316:	3901      	subs	r1, #1
 8007318:	1884      	adds	r4, r0, r2
 800731a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800731e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007322:	429a      	cmp	r2, r3
 8007324:	d103      	bne.n	800732e <strncmp+0x1c>
 8007326:	42a0      	cmp	r0, r4
 8007328:	d001      	beq.n	800732e <strncmp+0x1c>
 800732a:	2a00      	cmp	r2, #0
 800732c:	d1f5      	bne.n	800731a <strncmp+0x8>
 800732e:	1ad0      	subs	r0, r2, r3
 8007330:	bd10      	pop	{r4, pc}
 8007332:	4610      	mov	r0, r2
 8007334:	e7fc      	b.n	8007330 <strncmp+0x1e>
	...

08007338 <_close_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	@ (8007354 <_close_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fb f871 	bl	800242a <_close>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_close_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_close_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20018e10 	.word	0x20018e10

08007358 <_lseek_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	@ (8007378 <_lseek_r+0x20>)
 800735c:	4604      	mov	r4, r0
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	2200      	movs	r2, #0
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	f7fb f886 	bl	8002478 <_lseek>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_lseek_r+0x1e>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_lseek_r+0x1e>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	20018e10 	.word	0x20018e10

0800737c <_read_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d07      	ldr	r5, [pc, #28]	@ (800739c <_read_r+0x20>)
 8007380:	4604      	mov	r4, r0
 8007382:	4608      	mov	r0, r1
 8007384:	4611      	mov	r1, r2
 8007386:	2200      	movs	r2, #0
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f7fb f814 	bl	80023b8 <_read>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_read_r+0x1e>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_read_r+0x1e>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20018e10 	.word	0x20018e10

080073a0 <_write_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d07      	ldr	r5, [pc, #28]	@ (80073c0 <_write_r+0x20>)
 80073a4:	4604      	mov	r4, r0
 80073a6:	4608      	mov	r0, r1
 80073a8:	4611      	mov	r1, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	602a      	str	r2, [r5, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f7fb f81f 	bl	80023f2 <_write>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_write_r+0x1e>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_write_r+0x1e>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20018e10 	.word	0x20018e10

080073c4 <__errno>:
 80073c4:	4b01      	ldr	r3, [pc, #4]	@ (80073cc <__errno+0x8>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000274 	.word	0x20000274

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	@ (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007414 <__libc_init_array+0x44>)
 80073e4:	f001 ff8e 	bl	8009304 <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	08009be0 	.word	0x08009be0
 800740c:	08009be0 	.word	0x08009be0
 8007410:	08009be0 	.word	0x08009be0
 8007414:	08009be4 	.word	0x08009be4

08007418 <__retarget_lock_init_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_acquire_recursive>:
 800741a:	4770      	bx	lr

0800741c <__retarget_lock_release_recursive>:
 800741c:	4770      	bx	lr

0800741e <memcpy>:
 800741e:	440a      	add	r2, r1
 8007420:	4291      	cmp	r1, r2
 8007422:	f100 33ff 	add.w	r3, r0, #4294967295
 8007426:	d100      	bne.n	800742a <memcpy+0xc>
 8007428:	4770      	bx	lr
 800742a:	b510      	push	{r4, lr}
 800742c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007434:	4291      	cmp	r1, r2
 8007436:	d1f9      	bne.n	800742c <memcpy+0xe>
 8007438:	bd10      	pop	{r4, pc}
 800743a:	0000      	movs	r0, r0
 800743c:	0000      	movs	r0, r0
	...

08007440 <nan>:
 8007440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007448 <nan+0x8>
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	00000000 	.word	0x00000000
 800744c:	7ff80000 	.word	0x7ff80000

08007450 <nanf>:
 8007450:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007458 <nanf+0x8>
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	7fc00000 	.word	0x7fc00000

0800745c <_free_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4605      	mov	r5, r0
 8007460:	2900      	cmp	r1, #0
 8007462:	d041      	beq.n	80074e8 <_free_r+0x8c>
 8007464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007468:	1f0c      	subs	r4, r1, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	bfb8      	it	lt
 800746e:	18e4      	addlt	r4, r4, r3
 8007470:	f000 fc2c 	bl	8007ccc <__malloc_lock>
 8007474:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <_free_r+0x90>)
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	b933      	cbnz	r3, 8007488 <_free_r+0x2c>
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	6014      	str	r4, [r2, #0]
 800747e:	4628      	mov	r0, r5
 8007480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007484:	f000 bc28 	b.w	8007cd8 <__malloc_unlock>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d908      	bls.n	800749e <_free_r+0x42>
 800748c:	6820      	ldr	r0, [r4, #0]
 800748e:	1821      	adds	r1, r4, r0
 8007490:	428b      	cmp	r3, r1
 8007492:	bf01      	itttt	eq
 8007494:	6819      	ldreq	r1, [r3, #0]
 8007496:	685b      	ldreq	r3, [r3, #4]
 8007498:	1809      	addeq	r1, r1, r0
 800749a:	6021      	streq	r1, [r4, #0]
 800749c:	e7ed      	b.n	800747a <_free_r+0x1e>
 800749e:	461a      	mov	r2, r3
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b10b      	cbz	r3, 80074a8 <_free_r+0x4c>
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d9fa      	bls.n	800749e <_free_r+0x42>
 80074a8:	6811      	ldr	r1, [r2, #0]
 80074aa:	1850      	adds	r0, r2, r1
 80074ac:	42a0      	cmp	r0, r4
 80074ae:	d10b      	bne.n	80074c8 <_free_r+0x6c>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	4401      	add	r1, r0
 80074b4:	1850      	adds	r0, r2, r1
 80074b6:	4283      	cmp	r3, r0
 80074b8:	6011      	str	r1, [r2, #0]
 80074ba:	d1e0      	bne.n	800747e <_free_r+0x22>
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	6053      	str	r3, [r2, #4]
 80074c2:	4408      	add	r0, r1
 80074c4:	6010      	str	r0, [r2, #0]
 80074c6:	e7da      	b.n	800747e <_free_r+0x22>
 80074c8:	d902      	bls.n	80074d0 <_free_r+0x74>
 80074ca:	230c      	movs	r3, #12
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	e7d6      	b.n	800747e <_free_r+0x22>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	1821      	adds	r1, r4, r0
 80074d4:	428b      	cmp	r3, r1
 80074d6:	bf04      	itt	eq
 80074d8:	6819      	ldreq	r1, [r3, #0]
 80074da:	685b      	ldreq	r3, [r3, #4]
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	bf04      	itt	eq
 80074e0:	1809      	addeq	r1, r1, r0
 80074e2:	6021      	streq	r1, [r4, #0]
 80074e4:	6054      	str	r4, [r2, #4]
 80074e6:	e7ca      	b.n	800747e <_free_r+0x22>
 80074e8:	bd38      	pop	{r3, r4, r5, pc}
 80074ea:	bf00      	nop
 80074ec:	20018e1c 	.word	0x20018e1c

080074f0 <rshift>:
 80074f0:	6903      	ldr	r3, [r0, #16]
 80074f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074fe:	f100 0414 	add.w	r4, r0, #20
 8007502:	dd45      	ble.n	8007590 <rshift+0xa0>
 8007504:	f011 011f 	ands.w	r1, r1, #31
 8007508:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800750c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007510:	d10c      	bne.n	800752c <rshift+0x3c>
 8007512:	f100 0710 	add.w	r7, r0, #16
 8007516:	4629      	mov	r1, r5
 8007518:	42b1      	cmp	r1, r6
 800751a:	d334      	bcc.n	8007586 <rshift+0x96>
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	1eea      	subs	r2, r5, #3
 8007522:	4296      	cmp	r6, r2
 8007524:	bf38      	it	cc
 8007526:	2300      	movcc	r3, #0
 8007528:	4423      	add	r3, r4
 800752a:	e015      	b.n	8007558 <rshift+0x68>
 800752c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007530:	f1c1 0820 	rsb	r8, r1, #32
 8007534:	40cf      	lsrs	r7, r1
 8007536:	f105 0e04 	add.w	lr, r5, #4
 800753a:	46a1      	mov	r9, r4
 800753c:	4576      	cmp	r6, lr
 800753e:	46f4      	mov	ip, lr
 8007540:	d815      	bhi.n	800756e <rshift+0x7e>
 8007542:	1a9a      	subs	r2, r3, r2
 8007544:	0092      	lsls	r2, r2, #2
 8007546:	3a04      	subs	r2, #4
 8007548:	3501      	adds	r5, #1
 800754a:	42ae      	cmp	r6, r5
 800754c:	bf38      	it	cc
 800754e:	2200      	movcc	r2, #0
 8007550:	18a3      	adds	r3, r4, r2
 8007552:	50a7      	str	r7, [r4, r2]
 8007554:	b107      	cbz	r7, 8007558 <rshift+0x68>
 8007556:	3304      	adds	r3, #4
 8007558:	1b1a      	subs	r2, r3, r4
 800755a:	42a3      	cmp	r3, r4
 800755c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007560:	bf08      	it	eq
 8007562:	2300      	moveq	r3, #0
 8007564:	6102      	str	r2, [r0, #16]
 8007566:	bf08      	it	eq
 8007568:	6143      	streq	r3, [r0, #20]
 800756a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800756e:	f8dc c000 	ldr.w	ip, [ip]
 8007572:	fa0c fc08 	lsl.w	ip, ip, r8
 8007576:	ea4c 0707 	orr.w	r7, ip, r7
 800757a:	f849 7b04 	str.w	r7, [r9], #4
 800757e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007582:	40cf      	lsrs	r7, r1
 8007584:	e7da      	b.n	800753c <rshift+0x4c>
 8007586:	f851 cb04 	ldr.w	ip, [r1], #4
 800758a:	f847 cf04 	str.w	ip, [r7, #4]!
 800758e:	e7c3      	b.n	8007518 <rshift+0x28>
 8007590:	4623      	mov	r3, r4
 8007592:	e7e1      	b.n	8007558 <rshift+0x68>

08007594 <__hexdig_fun>:
 8007594:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007598:	2b09      	cmp	r3, #9
 800759a:	d802      	bhi.n	80075a2 <__hexdig_fun+0xe>
 800759c:	3820      	subs	r0, #32
 800759e:	b2c0      	uxtb	r0, r0
 80075a0:	4770      	bx	lr
 80075a2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	d801      	bhi.n	80075ae <__hexdig_fun+0x1a>
 80075aa:	3847      	subs	r0, #71	@ 0x47
 80075ac:	e7f7      	b.n	800759e <__hexdig_fun+0xa>
 80075ae:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d801      	bhi.n	80075ba <__hexdig_fun+0x26>
 80075b6:	3827      	subs	r0, #39	@ 0x27
 80075b8:	e7f1      	b.n	800759e <__hexdig_fun+0xa>
 80075ba:	2000      	movs	r0, #0
 80075bc:	4770      	bx	lr
	...

080075c0 <__gethex>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	b085      	sub	sp, #20
 80075c6:	468a      	mov	sl, r1
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	9001      	str	r0, [sp, #4]
 80075ce:	4690      	mov	r8, r2
 80075d0:	1c9c      	adds	r4, r3, #2
 80075d2:	46a1      	mov	r9, r4
 80075d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80075d8:	2830      	cmp	r0, #48	@ 0x30
 80075da:	d0fa      	beq.n	80075d2 <__gethex+0x12>
 80075dc:	eba9 0303 	sub.w	r3, r9, r3
 80075e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80075e4:	f7ff ffd6 	bl	8007594 <__hexdig_fun>
 80075e8:	4605      	mov	r5, r0
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d168      	bne.n	80076c0 <__gethex+0x100>
 80075ee:	49a0      	ldr	r1, [pc, #640]	@ (8007870 <__gethex+0x2b0>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	4648      	mov	r0, r9
 80075f4:	f7ff fe8d 	bl	8007312 <strncmp>
 80075f8:	4607      	mov	r7, r0
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d167      	bne.n	80076ce <__gethex+0x10e>
 80075fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007602:	4626      	mov	r6, r4
 8007604:	f7ff ffc6 	bl	8007594 <__hexdig_fun>
 8007608:	2800      	cmp	r0, #0
 800760a:	d062      	beq.n	80076d2 <__gethex+0x112>
 800760c:	4623      	mov	r3, r4
 800760e:	7818      	ldrb	r0, [r3, #0]
 8007610:	2830      	cmp	r0, #48	@ 0x30
 8007612:	4699      	mov	r9, r3
 8007614:	f103 0301 	add.w	r3, r3, #1
 8007618:	d0f9      	beq.n	800760e <__gethex+0x4e>
 800761a:	f7ff ffbb 	bl	8007594 <__hexdig_fun>
 800761e:	fab0 f580 	clz	r5, r0
 8007622:	096d      	lsrs	r5, r5, #5
 8007624:	f04f 0b01 	mov.w	fp, #1
 8007628:	464a      	mov	r2, r9
 800762a:	4616      	mov	r6, r2
 800762c:	3201      	adds	r2, #1
 800762e:	7830      	ldrb	r0, [r6, #0]
 8007630:	f7ff ffb0 	bl	8007594 <__hexdig_fun>
 8007634:	2800      	cmp	r0, #0
 8007636:	d1f8      	bne.n	800762a <__gethex+0x6a>
 8007638:	498d      	ldr	r1, [pc, #564]	@ (8007870 <__gethex+0x2b0>)
 800763a:	2201      	movs	r2, #1
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff fe68 	bl	8007312 <strncmp>
 8007642:	2800      	cmp	r0, #0
 8007644:	d13f      	bne.n	80076c6 <__gethex+0x106>
 8007646:	b944      	cbnz	r4, 800765a <__gethex+0x9a>
 8007648:	1c74      	adds	r4, r6, #1
 800764a:	4622      	mov	r2, r4
 800764c:	4616      	mov	r6, r2
 800764e:	3201      	adds	r2, #1
 8007650:	7830      	ldrb	r0, [r6, #0]
 8007652:	f7ff ff9f 	bl	8007594 <__hexdig_fun>
 8007656:	2800      	cmp	r0, #0
 8007658:	d1f8      	bne.n	800764c <__gethex+0x8c>
 800765a:	1ba4      	subs	r4, r4, r6
 800765c:	00a7      	lsls	r7, r4, #2
 800765e:	7833      	ldrb	r3, [r6, #0]
 8007660:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007664:	2b50      	cmp	r3, #80	@ 0x50
 8007666:	d13e      	bne.n	80076e6 <__gethex+0x126>
 8007668:	7873      	ldrb	r3, [r6, #1]
 800766a:	2b2b      	cmp	r3, #43	@ 0x2b
 800766c:	d033      	beq.n	80076d6 <__gethex+0x116>
 800766e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007670:	d034      	beq.n	80076dc <__gethex+0x11c>
 8007672:	1c71      	adds	r1, r6, #1
 8007674:	2400      	movs	r4, #0
 8007676:	7808      	ldrb	r0, [r1, #0]
 8007678:	f7ff ff8c 	bl	8007594 <__hexdig_fun>
 800767c:	1e43      	subs	r3, r0, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b18      	cmp	r3, #24
 8007682:	d830      	bhi.n	80076e6 <__gethex+0x126>
 8007684:	f1a0 0210 	sub.w	r2, r0, #16
 8007688:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800768c:	f7ff ff82 	bl	8007594 <__hexdig_fun>
 8007690:	f100 3cff 	add.w	ip, r0, #4294967295
 8007694:	fa5f fc8c 	uxtb.w	ip, ip
 8007698:	f1bc 0f18 	cmp.w	ip, #24
 800769c:	f04f 030a 	mov.w	r3, #10
 80076a0:	d91e      	bls.n	80076e0 <__gethex+0x120>
 80076a2:	b104      	cbz	r4, 80076a6 <__gethex+0xe6>
 80076a4:	4252      	negs	r2, r2
 80076a6:	4417      	add	r7, r2
 80076a8:	f8ca 1000 	str.w	r1, [sl]
 80076ac:	b1ed      	cbz	r5, 80076ea <__gethex+0x12a>
 80076ae:	f1bb 0f00 	cmp.w	fp, #0
 80076b2:	bf0c      	ite	eq
 80076b4:	2506      	moveq	r5, #6
 80076b6:	2500      	movne	r5, #0
 80076b8:	4628      	mov	r0, r5
 80076ba:	b005      	add	sp, #20
 80076bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c0:	2500      	movs	r5, #0
 80076c2:	462c      	mov	r4, r5
 80076c4:	e7b0      	b.n	8007628 <__gethex+0x68>
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	d1c7      	bne.n	800765a <__gethex+0x9a>
 80076ca:	4627      	mov	r7, r4
 80076cc:	e7c7      	b.n	800765e <__gethex+0x9e>
 80076ce:	464e      	mov	r6, r9
 80076d0:	462f      	mov	r7, r5
 80076d2:	2501      	movs	r5, #1
 80076d4:	e7c3      	b.n	800765e <__gethex+0x9e>
 80076d6:	2400      	movs	r4, #0
 80076d8:	1cb1      	adds	r1, r6, #2
 80076da:	e7cc      	b.n	8007676 <__gethex+0xb6>
 80076dc:	2401      	movs	r4, #1
 80076de:	e7fb      	b.n	80076d8 <__gethex+0x118>
 80076e0:	fb03 0002 	mla	r0, r3, r2, r0
 80076e4:	e7ce      	b.n	8007684 <__gethex+0xc4>
 80076e6:	4631      	mov	r1, r6
 80076e8:	e7de      	b.n	80076a8 <__gethex+0xe8>
 80076ea:	eba6 0309 	sub.w	r3, r6, r9
 80076ee:	3b01      	subs	r3, #1
 80076f0:	4629      	mov	r1, r5
 80076f2:	2b07      	cmp	r3, #7
 80076f4:	dc0a      	bgt.n	800770c <__gethex+0x14c>
 80076f6:	9801      	ldr	r0, [sp, #4]
 80076f8:	f000 faf4 	bl	8007ce4 <_Balloc>
 80076fc:	4604      	mov	r4, r0
 80076fe:	b940      	cbnz	r0, 8007712 <__gethex+0x152>
 8007700:	4b5c      	ldr	r3, [pc, #368]	@ (8007874 <__gethex+0x2b4>)
 8007702:	4602      	mov	r2, r0
 8007704:	21e4      	movs	r1, #228	@ 0xe4
 8007706:	485c      	ldr	r0, [pc, #368]	@ (8007878 <__gethex+0x2b8>)
 8007708:	f001 f860 	bl	80087cc <__assert_func>
 800770c:	3101      	adds	r1, #1
 800770e:	105b      	asrs	r3, r3, #1
 8007710:	e7ef      	b.n	80076f2 <__gethex+0x132>
 8007712:	f100 0a14 	add.w	sl, r0, #20
 8007716:	2300      	movs	r3, #0
 8007718:	4655      	mov	r5, sl
 800771a:	469b      	mov	fp, r3
 800771c:	45b1      	cmp	r9, r6
 800771e:	d337      	bcc.n	8007790 <__gethex+0x1d0>
 8007720:	f845 bb04 	str.w	fp, [r5], #4
 8007724:	eba5 050a 	sub.w	r5, r5, sl
 8007728:	10ad      	asrs	r5, r5, #2
 800772a:	6125      	str	r5, [r4, #16]
 800772c:	4658      	mov	r0, fp
 800772e:	f000 fbcb 	bl	8007ec8 <__hi0bits>
 8007732:	016d      	lsls	r5, r5, #5
 8007734:	f8d8 6000 	ldr.w	r6, [r8]
 8007738:	1a2d      	subs	r5, r5, r0
 800773a:	42b5      	cmp	r5, r6
 800773c:	dd54      	ble.n	80077e8 <__gethex+0x228>
 800773e:	1bad      	subs	r5, r5, r6
 8007740:	4629      	mov	r1, r5
 8007742:	4620      	mov	r0, r4
 8007744:	f000 ff57 	bl	80085f6 <__any_on>
 8007748:	4681      	mov	r9, r0
 800774a:	b178      	cbz	r0, 800776c <__gethex+0x1ac>
 800774c:	1e6b      	subs	r3, r5, #1
 800774e:	1159      	asrs	r1, r3, #5
 8007750:	f003 021f 	and.w	r2, r3, #31
 8007754:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007758:	f04f 0901 	mov.w	r9, #1
 800775c:	fa09 f202 	lsl.w	r2, r9, r2
 8007760:	420a      	tst	r2, r1
 8007762:	d003      	beq.n	800776c <__gethex+0x1ac>
 8007764:	454b      	cmp	r3, r9
 8007766:	dc36      	bgt.n	80077d6 <__gethex+0x216>
 8007768:	f04f 0902 	mov.w	r9, #2
 800776c:	4629      	mov	r1, r5
 800776e:	4620      	mov	r0, r4
 8007770:	f7ff febe 	bl	80074f0 <rshift>
 8007774:	442f      	add	r7, r5
 8007776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800777a:	42bb      	cmp	r3, r7
 800777c:	da42      	bge.n	8007804 <__gethex+0x244>
 800777e:	9801      	ldr	r0, [sp, #4]
 8007780:	4621      	mov	r1, r4
 8007782:	f000 faef 	bl	8007d64 <_Bfree>
 8007786:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007788:	2300      	movs	r3, #0
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	25a3      	movs	r5, #163	@ 0xa3
 800778e:	e793      	b.n	80076b8 <__gethex+0xf8>
 8007790:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007794:	2a2e      	cmp	r2, #46	@ 0x2e
 8007796:	d012      	beq.n	80077be <__gethex+0x1fe>
 8007798:	2b20      	cmp	r3, #32
 800779a:	d104      	bne.n	80077a6 <__gethex+0x1e6>
 800779c:	f845 bb04 	str.w	fp, [r5], #4
 80077a0:	f04f 0b00 	mov.w	fp, #0
 80077a4:	465b      	mov	r3, fp
 80077a6:	7830      	ldrb	r0, [r6, #0]
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	f7ff fef3 	bl	8007594 <__hexdig_fun>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	f000 000f 	and.w	r0, r0, #15
 80077b4:	4098      	lsls	r0, r3
 80077b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80077ba:	3304      	adds	r3, #4
 80077bc:	e7ae      	b.n	800771c <__gethex+0x15c>
 80077be:	45b1      	cmp	r9, r6
 80077c0:	d8ea      	bhi.n	8007798 <__gethex+0x1d8>
 80077c2:	492b      	ldr	r1, [pc, #172]	@ (8007870 <__gethex+0x2b0>)
 80077c4:	9303      	str	r3, [sp, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7ff fda2 	bl	8007312 <strncmp>
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d1e1      	bne.n	8007798 <__gethex+0x1d8>
 80077d4:	e7a2      	b.n	800771c <__gethex+0x15c>
 80077d6:	1ea9      	subs	r1, r5, #2
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 ff0c 	bl	80085f6 <__any_on>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d0c2      	beq.n	8007768 <__gethex+0x1a8>
 80077e2:	f04f 0903 	mov.w	r9, #3
 80077e6:	e7c1      	b.n	800776c <__gethex+0x1ac>
 80077e8:	da09      	bge.n	80077fe <__gethex+0x23e>
 80077ea:	1b75      	subs	r5, r6, r5
 80077ec:	4621      	mov	r1, r4
 80077ee:	9801      	ldr	r0, [sp, #4]
 80077f0:	462a      	mov	r2, r5
 80077f2:	f000 fcc7 	bl	8008184 <__lshift>
 80077f6:	1b7f      	subs	r7, r7, r5
 80077f8:	4604      	mov	r4, r0
 80077fa:	f100 0a14 	add.w	sl, r0, #20
 80077fe:	f04f 0900 	mov.w	r9, #0
 8007802:	e7b8      	b.n	8007776 <__gethex+0x1b6>
 8007804:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007808:	42bd      	cmp	r5, r7
 800780a:	dd6f      	ble.n	80078ec <__gethex+0x32c>
 800780c:	1bed      	subs	r5, r5, r7
 800780e:	42ae      	cmp	r6, r5
 8007810:	dc34      	bgt.n	800787c <__gethex+0x2bc>
 8007812:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d022      	beq.n	8007860 <__gethex+0x2a0>
 800781a:	2b03      	cmp	r3, #3
 800781c:	d024      	beq.n	8007868 <__gethex+0x2a8>
 800781e:	2b01      	cmp	r3, #1
 8007820:	d115      	bne.n	800784e <__gethex+0x28e>
 8007822:	42ae      	cmp	r6, r5
 8007824:	d113      	bne.n	800784e <__gethex+0x28e>
 8007826:	2e01      	cmp	r6, #1
 8007828:	d10b      	bne.n	8007842 <__gethex+0x282>
 800782a:	9a02      	ldr	r2, [sp, #8]
 800782c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	2301      	movs	r3, #1
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	f8ca 3000 	str.w	r3, [sl]
 800783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783c:	2562      	movs	r5, #98	@ 0x62
 800783e:	601c      	str	r4, [r3, #0]
 8007840:	e73a      	b.n	80076b8 <__gethex+0xf8>
 8007842:	1e71      	subs	r1, r6, #1
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fed6 	bl	80085f6 <__any_on>
 800784a:	2800      	cmp	r0, #0
 800784c:	d1ed      	bne.n	800782a <__gethex+0x26a>
 800784e:	9801      	ldr	r0, [sp, #4]
 8007850:	4621      	mov	r1, r4
 8007852:	f000 fa87 	bl	8007d64 <_Bfree>
 8007856:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007858:	2300      	movs	r3, #0
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	2550      	movs	r5, #80	@ 0x50
 800785e:	e72b      	b.n	80076b8 <__gethex+0xf8>
 8007860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f3      	bne.n	800784e <__gethex+0x28e>
 8007866:	e7e0      	b.n	800782a <__gethex+0x26a>
 8007868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1dd      	bne.n	800782a <__gethex+0x26a>
 800786e:	e7ee      	b.n	800784e <__gethex+0x28e>
 8007870:	08009820 	.word	0x08009820
 8007874:	08009836 	.word	0x08009836
 8007878:	08009847 	.word	0x08009847
 800787c:	1e6f      	subs	r7, r5, #1
 800787e:	f1b9 0f00 	cmp.w	r9, #0
 8007882:	d130      	bne.n	80078e6 <__gethex+0x326>
 8007884:	b127      	cbz	r7, 8007890 <__gethex+0x2d0>
 8007886:	4639      	mov	r1, r7
 8007888:	4620      	mov	r0, r4
 800788a:	f000 feb4 	bl	80085f6 <__any_on>
 800788e:	4681      	mov	r9, r0
 8007890:	117a      	asrs	r2, r7, #5
 8007892:	2301      	movs	r3, #1
 8007894:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007898:	f007 071f 	and.w	r7, r7, #31
 800789c:	40bb      	lsls	r3, r7
 800789e:	4213      	tst	r3, r2
 80078a0:	4629      	mov	r1, r5
 80078a2:	4620      	mov	r0, r4
 80078a4:	bf18      	it	ne
 80078a6:	f049 0902 	orrne.w	r9, r9, #2
 80078aa:	f7ff fe21 	bl	80074f0 <rshift>
 80078ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80078b2:	1b76      	subs	r6, r6, r5
 80078b4:	2502      	movs	r5, #2
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	d047      	beq.n	800794c <__gethex+0x38c>
 80078bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d015      	beq.n	80078f0 <__gethex+0x330>
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d017      	beq.n	80078f8 <__gethex+0x338>
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d109      	bne.n	80078e0 <__gethex+0x320>
 80078cc:	f019 0f02 	tst.w	r9, #2
 80078d0:	d006      	beq.n	80078e0 <__gethex+0x320>
 80078d2:	f8da 3000 	ldr.w	r3, [sl]
 80078d6:	ea49 0903 	orr.w	r9, r9, r3
 80078da:	f019 0f01 	tst.w	r9, #1
 80078de:	d10e      	bne.n	80078fe <__gethex+0x33e>
 80078e0:	f045 0510 	orr.w	r5, r5, #16
 80078e4:	e032      	b.n	800794c <__gethex+0x38c>
 80078e6:	f04f 0901 	mov.w	r9, #1
 80078ea:	e7d1      	b.n	8007890 <__gethex+0x2d0>
 80078ec:	2501      	movs	r5, #1
 80078ee:	e7e2      	b.n	80078b6 <__gethex+0x2f6>
 80078f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078f2:	f1c3 0301 	rsb	r3, r3, #1
 80078f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <__gethex+0x320>
 80078fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007902:	f104 0314 	add.w	r3, r4, #20
 8007906:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800790a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800790e:	f04f 0c00 	mov.w	ip, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f853 2b04 	ldr.w	r2, [r3], #4
 8007918:	f1b2 3fff 	cmp.w	r2, #4294967295
 800791c:	d01b      	beq.n	8007956 <__gethex+0x396>
 800791e:	3201      	adds	r2, #1
 8007920:	6002      	str	r2, [r0, #0]
 8007922:	2d02      	cmp	r5, #2
 8007924:	f104 0314 	add.w	r3, r4, #20
 8007928:	d13c      	bne.n	80079a4 <__gethex+0x3e4>
 800792a:	f8d8 2000 	ldr.w	r2, [r8]
 800792e:	3a01      	subs	r2, #1
 8007930:	42b2      	cmp	r2, r6
 8007932:	d109      	bne.n	8007948 <__gethex+0x388>
 8007934:	1171      	asrs	r1, r6, #5
 8007936:	2201      	movs	r2, #1
 8007938:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800793c:	f006 061f 	and.w	r6, r6, #31
 8007940:	fa02 f606 	lsl.w	r6, r2, r6
 8007944:	421e      	tst	r6, r3
 8007946:	d13a      	bne.n	80079be <__gethex+0x3fe>
 8007948:	f045 0520 	orr.w	r5, r5, #32
 800794c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800794e:	601c      	str	r4, [r3, #0]
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	601f      	str	r7, [r3, #0]
 8007954:	e6b0      	b.n	80076b8 <__gethex+0xf8>
 8007956:	4299      	cmp	r1, r3
 8007958:	f843 cc04 	str.w	ip, [r3, #-4]
 800795c:	d8d9      	bhi.n	8007912 <__gethex+0x352>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	459b      	cmp	fp, r3
 8007962:	db17      	blt.n	8007994 <__gethex+0x3d4>
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	9801      	ldr	r0, [sp, #4]
 8007968:	3101      	adds	r1, #1
 800796a:	f000 f9bb 	bl	8007ce4 <_Balloc>
 800796e:	4681      	mov	r9, r0
 8007970:	b918      	cbnz	r0, 800797a <__gethex+0x3ba>
 8007972:	4b1a      	ldr	r3, [pc, #104]	@ (80079dc <__gethex+0x41c>)
 8007974:	4602      	mov	r2, r0
 8007976:	2184      	movs	r1, #132	@ 0x84
 8007978:	e6c5      	b.n	8007706 <__gethex+0x146>
 800797a:	6922      	ldr	r2, [r4, #16]
 800797c:	3202      	adds	r2, #2
 800797e:	f104 010c 	add.w	r1, r4, #12
 8007982:	0092      	lsls	r2, r2, #2
 8007984:	300c      	adds	r0, #12
 8007986:	f7ff fd4a 	bl	800741e <memcpy>
 800798a:	4621      	mov	r1, r4
 800798c:	9801      	ldr	r0, [sp, #4]
 800798e:	f000 f9e9 	bl	8007d64 <_Bfree>
 8007992:	464c      	mov	r4, r9
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800799c:	6122      	str	r2, [r4, #16]
 800799e:	2201      	movs	r2, #1
 80079a0:	615a      	str	r2, [r3, #20]
 80079a2:	e7be      	b.n	8007922 <__gethex+0x362>
 80079a4:	6922      	ldr	r2, [r4, #16]
 80079a6:	455a      	cmp	r2, fp
 80079a8:	dd0b      	ble.n	80079c2 <__gethex+0x402>
 80079aa:	2101      	movs	r1, #1
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff fd9f 	bl	80074f0 <rshift>
 80079b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079b6:	3701      	adds	r7, #1
 80079b8:	42bb      	cmp	r3, r7
 80079ba:	f6ff aee0 	blt.w	800777e <__gethex+0x1be>
 80079be:	2501      	movs	r5, #1
 80079c0:	e7c2      	b.n	8007948 <__gethex+0x388>
 80079c2:	f016 061f 	ands.w	r6, r6, #31
 80079c6:	d0fa      	beq.n	80079be <__gethex+0x3fe>
 80079c8:	4453      	add	r3, sl
 80079ca:	f1c6 0620 	rsb	r6, r6, #32
 80079ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80079d2:	f000 fa79 	bl	8007ec8 <__hi0bits>
 80079d6:	42b0      	cmp	r0, r6
 80079d8:	dbe7      	blt.n	80079aa <__gethex+0x3ea>
 80079da:	e7f0      	b.n	80079be <__gethex+0x3fe>
 80079dc:	08009836 	.word	0x08009836

080079e0 <L_shift>:
 80079e0:	f1c2 0208 	rsb	r2, r2, #8
 80079e4:	0092      	lsls	r2, r2, #2
 80079e6:	b570      	push	{r4, r5, r6, lr}
 80079e8:	f1c2 0620 	rsb	r6, r2, #32
 80079ec:	6843      	ldr	r3, [r0, #4]
 80079ee:	6804      	ldr	r4, [r0, #0]
 80079f0:	fa03 f506 	lsl.w	r5, r3, r6
 80079f4:	432c      	orrs	r4, r5
 80079f6:	40d3      	lsrs	r3, r2
 80079f8:	6004      	str	r4, [r0, #0]
 80079fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80079fe:	4288      	cmp	r0, r1
 8007a00:	d3f4      	bcc.n	80079ec <L_shift+0xc>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}

08007a04 <__match>:
 8007a04:	b530      	push	{r4, r5, lr}
 8007a06:	6803      	ldr	r3, [r0, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0e:	b914      	cbnz	r4, 8007a16 <__match+0x12>
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	2001      	movs	r0, #1
 8007a14:	bd30      	pop	{r4, r5, pc}
 8007a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a1a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007a1e:	2d19      	cmp	r5, #25
 8007a20:	bf98      	it	ls
 8007a22:	3220      	addls	r2, #32
 8007a24:	42a2      	cmp	r2, r4
 8007a26:	d0f0      	beq.n	8007a0a <__match+0x6>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7f3      	b.n	8007a14 <__match+0x10>

08007a2c <__hexnan>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	680b      	ldr	r3, [r1, #0]
 8007a32:	6801      	ldr	r1, [r0, #0]
 8007a34:	115e      	asrs	r6, r3, #5
 8007a36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a3a:	f013 031f 	ands.w	r3, r3, #31
 8007a3e:	b087      	sub	sp, #28
 8007a40:	bf18      	it	ne
 8007a42:	3604      	addne	r6, #4
 8007a44:	2500      	movs	r5, #0
 8007a46:	1f37      	subs	r7, r6, #4
 8007a48:	4682      	mov	sl, r0
 8007a4a:	4690      	mov	r8, r2
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a52:	46b9      	mov	r9, r7
 8007a54:	463c      	mov	r4, r7
 8007a56:	9502      	str	r5, [sp, #8]
 8007a58:	46ab      	mov	fp, r5
 8007a5a:	784a      	ldrb	r2, [r1, #1]
 8007a5c:	1c4b      	adds	r3, r1, #1
 8007a5e:	9303      	str	r3, [sp, #12]
 8007a60:	b342      	cbz	r2, 8007ab4 <__hexnan+0x88>
 8007a62:	4610      	mov	r0, r2
 8007a64:	9105      	str	r1, [sp, #20]
 8007a66:	9204      	str	r2, [sp, #16]
 8007a68:	f7ff fd94 	bl	8007594 <__hexdig_fun>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d151      	bne.n	8007b14 <__hexnan+0xe8>
 8007a70:	9a04      	ldr	r2, [sp, #16]
 8007a72:	9905      	ldr	r1, [sp, #20]
 8007a74:	2a20      	cmp	r2, #32
 8007a76:	d818      	bhi.n	8007aaa <__hexnan+0x7e>
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	459b      	cmp	fp, r3
 8007a7c:	dd13      	ble.n	8007aa6 <__hexnan+0x7a>
 8007a7e:	454c      	cmp	r4, r9
 8007a80:	d206      	bcs.n	8007a90 <__hexnan+0x64>
 8007a82:	2d07      	cmp	r5, #7
 8007a84:	dc04      	bgt.n	8007a90 <__hexnan+0x64>
 8007a86:	462a      	mov	r2, r5
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7ff ffa8 	bl	80079e0 <L_shift>
 8007a90:	4544      	cmp	r4, r8
 8007a92:	d952      	bls.n	8007b3a <__hexnan+0x10e>
 8007a94:	2300      	movs	r3, #0
 8007a96:	f1a4 0904 	sub.w	r9, r4, #4
 8007a9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a9e:	f8cd b008 	str.w	fp, [sp, #8]
 8007aa2:	464c      	mov	r4, r9
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	9903      	ldr	r1, [sp, #12]
 8007aa8:	e7d7      	b.n	8007a5a <__hexnan+0x2e>
 8007aaa:	2a29      	cmp	r2, #41	@ 0x29
 8007aac:	d157      	bne.n	8007b5e <__hexnan+0x132>
 8007aae:	3102      	adds	r1, #2
 8007ab0:	f8ca 1000 	str.w	r1, [sl]
 8007ab4:	f1bb 0f00 	cmp.w	fp, #0
 8007ab8:	d051      	beq.n	8007b5e <__hexnan+0x132>
 8007aba:	454c      	cmp	r4, r9
 8007abc:	d206      	bcs.n	8007acc <__hexnan+0xa0>
 8007abe:	2d07      	cmp	r5, #7
 8007ac0:	dc04      	bgt.n	8007acc <__hexnan+0xa0>
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff ff8a 	bl	80079e0 <L_shift>
 8007acc:	4544      	cmp	r4, r8
 8007ace:	d936      	bls.n	8007b3e <__hexnan+0x112>
 8007ad0:	f1a8 0204 	sub.w	r2, r8, #4
 8007ad4:	4623      	mov	r3, r4
 8007ad6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ada:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ade:	429f      	cmp	r7, r3
 8007ae0:	d2f9      	bcs.n	8007ad6 <__hexnan+0xaa>
 8007ae2:	1b3b      	subs	r3, r7, r4
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	3304      	adds	r3, #4
 8007aea:	3401      	adds	r4, #1
 8007aec:	3e03      	subs	r6, #3
 8007aee:	42b4      	cmp	r4, r6
 8007af0:	bf88      	it	hi
 8007af2:	2304      	movhi	r3, #4
 8007af4:	4443      	add	r3, r8
 8007af6:	2200      	movs	r2, #0
 8007af8:	f843 2b04 	str.w	r2, [r3], #4
 8007afc:	429f      	cmp	r7, r3
 8007afe:	d2fb      	bcs.n	8007af8 <__hexnan+0xcc>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	b91b      	cbnz	r3, 8007b0c <__hexnan+0xe0>
 8007b04:	4547      	cmp	r7, r8
 8007b06:	d128      	bne.n	8007b5a <__hexnan+0x12e>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	2005      	movs	r0, #5
 8007b0e:	b007      	add	sp, #28
 8007b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b14:	3501      	adds	r5, #1
 8007b16:	2d08      	cmp	r5, #8
 8007b18:	f10b 0b01 	add.w	fp, fp, #1
 8007b1c:	dd06      	ble.n	8007b2c <__hexnan+0x100>
 8007b1e:	4544      	cmp	r4, r8
 8007b20:	d9c1      	bls.n	8007aa6 <__hexnan+0x7a>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b28:	2501      	movs	r5, #1
 8007b2a:	3c04      	subs	r4, #4
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	f000 000f 	and.w	r0, r0, #15
 8007b32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b36:	6020      	str	r0, [r4, #0]
 8007b38:	e7b5      	b.n	8007aa6 <__hexnan+0x7a>
 8007b3a:	2508      	movs	r5, #8
 8007b3c:	e7b3      	b.n	8007aa6 <__hexnan+0x7a>
 8007b3e:	9b01      	ldr	r3, [sp, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0dd      	beq.n	8007b00 <__hexnan+0xd4>
 8007b44:	f1c3 0320 	rsb	r3, r3, #32
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4c:	40da      	lsrs	r2, r3
 8007b4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007b52:	4013      	ands	r3, r2
 8007b54:	f846 3c04 	str.w	r3, [r6, #-4]
 8007b58:	e7d2      	b.n	8007b00 <__hexnan+0xd4>
 8007b5a:	3f04      	subs	r7, #4
 8007b5c:	e7d0      	b.n	8007b00 <__hexnan+0xd4>
 8007b5e:	2004      	movs	r0, #4
 8007b60:	e7d5      	b.n	8007b0e <__hexnan+0xe2>
	...

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0f      	ldr	r6, [pc, #60]	@ (8007ba4 <sbrk_aligned+0x40>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 fe1c 	bl	80087ac <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 fe17 	bl	80087ac <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d103      	bne.n	8007b8a <sbrk_aligned+0x26>
 8007b82:	f04f 34ff 	mov.w	r4, #4294967295
 8007b86:	4620      	mov	r0, r4
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
 8007b8a:	1cc4      	adds	r4, r0, #3
 8007b8c:	f024 0403 	bic.w	r4, r4, #3
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d0f8      	beq.n	8007b86 <sbrk_aligned+0x22>
 8007b94:	1a21      	subs	r1, r4, r0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f000 fe08 	bl	80087ac <_sbrk_r>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1f2      	bne.n	8007b86 <sbrk_aligned+0x22>
 8007ba0:	e7ef      	b.n	8007b82 <sbrk_aligned+0x1e>
 8007ba2:	bf00      	nop
 8007ba4:	20018e18 	.word	0x20018e18

08007ba8 <_malloc_r>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	1ccd      	adds	r5, r1, #3
 8007bae:	f025 0503 	bic.w	r5, r5, #3
 8007bb2:	3508      	adds	r5, #8
 8007bb4:	2d0c      	cmp	r5, #12
 8007bb6:	bf38      	it	cc
 8007bb8:	250c      	movcc	r5, #12
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	db01      	blt.n	8007bc4 <_malloc_r+0x1c>
 8007bc0:	42a9      	cmp	r1, r5
 8007bc2:	d904      	bls.n	8007bce <_malloc_r+0x26>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ca4 <_malloc_r+0xfc>
 8007bd2:	f000 f87b 	bl	8007ccc <__malloc_lock>
 8007bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bda:	461c      	mov	r4, r3
 8007bdc:	bb44      	cbnz	r4, 8007c30 <_malloc_r+0x88>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff ffbf 	bl	8007b64 <sbrk_aligned>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	4604      	mov	r4, r0
 8007bea:	d158      	bne.n	8007c9e <_malloc_r+0xf6>
 8007bec:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf0:	4627      	mov	r7, r4
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d143      	bne.n	8007c7e <_malloc_r+0xd6>
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d04b      	beq.n	8007c92 <_malloc_r+0xea>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	eb04 0903 	add.w	r9, r4, r3
 8007c04:	f000 fdd2 	bl	80087ac <_sbrk_r>
 8007c08:	4581      	cmp	r9, r0
 8007c0a:	d142      	bne.n	8007c92 <_malloc_r+0xea>
 8007c0c:	6821      	ldr	r1, [r4, #0]
 8007c0e:	1a6d      	subs	r5, r5, r1
 8007c10:	4629      	mov	r1, r5
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffa6 	bl	8007b64 <sbrk_aligned>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d03a      	beq.n	8007c92 <_malloc_r+0xea>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	442b      	add	r3, r5
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	f8d8 3000 	ldr.w	r3, [r8]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	bb62      	cbnz	r2, 8007c84 <_malloc_r+0xdc>
 8007c2a:	f8c8 7000 	str.w	r7, [r8]
 8007c2e:	e00f      	b.n	8007c50 <_malloc_r+0xa8>
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	1b52      	subs	r2, r2, r5
 8007c34:	d420      	bmi.n	8007c78 <_malloc_r+0xd0>
 8007c36:	2a0b      	cmp	r2, #11
 8007c38:	d917      	bls.n	8007c6a <_malloc_r+0xc2>
 8007c3a:	1961      	adds	r1, r4, r5
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	6025      	str	r5, [r4, #0]
 8007c40:	bf18      	it	ne
 8007c42:	6059      	strne	r1, [r3, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	bf08      	it	eq
 8007c48:	f8c8 1000 	streq.w	r1, [r8]
 8007c4c:	5162      	str	r2, [r4, r5]
 8007c4e:	604b      	str	r3, [r1, #4]
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f841 	bl	8007cd8 <__malloc_unlock>
 8007c56:	f104 000b 	add.w	r0, r4, #11
 8007c5a:	1d23      	adds	r3, r4, #4
 8007c5c:	f020 0007 	bic.w	r0, r0, #7
 8007c60:	1ac2      	subs	r2, r0, r3
 8007c62:	bf1c      	itt	ne
 8007c64:	1a1b      	subne	r3, r3, r0
 8007c66:	50a3      	strne	r3, [r4, r2]
 8007c68:	e7af      	b.n	8007bca <_malloc_r+0x22>
 8007c6a:	6862      	ldr	r2, [r4, #4]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	bf0c      	ite	eq
 8007c70:	f8c8 2000 	streq.w	r2, [r8]
 8007c74:	605a      	strne	r2, [r3, #4]
 8007c76:	e7eb      	b.n	8007c50 <_malloc_r+0xa8>
 8007c78:	4623      	mov	r3, r4
 8007c7a:	6864      	ldr	r4, [r4, #4]
 8007c7c:	e7ae      	b.n	8007bdc <_malloc_r+0x34>
 8007c7e:	463c      	mov	r4, r7
 8007c80:	687f      	ldr	r7, [r7, #4]
 8007c82:	e7b6      	b.n	8007bf2 <_malloc_r+0x4a>
 8007c84:	461a      	mov	r2, r3
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d1fb      	bne.n	8007c84 <_malloc_r+0xdc>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e7de      	b.n	8007c50 <_malloc_r+0xa8>
 8007c92:	230c      	movs	r3, #12
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f81e 	bl	8007cd8 <__malloc_unlock>
 8007c9c:	e794      	b.n	8007bc8 <_malloc_r+0x20>
 8007c9e:	6005      	str	r5, [r0, #0]
 8007ca0:	e7d6      	b.n	8007c50 <_malloc_r+0xa8>
 8007ca2:	bf00      	nop
 8007ca4:	20018e1c 	.word	0x20018e1c

08007ca8 <__ascii_mbtowc>:
 8007ca8:	b082      	sub	sp, #8
 8007caa:	b901      	cbnz	r1, 8007cae <__ascii_mbtowc+0x6>
 8007cac:	a901      	add	r1, sp, #4
 8007cae:	b142      	cbz	r2, 8007cc2 <__ascii_mbtowc+0x1a>
 8007cb0:	b14b      	cbz	r3, 8007cc6 <__ascii_mbtowc+0x1e>
 8007cb2:	7813      	ldrb	r3, [r2, #0]
 8007cb4:	600b      	str	r3, [r1, #0]
 8007cb6:	7812      	ldrb	r2, [r2, #0]
 8007cb8:	1e10      	subs	r0, r2, #0
 8007cba:	bf18      	it	ne
 8007cbc:	2001      	movne	r0, #1
 8007cbe:	b002      	add	sp, #8
 8007cc0:	4770      	bx	lr
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	e7fb      	b.n	8007cbe <__ascii_mbtowc+0x16>
 8007cc6:	f06f 0001 	mvn.w	r0, #1
 8007cca:	e7f8      	b.n	8007cbe <__ascii_mbtowc+0x16>

08007ccc <__malloc_lock>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	@ (8007cd4 <__malloc_lock+0x8>)
 8007cce:	f7ff bba4 	b.w	800741a <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20018e14 	.word	0x20018e14

08007cd8 <__malloc_unlock>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	@ (8007ce0 <__malloc_unlock+0x8>)
 8007cda:	f7ff bb9f 	b.w	800741c <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20018e14 	.word	0x20018e14

08007ce4 <_Balloc>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	69c6      	ldr	r6, [r0, #28]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	b976      	cbnz	r6, 8007d0c <_Balloc+0x28>
 8007cee:	2010      	movs	r0, #16
 8007cf0:	f000 fd9e 	bl	8008830 <malloc>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	61e0      	str	r0, [r4, #28]
 8007cf8:	b920      	cbnz	r0, 8007d04 <_Balloc+0x20>
 8007cfa:	4b18      	ldr	r3, [pc, #96]	@ (8007d5c <_Balloc+0x78>)
 8007cfc:	4818      	ldr	r0, [pc, #96]	@ (8007d60 <_Balloc+0x7c>)
 8007cfe:	216b      	movs	r1, #107	@ 0x6b
 8007d00:	f000 fd64 	bl	80087cc <__assert_func>
 8007d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d08:	6006      	str	r6, [r0, #0]
 8007d0a:	60c6      	str	r6, [r0, #12]
 8007d0c:	69e6      	ldr	r6, [r4, #28]
 8007d0e:	68f3      	ldr	r3, [r6, #12]
 8007d10:	b183      	cbz	r3, 8007d34 <_Balloc+0x50>
 8007d12:	69e3      	ldr	r3, [r4, #28]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d1a:	b9b8      	cbnz	r0, 8007d4c <_Balloc+0x68>
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d22:	1d72      	adds	r2, r6, #5
 8007d24:	0092      	lsls	r2, r2, #2
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fd6e 	bl	8008808 <_calloc_r>
 8007d2c:	b160      	cbz	r0, 8007d48 <_Balloc+0x64>
 8007d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d32:	e00e      	b.n	8007d52 <_Balloc+0x6e>
 8007d34:	2221      	movs	r2, #33	@ 0x21
 8007d36:	2104      	movs	r1, #4
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fd65 	bl	8008808 <_calloc_r>
 8007d3e:	69e3      	ldr	r3, [r4, #28]
 8007d40:	60f0      	str	r0, [r6, #12]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e4      	bne.n	8007d12 <_Balloc+0x2e>
 8007d48:	2000      	movs	r0, #0
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	6802      	ldr	r2, [r0, #0]
 8007d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d52:	2300      	movs	r3, #0
 8007d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d58:	e7f7      	b.n	8007d4a <_Balloc+0x66>
 8007d5a:	bf00      	nop
 8007d5c:	080098a7 	.word	0x080098a7
 8007d60:	080098be 	.word	0x080098be

08007d64 <_Bfree>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	69c6      	ldr	r6, [r0, #28]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b976      	cbnz	r6, 8007d8c <_Bfree+0x28>
 8007d6e:	2010      	movs	r0, #16
 8007d70:	f000 fd5e 	bl	8008830 <malloc>
 8007d74:	4602      	mov	r2, r0
 8007d76:	61e8      	str	r0, [r5, #28]
 8007d78:	b920      	cbnz	r0, 8007d84 <_Bfree+0x20>
 8007d7a:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <_Bfree+0x3c>)
 8007d7c:	4809      	ldr	r0, [pc, #36]	@ (8007da4 <_Bfree+0x40>)
 8007d7e:	218f      	movs	r1, #143	@ 0x8f
 8007d80:	f000 fd24 	bl	80087cc <__assert_func>
 8007d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d88:	6006      	str	r6, [r0, #0]
 8007d8a:	60c6      	str	r6, [r0, #12]
 8007d8c:	b13c      	cbz	r4, 8007d9e <_Bfree+0x3a>
 8007d8e:	69eb      	ldr	r3, [r5, #28]
 8007d90:	6862      	ldr	r2, [r4, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d98:	6021      	str	r1, [r4, #0]
 8007d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	080098a7 	.word	0x080098a7
 8007da4:	080098be 	.word	0x080098be

08007da8 <__multadd>:
 8007da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dac:	690d      	ldr	r5, [r1, #16]
 8007dae:	4607      	mov	r7, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	461e      	mov	r6, r3
 8007db4:	f101 0c14 	add.w	ip, r1, #20
 8007db8:	2000      	movs	r0, #0
 8007dba:	f8dc 3000 	ldr.w	r3, [ip]
 8007dbe:	b299      	uxth	r1, r3
 8007dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007dc4:	0c1e      	lsrs	r6, r3, #16
 8007dc6:	0c0b      	lsrs	r3, r1, #16
 8007dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007dcc:	b289      	uxth	r1, r1
 8007dce:	3001      	adds	r0, #1
 8007dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007dd4:	4285      	cmp	r5, r0
 8007dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dde:	dcec      	bgt.n	8007dba <__multadd+0x12>
 8007de0:	b30e      	cbz	r6, 8007e26 <__multadd+0x7e>
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	42ab      	cmp	r3, r5
 8007de6:	dc19      	bgt.n	8007e1c <__multadd+0x74>
 8007de8:	6861      	ldr	r1, [r4, #4]
 8007dea:	4638      	mov	r0, r7
 8007dec:	3101      	adds	r1, #1
 8007dee:	f7ff ff79 	bl	8007ce4 <_Balloc>
 8007df2:	4680      	mov	r8, r0
 8007df4:	b928      	cbnz	r0, 8007e02 <__multadd+0x5a>
 8007df6:	4602      	mov	r2, r0
 8007df8:	4b0c      	ldr	r3, [pc, #48]	@ (8007e2c <__multadd+0x84>)
 8007dfa:	480d      	ldr	r0, [pc, #52]	@ (8007e30 <__multadd+0x88>)
 8007dfc:	21ba      	movs	r1, #186	@ 0xba
 8007dfe:	f000 fce5 	bl	80087cc <__assert_func>
 8007e02:	6922      	ldr	r2, [r4, #16]
 8007e04:	3202      	adds	r2, #2
 8007e06:	f104 010c 	add.w	r1, r4, #12
 8007e0a:	0092      	lsls	r2, r2, #2
 8007e0c:	300c      	adds	r0, #12
 8007e0e:	f7ff fb06 	bl	800741e <memcpy>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff ffa5 	bl	8007d64 <_Bfree>
 8007e1a:	4644      	mov	r4, r8
 8007e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e20:	3501      	adds	r5, #1
 8007e22:	615e      	str	r6, [r3, #20]
 8007e24:	6125      	str	r5, [r4, #16]
 8007e26:	4620      	mov	r0, r4
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	08009836 	.word	0x08009836
 8007e30:	080098be 	.word	0x080098be

08007e34 <__s2b>:
 8007e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	460c      	mov	r4, r1
 8007e3a:	4615      	mov	r5, r2
 8007e3c:	461f      	mov	r7, r3
 8007e3e:	2209      	movs	r2, #9
 8007e40:	3308      	adds	r3, #8
 8007e42:	4606      	mov	r6, r0
 8007e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e48:	2100      	movs	r1, #0
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	db09      	blt.n	8007e64 <__s2b+0x30>
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff ff47 	bl	8007ce4 <_Balloc>
 8007e56:	b940      	cbnz	r0, 8007e6a <__s2b+0x36>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	4b19      	ldr	r3, [pc, #100]	@ (8007ec0 <__s2b+0x8c>)
 8007e5c:	4819      	ldr	r0, [pc, #100]	@ (8007ec4 <__s2b+0x90>)
 8007e5e:	21d3      	movs	r1, #211	@ 0xd3
 8007e60:	f000 fcb4 	bl	80087cc <__assert_func>
 8007e64:	0052      	lsls	r2, r2, #1
 8007e66:	3101      	adds	r1, #1
 8007e68:	e7f0      	b.n	8007e4c <__s2b+0x18>
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	6143      	str	r3, [r0, #20]
 8007e6e:	2d09      	cmp	r5, #9
 8007e70:	f04f 0301 	mov.w	r3, #1
 8007e74:	6103      	str	r3, [r0, #16]
 8007e76:	dd16      	ble.n	8007ea6 <__s2b+0x72>
 8007e78:	f104 0909 	add.w	r9, r4, #9
 8007e7c:	46c8      	mov	r8, r9
 8007e7e:	442c      	add	r4, r5
 8007e80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e84:	4601      	mov	r1, r0
 8007e86:	3b30      	subs	r3, #48	@ 0x30
 8007e88:	220a      	movs	r2, #10
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ff8c 	bl	8007da8 <__multadd>
 8007e90:	45a0      	cmp	r8, r4
 8007e92:	d1f5      	bne.n	8007e80 <__s2b+0x4c>
 8007e94:	f1a5 0408 	sub.w	r4, r5, #8
 8007e98:	444c      	add	r4, r9
 8007e9a:	1b2d      	subs	r5, r5, r4
 8007e9c:	1963      	adds	r3, r4, r5
 8007e9e:	42bb      	cmp	r3, r7
 8007ea0:	db04      	blt.n	8007eac <__s2b+0x78>
 8007ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea6:	340a      	adds	r4, #10
 8007ea8:	2509      	movs	r5, #9
 8007eaa:	e7f6      	b.n	8007e9a <__s2b+0x66>
 8007eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	3b30      	subs	r3, #48	@ 0x30
 8007eb4:	220a      	movs	r2, #10
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7ff ff76 	bl	8007da8 <__multadd>
 8007ebc:	e7ee      	b.n	8007e9c <__s2b+0x68>
 8007ebe:	bf00      	nop
 8007ec0:	08009836 	.word	0x08009836
 8007ec4:	080098be 	.word	0x080098be

08007ec8 <__hi0bits>:
 8007ec8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ecc:	4603      	mov	r3, r0
 8007ece:	bf36      	itet	cc
 8007ed0:	0403      	lslcc	r3, r0, #16
 8007ed2:	2000      	movcs	r0, #0
 8007ed4:	2010      	movcc	r0, #16
 8007ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eda:	bf3c      	itt	cc
 8007edc:	021b      	lslcc	r3, r3, #8
 8007ede:	3008      	addcc	r0, #8
 8007ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ee4:	bf3c      	itt	cc
 8007ee6:	011b      	lslcc	r3, r3, #4
 8007ee8:	3004      	addcc	r0, #4
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eee:	bf3c      	itt	cc
 8007ef0:	009b      	lslcc	r3, r3, #2
 8007ef2:	3002      	addcc	r0, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	db05      	blt.n	8007f04 <__hi0bits+0x3c>
 8007ef8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007efc:	f100 0001 	add.w	r0, r0, #1
 8007f00:	bf08      	it	eq
 8007f02:	2020      	moveq	r0, #32
 8007f04:	4770      	bx	lr

08007f06 <__lo0bits>:
 8007f06:	6803      	ldr	r3, [r0, #0]
 8007f08:	4602      	mov	r2, r0
 8007f0a:	f013 0007 	ands.w	r0, r3, #7
 8007f0e:	d00b      	beq.n	8007f28 <__lo0bits+0x22>
 8007f10:	07d9      	lsls	r1, r3, #31
 8007f12:	d421      	bmi.n	8007f58 <__lo0bits+0x52>
 8007f14:	0798      	lsls	r0, r3, #30
 8007f16:	bf49      	itett	mi
 8007f18:	085b      	lsrmi	r3, r3, #1
 8007f1a:	089b      	lsrpl	r3, r3, #2
 8007f1c:	2001      	movmi	r0, #1
 8007f1e:	6013      	strmi	r3, [r2, #0]
 8007f20:	bf5c      	itt	pl
 8007f22:	6013      	strpl	r3, [r2, #0]
 8007f24:	2002      	movpl	r0, #2
 8007f26:	4770      	bx	lr
 8007f28:	b299      	uxth	r1, r3
 8007f2a:	b909      	cbnz	r1, 8007f30 <__lo0bits+0x2a>
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	2010      	movs	r0, #16
 8007f30:	b2d9      	uxtb	r1, r3
 8007f32:	b909      	cbnz	r1, 8007f38 <__lo0bits+0x32>
 8007f34:	3008      	adds	r0, #8
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	0719      	lsls	r1, r3, #28
 8007f3a:	bf04      	itt	eq
 8007f3c:	091b      	lsreq	r3, r3, #4
 8007f3e:	3004      	addeq	r0, #4
 8007f40:	0799      	lsls	r1, r3, #30
 8007f42:	bf04      	itt	eq
 8007f44:	089b      	lsreq	r3, r3, #2
 8007f46:	3002      	addeq	r0, #2
 8007f48:	07d9      	lsls	r1, r3, #31
 8007f4a:	d403      	bmi.n	8007f54 <__lo0bits+0x4e>
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	f100 0001 	add.w	r0, r0, #1
 8007f52:	d003      	beq.n	8007f5c <__lo0bits+0x56>
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	4770      	bx	lr
 8007f58:	2000      	movs	r0, #0
 8007f5a:	4770      	bx	lr
 8007f5c:	2020      	movs	r0, #32
 8007f5e:	4770      	bx	lr

08007f60 <__i2b>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	2101      	movs	r1, #1
 8007f66:	f7ff febd 	bl	8007ce4 <_Balloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	b928      	cbnz	r0, 8007f7a <__i2b+0x1a>
 8007f6e:	4b05      	ldr	r3, [pc, #20]	@ (8007f84 <__i2b+0x24>)
 8007f70:	4805      	ldr	r0, [pc, #20]	@ (8007f88 <__i2b+0x28>)
 8007f72:	f240 1145 	movw	r1, #325	@ 0x145
 8007f76:	f000 fc29 	bl	80087cc <__assert_func>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	6144      	str	r4, [r0, #20]
 8007f7e:	6103      	str	r3, [r0, #16]
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	bf00      	nop
 8007f84:	08009836 	.word	0x08009836
 8007f88:	080098be 	.word	0x080098be

08007f8c <__multiply>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	4617      	mov	r7, r2
 8007f92:	690a      	ldr	r2, [r1, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	bfa8      	it	ge
 8007f9a:	463b      	movge	r3, r7
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	bfa4      	itt	ge
 8007fa0:	460f      	movge	r7, r1
 8007fa2:	4699      	movge	r9, r3
 8007fa4:	693d      	ldr	r5, [r7, #16]
 8007fa6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	eb05 060a 	add.w	r6, r5, sl
 8007fb2:	42b3      	cmp	r3, r6
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	bfb8      	it	lt
 8007fb8:	3101      	addlt	r1, #1
 8007fba:	f7ff fe93 	bl	8007ce4 <_Balloc>
 8007fbe:	b930      	cbnz	r0, 8007fce <__multiply+0x42>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4b41      	ldr	r3, [pc, #260]	@ (80080c8 <__multiply+0x13c>)
 8007fc4:	4841      	ldr	r0, [pc, #260]	@ (80080cc <__multiply+0x140>)
 8007fc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fca:	f000 fbff 	bl	80087cc <__assert_func>
 8007fce:	f100 0414 	add.w	r4, r0, #20
 8007fd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4573      	cmp	r3, lr
 8007fdc:	d320      	bcc.n	8008020 <__multiply+0x94>
 8007fde:	f107 0814 	add.w	r8, r7, #20
 8007fe2:	f109 0114 	add.w	r1, r9, #20
 8007fe6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007fea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007fee:	9302      	str	r3, [sp, #8]
 8007ff0:	1beb      	subs	r3, r5, r7
 8007ff2:	3b15      	subs	r3, #21
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	3715      	adds	r7, #21
 8007ffc:	42bd      	cmp	r5, r7
 8007ffe:	bf38      	it	cc
 8008000:	2304      	movcc	r3, #4
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	9103      	str	r1, [sp, #12]
 8008008:	428b      	cmp	r3, r1
 800800a:	d80c      	bhi.n	8008026 <__multiply+0x9a>
 800800c:	2e00      	cmp	r6, #0
 800800e:	dd03      	ble.n	8008018 <__multiply+0x8c>
 8008010:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008014:	2b00      	cmp	r3, #0
 8008016:	d055      	beq.n	80080c4 <__multiply+0x138>
 8008018:	6106      	str	r6, [r0, #16]
 800801a:	b005      	add	sp, #20
 800801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008020:	f843 2b04 	str.w	r2, [r3], #4
 8008024:	e7d9      	b.n	8007fda <__multiply+0x4e>
 8008026:	f8b1 a000 	ldrh.w	sl, [r1]
 800802a:	f1ba 0f00 	cmp.w	sl, #0
 800802e:	d01f      	beq.n	8008070 <__multiply+0xe4>
 8008030:	46c4      	mov	ip, r8
 8008032:	46a1      	mov	r9, r4
 8008034:	2700      	movs	r7, #0
 8008036:	f85c 2b04 	ldr.w	r2, [ip], #4
 800803a:	f8d9 3000 	ldr.w	r3, [r9]
 800803e:	fa1f fb82 	uxth.w	fp, r2
 8008042:	b29b      	uxth	r3, r3
 8008044:	fb0a 330b 	mla	r3, sl, fp, r3
 8008048:	443b      	add	r3, r7
 800804a:	f8d9 7000 	ldr.w	r7, [r9]
 800804e:	0c12      	lsrs	r2, r2, #16
 8008050:	0c3f      	lsrs	r7, r7, #16
 8008052:	fb0a 7202 	mla	r2, sl, r2, r7
 8008056:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800805a:	b29b      	uxth	r3, r3
 800805c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008060:	4565      	cmp	r5, ip
 8008062:	f849 3b04 	str.w	r3, [r9], #4
 8008066:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800806a:	d8e4      	bhi.n	8008036 <__multiply+0xaa>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	50e7      	str	r7, [r4, r3]
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008076:	3104      	adds	r1, #4
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	d020      	beq.n	80080c0 <__multiply+0x134>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	4647      	mov	r7, r8
 8008082:	46a4      	mov	ip, r4
 8008084:	f04f 0a00 	mov.w	sl, #0
 8008088:	f8b7 b000 	ldrh.w	fp, [r7]
 800808c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008090:	fb09 220b 	mla	r2, r9, fp, r2
 8008094:	4452      	add	r2, sl
 8008096:	b29b      	uxth	r3, r3
 8008098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800809c:	f84c 3b04 	str.w	r3, [ip], #4
 80080a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80080a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80080ac:	fb09 330a 	mla	r3, r9, sl, r3
 80080b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80080b4:	42bd      	cmp	r5, r7
 80080b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ba:	d8e5      	bhi.n	8008088 <__multiply+0xfc>
 80080bc:	9a01      	ldr	r2, [sp, #4]
 80080be:	50a3      	str	r3, [r4, r2]
 80080c0:	3404      	adds	r4, #4
 80080c2:	e79f      	b.n	8008004 <__multiply+0x78>
 80080c4:	3e01      	subs	r6, #1
 80080c6:	e7a1      	b.n	800800c <__multiply+0x80>
 80080c8:	08009836 	.word	0x08009836
 80080cc:	080098be 	.word	0x080098be

080080d0 <__pow5mult>:
 80080d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d4:	4615      	mov	r5, r2
 80080d6:	f012 0203 	ands.w	r2, r2, #3
 80080da:	4607      	mov	r7, r0
 80080dc:	460e      	mov	r6, r1
 80080de:	d007      	beq.n	80080f0 <__pow5mult+0x20>
 80080e0:	4c25      	ldr	r4, [pc, #148]	@ (8008178 <__pow5mult+0xa8>)
 80080e2:	3a01      	subs	r2, #1
 80080e4:	2300      	movs	r3, #0
 80080e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080ea:	f7ff fe5d 	bl	8007da8 <__multadd>
 80080ee:	4606      	mov	r6, r0
 80080f0:	10ad      	asrs	r5, r5, #2
 80080f2:	d03d      	beq.n	8008170 <__pow5mult+0xa0>
 80080f4:	69fc      	ldr	r4, [r7, #28]
 80080f6:	b97c      	cbnz	r4, 8008118 <__pow5mult+0x48>
 80080f8:	2010      	movs	r0, #16
 80080fa:	f000 fb99 	bl	8008830 <malloc>
 80080fe:	4602      	mov	r2, r0
 8008100:	61f8      	str	r0, [r7, #28]
 8008102:	b928      	cbnz	r0, 8008110 <__pow5mult+0x40>
 8008104:	4b1d      	ldr	r3, [pc, #116]	@ (800817c <__pow5mult+0xac>)
 8008106:	481e      	ldr	r0, [pc, #120]	@ (8008180 <__pow5mult+0xb0>)
 8008108:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800810c:	f000 fb5e 	bl	80087cc <__assert_func>
 8008110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008114:	6004      	str	r4, [r0, #0]
 8008116:	60c4      	str	r4, [r0, #12]
 8008118:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800811c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008120:	b94c      	cbnz	r4, 8008136 <__pow5mult+0x66>
 8008122:	f240 2171 	movw	r1, #625	@ 0x271
 8008126:	4638      	mov	r0, r7
 8008128:	f7ff ff1a 	bl	8007f60 <__i2b>
 800812c:	2300      	movs	r3, #0
 800812e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008132:	4604      	mov	r4, r0
 8008134:	6003      	str	r3, [r0, #0]
 8008136:	f04f 0900 	mov.w	r9, #0
 800813a:	07eb      	lsls	r3, r5, #31
 800813c:	d50a      	bpl.n	8008154 <__pow5mult+0x84>
 800813e:	4631      	mov	r1, r6
 8008140:	4622      	mov	r2, r4
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff ff22 	bl	8007f8c <__multiply>
 8008148:	4631      	mov	r1, r6
 800814a:	4680      	mov	r8, r0
 800814c:	4638      	mov	r0, r7
 800814e:	f7ff fe09 	bl	8007d64 <_Bfree>
 8008152:	4646      	mov	r6, r8
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	d00b      	beq.n	8008170 <__pow5mult+0xa0>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	b938      	cbnz	r0, 800816c <__pow5mult+0x9c>
 800815c:	4622      	mov	r2, r4
 800815e:	4621      	mov	r1, r4
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ff13 	bl	8007f8c <__multiply>
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	f8c0 9000 	str.w	r9, [r0]
 800816c:	4604      	mov	r4, r0
 800816e:	e7e4      	b.n	800813a <__pow5mult+0x6a>
 8008170:	4630      	mov	r0, r6
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008176:	bf00      	nop
 8008178:	08009adc 	.word	0x08009adc
 800817c:	080098a7 	.word	0x080098a7
 8008180:	080098be 	.word	0x080098be

08008184 <__lshift>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	460c      	mov	r4, r1
 800818a:	6849      	ldr	r1, [r1, #4]
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008192:	68a3      	ldr	r3, [r4, #8]
 8008194:	4607      	mov	r7, r0
 8008196:	4691      	mov	r9, r2
 8008198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800819c:	f108 0601 	add.w	r6, r8, #1
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	db0b      	blt.n	80081bc <__lshift+0x38>
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff fd9d 	bl	8007ce4 <_Balloc>
 80081aa:	4605      	mov	r5, r0
 80081ac:	b948      	cbnz	r0, 80081c2 <__lshift+0x3e>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b28      	ldr	r3, [pc, #160]	@ (8008254 <__lshift+0xd0>)
 80081b2:	4829      	ldr	r0, [pc, #164]	@ (8008258 <__lshift+0xd4>)
 80081b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081b8:	f000 fb08 	bl	80087cc <__assert_func>
 80081bc:	3101      	adds	r1, #1
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	e7ee      	b.n	80081a0 <__lshift+0x1c>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f100 0114 	add.w	r1, r0, #20
 80081c8:	f100 0210 	add.w	r2, r0, #16
 80081cc:	4618      	mov	r0, r3
 80081ce:	4553      	cmp	r3, sl
 80081d0:	db33      	blt.n	800823a <__lshift+0xb6>
 80081d2:	6920      	ldr	r0, [r4, #16]
 80081d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d8:	f104 0314 	add.w	r3, r4, #20
 80081dc:	f019 091f 	ands.w	r9, r9, #31
 80081e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e8:	d02b      	beq.n	8008242 <__lshift+0xbe>
 80081ea:	f1c9 0e20 	rsb	lr, r9, #32
 80081ee:	468a      	mov	sl, r1
 80081f0:	2200      	movs	r2, #0
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	fa00 f009 	lsl.w	r0, r0, r9
 80081f8:	4310      	orrs	r0, r2
 80081fa:	f84a 0b04 	str.w	r0, [sl], #4
 80081fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008202:	459c      	cmp	ip, r3
 8008204:	fa22 f20e 	lsr.w	r2, r2, lr
 8008208:	d8f3      	bhi.n	80081f2 <__lshift+0x6e>
 800820a:	ebac 0304 	sub.w	r3, ip, r4
 800820e:	3b15      	subs	r3, #21
 8008210:	f023 0303 	bic.w	r3, r3, #3
 8008214:	3304      	adds	r3, #4
 8008216:	f104 0015 	add.w	r0, r4, #21
 800821a:	4560      	cmp	r0, ip
 800821c:	bf88      	it	hi
 800821e:	2304      	movhi	r3, #4
 8008220:	50ca      	str	r2, [r1, r3]
 8008222:	b10a      	cbz	r2, 8008228 <__lshift+0xa4>
 8008224:	f108 0602 	add.w	r6, r8, #2
 8008228:	3e01      	subs	r6, #1
 800822a:	4638      	mov	r0, r7
 800822c:	612e      	str	r6, [r5, #16]
 800822e:	4621      	mov	r1, r4
 8008230:	f7ff fd98 	bl	8007d64 <_Bfree>
 8008234:	4628      	mov	r0, r5
 8008236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823a:	f842 0f04 	str.w	r0, [r2, #4]!
 800823e:	3301      	adds	r3, #1
 8008240:	e7c5      	b.n	80081ce <__lshift+0x4a>
 8008242:	3904      	subs	r1, #4
 8008244:	f853 2b04 	ldr.w	r2, [r3], #4
 8008248:	f841 2f04 	str.w	r2, [r1, #4]!
 800824c:	459c      	cmp	ip, r3
 800824e:	d8f9      	bhi.n	8008244 <__lshift+0xc0>
 8008250:	e7ea      	b.n	8008228 <__lshift+0xa4>
 8008252:	bf00      	nop
 8008254:	08009836 	.word	0x08009836
 8008258:	080098be 	.word	0x080098be

0800825c <__mcmp>:
 800825c:	690a      	ldr	r2, [r1, #16]
 800825e:	4603      	mov	r3, r0
 8008260:	6900      	ldr	r0, [r0, #16]
 8008262:	1a80      	subs	r0, r0, r2
 8008264:	b530      	push	{r4, r5, lr}
 8008266:	d10e      	bne.n	8008286 <__mcmp+0x2a>
 8008268:	3314      	adds	r3, #20
 800826a:	3114      	adds	r1, #20
 800826c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800827c:	4295      	cmp	r5, r2
 800827e:	d003      	beq.n	8008288 <__mcmp+0x2c>
 8008280:	d205      	bcs.n	800828e <__mcmp+0x32>
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	bd30      	pop	{r4, r5, pc}
 8008288:	42a3      	cmp	r3, r4
 800828a:	d3f3      	bcc.n	8008274 <__mcmp+0x18>
 800828c:	e7fb      	b.n	8008286 <__mcmp+0x2a>
 800828e:	2001      	movs	r0, #1
 8008290:	e7f9      	b.n	8008286 <__mcmp+0x2a>
	...

08008294 <__mdiff>:
 8008294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	4689      	mov	r9, r1
 800829a:	4606      	mov	r6, r0
 800829c:	4611      	mov	r1, r2
 800829e:	4648      	mov	r0, r9
 80082a0:	4614      	mov	r4, r2
 80082a2:	f7ff ffdb 	bl	800825c <__mcmp>
 80082a6:	1e05      	subs	r5, r0, #0
 80082a8:	d112      	bne.n	80082d0 <__mdiff+0x3c>
 80082aa:	4629      	mov	r1, r5
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff fd19 	bl	8007ce4 <_Balloc>
 80082b2:	4602      	mov	r2, r0
 80082b4:	b928      	cbnz	r0, 80082c2 <__mdiff+0x2e>
 80082b6:	4b3f      	ldr	r3, [pc, #252]	@ (80083b4 <__mdiff+0x120>)
 80082b8:	f240 2137 	movw	r1, #567	@ 0x237
 80082bc:	483e      	ldr	r0, [pc, #248]	@ (80083b8 <__mdiff+0x124>)
 80082be:	f000 fa85 	bl	80087cc <__assert_func>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082c8:	4610      	mov	r0, r2
 80082ca:	b003      	add	sp, #12
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	bfbc      	itt	lt
 80082d2:	464b      	movlt	r3, r9
 80082d4:	46a1      	movlt	r9, r4
 80082d6:	4630      	mov	r0, r6
 80082d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082dc:	bfba      	itte	lt
 80082de:	461c      	movlt	r4, r3
 80082e0:	2501      	movlt	r5, #1
 80082e2:	2500      	movge	r5, #0
 80082e4:	f7ff fcfe 	bl	8007ce4 <_Balloc>
 80082e8:	4602      	mov	r2, r0
 80082ea:	b918      	cbnz	r0, 80082f4 <__mdiff+0x60>
 80082ec:	4b31      	ldr	r3, [pc, #196]	@ (80083b4 <__mdiff+0x120>)
 80082ee:	f240 2145 	movw	r1, #581	@ 0x245
 80082f2:	e7e3      	b.n	80082bc <__mdiff+0x28>
 80082f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082f8:	6926      	ldr	r6, [r4, #16]
 80082fa:	60c5      	str	r5, [r0, #12]
 80082fc:	f109 0310 	add.w	r3, r9, #16
 8008300:	f109 0514 	add.w	r5, r9, #20
 8008304:	f104 0e14 	add.w	lr, r4, #20
 8008308:	f100 0b14 	add.w	fp, r0, #20
 800830c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008310:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	46d9      	mov	r9, fp
 8008318:	f04f 0c00 	mov.w	ip, #0
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008322:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	fa1f f38a 	uxth.w	r3, sl
 800832c:	4619      	mov	r1, r3
 800832e:	b283      	uxth	r3, r0
 8008330:	1acb      	subs	r3, r1, r3
 8008332:	0c00      	lsrs	r0, r0, #16
 8008334:	4463      	add	r3, ip
 8008336:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800833a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008344:	4576      	cmp	r6, lr
 8008346:	f849 3b04 	str.w	r3, [r9], #4
 800834a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800834e:	d8e5      	bhi.n	800831c <__mdiff+0x88>
 8008350:	1b33      	subs	r3, r6, r4
 8008352:	3b15      	subs	r3, #21
 8008354:	f023 0303 	bic.w	r3, r3, #3
 8008358:	3415      	adds	r4, #21
 800835a:	3304      	adds	r3, #4
 800835c:	42a6      	cmp	r6, r4
 800835e:	bf38      	it	cc
 8008360:	2304      	movcc	r3, #4
 8008362:	441d      	add	r5, r3
 8008364:	445b      	add	r3, fp
 8008366:	461e      	mov	r6, r3
 8008368:	462c      	mov	r4, r5
 800836a:	4544      	cmp	r4, r8
 800836c:	d30e      	bcc.n	800838c <__mdiff+0xf8>
 800836e:	f108 0103 	add.w	r1, r8, #3
 8008372:	1b49      	subs	r1, r1, r5
 8008374:	f021 0103 	bic.w	r1, r1, #3
 8008378:	3d03      	subs	r5, #3
 800837a:	45a8      	cmp	r8, r5
 800837c:	bf38      	it	cc
 800837e:	2100      	movcc	r1, #0
 8008380:	440b      	add	r3, r1
 8008382:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008386:	b191      	cbz	r1, 80083ae <__mdiff+0x11a>
 8008388:	6117      	str	r7, [r2, #16]
 800838a:	e79d      	b.n	80082c8 <__mdiff+0x34>
 800838c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008390:	46e6      	mov	lr, ip
 8008392:	0c08      	lsrs	r0, r1, #16
 8008394:	fa1c fc81 	uxtah	ip, ip, r1
 8008398:	4471      	add	r1, lr
 800839a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800839e:	b289      	uxth	r1, r1
 80083a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083a4:	f846 1b04 	str.w	r1, [r6], #4
 80083a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083ac:	e7dd      	b.n	800836a <__mdiff+0xd6>
 80083ae:	3f01      	subs	r7, #1
 80083b0:	e7e7      	b.n	8008382 <__mdiff+0xee>
 80083b2:	bf00      	nop
 80083b4:	08009836 	.word	0x08009836
 80083b8:	080098be 	.word	0x080098be

080083bc <__ulp>:
 80083bc:	b082      	sub	sp, #8
 80083be:	ed8d 0b00 	vstr	d0, [sp]
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <__ulp+0x48>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dc08      	bgt.n	80083e2 <__ulp+0x26>
 80083d0:	425b      	negs	r3, r3
 80083d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80083d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80083da:	da04      	bge.n	80083e6 <__ulp+0x2a>
 80083dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80083e0:	4113      	asrs	r3, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	e008      	b.n	80083f8 <__ulp+0x3c>
 80083e6:	f1a2 0314 	sub.w	r3, r2, #20
 80083ea:	2b1e      	cmp	r3, #30
 80083ec:	bfda      	itte	le
 80083ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80083f2:	40da      	lsrle	r2, r3
 80083f4:	2201      	movgt	r2, #1
 80083f6:	2300      	movs	r3, #0
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	ec41 0b10 	vmov	d0, r0, r1
 8008400:	b002      	add	sp, #8
 8008402:	4770      	bx	lr
 8008404:	7ff00000 	.word	0x7ff00000

08008408 <__b2d>:
 8008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	6906      	ldr	r6, [r0, #16]
 800840e:	f100 0814 	add.w	r8, r0, #20
 8008412:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008416:	1f37      	subs	r7, r6, #4
 8008418:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800841c:	4610      	mov	r0, r2
 800841e:	f7ff fd53 	bl	8007ec8 <__hi0bits>
 8008422:	f1c0 0320 	rsb	r3, r0, #32
 8008426:	280a      	cmp	r0, #10
 8008428:	600b      	str	r3, [r1, #0]
 800842a:	491b      	ldr	r1, [pc, #108]	@ (8008498 <__b2d+0x90>)
 800842c:	dc15      	bgt.n	800845a <__b2d+0x52>
 800842e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008432:	fa22 f30c 	lsr.w	r3, r2, ip
 8008436:	45b8      	cmp	r8, r7
 8008438:	ea43 0501 	orr.w	r5, r3, r1
 800843c:	bf34      	ite	cc
 800843e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008442:	2300      	movcs	r3, #0
 8008444:	3015      	adds	r0, #21
 8008446:	fa02 f000 	lsl.w	r0, r2, r0
 800844a:	fa23 f30c 	lsr.w	r3, r3, ip
 800844e:	4303      	orrs	r3, r0
 8008450:	461c      	mov	r4, r3
 8008452:	ec45 4b10 	vmov	d0, r4, r5
 8008456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800845a:	45b8      	cmp	r8, r7
 800845c:	bf3a      	itte	cc
 800845e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008462:	f1a6 0708 	subcc.w	r7, r6, #8
 8008466:	2300      	movcs	r3, #0
 8008468:	380b      	subs	r0, #11
 800846a:	d012      	beq.n	8008492 <__b2d+0x8a>
 800846c:	f1c0 0120 	rsb	r1, r0, #32
 8008470:	fa23 f401 	lsr.w	r4, r3, r1
 8008474:	4082      	lsls	r2, r0
 8008476:	4322      	orrs	r2, r4
 8008478:	4547      	cmp	r7, r8
 800847a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800847e:	bf8c      	ite	hi
 8008480:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008484:	2200      	movls	r2, #0
 8008486:	4083      	lsls	r3, r0
 8008488:	40ca      	lsrs	r2, r1
 800848a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800848e:	4313      	orrs	r3, r2
 8008490:	e7de      	b.n	8008450 <__b2d+0x48>
 8008492:	ea42 0501 	orr.w	r5, r2, r1
 8008496:	e7db      	b.n	8008450 <__b2d+0x48>
 8008498:	3ff00000 	.word	0x3ff00000

0800849c <__d2b>:
 800849c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084a0:	460f      	mov	r7, r1
 80084a2:	2101      	movs	r1, #1
 80084a4:	ec59 8b10 	vmov	r8, r9, d0
 80084a8:	4616      	mov	r6, r2
 80084aa:	f7ff fc1b 	bl	8007ce4 <_Balloc>
 80084ae:	4604      	mov	r4, r0
 80084b0:	b930      	cbnz	r0, 80084c0 <__d2b+0x24>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4b23      	ldr	r3, [pc, #140]	@ (8008544 <__d2b+0xa8>)
 80084b6:	4824      	ldr	r0, [pc, #144]	@ (8008548 <__d2b+0xac>)
 80084b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80084bc:	f000 f986 	bl	80087cc <__assert_func>
 80084c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084c8:	b10d      	cbz	r5, 80084ce <__d2b+0x32>
 80084ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	f1b8 0300 	subs.w	r3, r8, #0
 80084d4:	d023      	beq.n	800851e <__d2b+0x82>
 80084d6:	4668      	mov	r0, sp
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	f7ff fd14 	bl	8007f06 <__lo0bits>
 80084de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084e2:	b1d0      	cbz	r0, 800851a <__d2b+0x7e>
 80084e4:	f1c0 0320 	rsb	r3, r0, #32
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	430b      	orrs	r3, r1
 80084ee:	40c2      	lsrs	r2, r0
 80084f0:	6163      	str	r3, [r4, #20]
 80084f2:	9201      	str	r2, [sp, #4]
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	61a3      	str	r3, [r4, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf0c      	ite	eq
 80084fc:	2201      	moveq	r2, #1
 80084fe:	2202      	movne	r2, #2
 8008500:	6122      	str	r2, [r4, #16]
 8008502:	b1a5      	cbz	r5, 800852e <__d2b+0x92>
 8008504:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008508:	4405      	add	r5, r0
 800850a:	603d      	str	r5, [r7, #0]
 800850c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008510:	6030      	str	r0, [r6, #0]
 8008512:	4620      	mov	r0, r4
 8008514:	b003      	add	sp, #12
 8008516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800851a:	6161      	str	r1, [r4, #20]
 800851c:	e7ea      	b.n	80084f4 <__d2b+0x58>
 800851e:	a801      	add	r0, sp, #4
 8008520:	f7ff fcf1 	bl	8007f06 <__lo0bits>
 8008524:	9b01      	ldr	r3, [sp, #4]
 8008526:	6163      	str	r3, [r4, #20]
 8008528:	3020      	adds	r0, #32
 800852a:	2201      	movs	r2, #1
 800852c:	e7e8      	b.n	8008500 <__d2b+0x64>
 800852e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008532:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008536:	6038      	str	r0, [r7, #0]
 8008538:	6918      	ldr	r0, [r3, #16]
 800853a:	f7ff fcc5 	bl	8007ec8 <__hi0bits>
 800853e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008542:	e7e5      	b.n	8008510 <__d2b+0x74>
 8008544:	08009836 	.word	0x08009836
 8008548:	080098be 	.word	0x080098be

0800854c <__ratio>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	b085      	sub	sp, #20
 8008552:	e9cd 1000 	strd	r1, r0, [sp]
 8008556:	a902      	add	r1, sp, #8
 8008558:	f7ff ff56 	bl	8008408 <__b2d>
 800855c:	9800      	ldr	r0, [sp, #0]
 800855e:	a903      	add	r1, sp, #12
 8008560:	ec55 4b10 	vmov	r4, r5, d0
 8008564:	f7ff ff50 	bl	8008408 <__b2d>
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	6919      	ldr	r1, [r3, #16]
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	1ac9      	subs	r1, r1, r3
 8008572:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	ec5b ab10 	vmov	sl, fp, d0
 800857c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008580:	2b00      	cmp	r3, #0
 8008582:	bfce      	itee	gt
 8008584:	462a      	movgt	r2, r5
 8008586:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800858a:	465a      	movle	r2, fp
 800858c:	462f      	mov	r7, r5
 800858e:	46d9      	mov	r9, fp
 8008590:	bfcc      	ite	gt
 8008592:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008596:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800859a:	464b      	mov	r3, r9
 800859c:	4652      	mov	r2, sl
 800859e:	4620      	mov	r0, r4
 80085a0:	4639      	mov	r1, r7
 80085a2:	f7f8 f95b 	bl	800085c <__aeabi_ddiv>
 80085a6:	ec41 0b10 	vmov	d0, r0, r1
 80085aa:	b005      	add	sp, #20
 80085ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085b0 <__copybits>:
 80085b0:	3901      	subs	r1, #1
 80085b2:	b570      	push	{r4, r5, r6, lr}
 80085b4:	1149      	asrs	r1, r1, #5
 80085b6:	6914      	ldr	r4, [r2, #16]
 80085b8:	3101      	adds	r1, #1
 80085ba:	f102 0314 	add.w	r3, r2, #20
 80085be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80085c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80085c6:	1f05      	subs	r5, r0, #4
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	d30c      	bcc.n	80085e6 <__copybits+0x36>
 80085cc:	1aa3      	subs	r3, r4, r2
 80085ce:	3b11      	subs	r3, #17
 80085d0:	f023 0303 	bic.w	r3, r3, #3
 80085d4:	3211      	adds	r2, #17
 80085d6:	42a2      	cmp	r2, r4
 80085d8:	bf88      	it	hi
 80085da:	2300      	movhi	r3, #0
 80085dc:	4418      	add	r0, r3
 80085de:	2300      	movs	r3, #0
 80085e0:	4288      	cmp	r0, r1
 80085e2:	d305      	bcc.n	80085f0 <__copybits+0x40>
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80085ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80085ee:	e7eb      	b.n	80085c8 <__copybits+0x18>
 80085f0:	f840 3b04 	str.w	r3, [r0], #4
 80085f4:	e7f4      	b.n	80085e0 <__copybits+0x30>

080085f6 <__any_on>:
 80085f6:	f100 0214 	add.w	r2, r0, #20
 80085fa:	6900      	ldr	r0, [r0, #16]
 80085fc:	114b      	asrs	r3, r1, #5
 80085fe:	4298      	cmp	r0, r3
 8008600:	b510      	push	{r4, lr}
 8008602:	db11      	blt.n	8008628 <__any_on+0x32>
 8008604:	dd0a      	ble.n	800861c <__any_on+0x26>
 8008606:	f011 011f 	ands.w	r1, r1, #31
 800860a:	d007      	beq.n	800861c <__any_on+0x26>
 800860c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008610:	fa24 f001 	lsr.w	r0, r4, r1
 8008614:	fa00 f101 	lsl.w	r1, r0, r1
 8008618:	428c      	cmp	r4, r1
 800861a:	d10b      	bne.n	8008634 <__any_on+0x3e>
 800861c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008620:	4293      	cmp	r3, r2
 8008622:	d803      	bhi.n	800862c <__any_on+0x36>
 8008624:	2000      	movs	r0, #0
 8008626:	bd10      	pop	{r4, pc}
 8008628:	4603      	mov	r3, r0
 800862a:	e7f7      	b.n	800861c <__any_on+0x26>
 800862c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008630:	2900      	cmp	r1, #0
 8008632:	d0f5      	beq.n	8008620 <__any_on+0x2a>
 8008634:	2001      	movs	r0, #1
 8008636:	e7f6      	b.n	8008626 <__any_on+0x30>

08008638 <__ascii_wctomb>:
 8008638:	4603      	mov	r3, r0
 800863a:	4608      	mov	r0, r1
 800863c:	b141      	cbz	r1, 8008650 <__ascii_wctomb+0x18>
 800863e:	2aff      	cmp	r2, #255	@ 0xff
 8008640:	d904      	bls.n	800864c <__ascii_wctomb+0x14>
 8008642:	228a      	movs	r2, #138	@ 0x8a
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	4770      	bx	lr
 800864c:	700a      	strb	r2, [r1, #0]
 800864e:	2001      	movs	r0, #1
 8008650:	4770      	bx	lr
	...

08008654 <__sflush_r>:
 8008654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	0716      	lsls	r6, r2, #28
 800865e:	4605      	mov	r5, r0
 8008660:	460c      	mov	r4, r1
 8008662:	d454      	bmi.n	800870e <__sflush_r+0xba>
 8008664:	684b      	ldr	r3, [r1, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dc02      	bgt.n	8008670 <__sflush_r+0x1c>
 800866a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	dd48      	ble.n	8008702 <__sflush_r+0xae>
 8008670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008672:	2e00      	cmp	r6, #0
 8008674:	d045      	beq.n	8008702 <__sflush_r+0xae>
 8008676:	2300      	movs	r3, #0
 8008678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800867c:	682f      	ldr	r7, [r5, #0]
 800867e:	6a21      	ldr	r1, [r4, #32]
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	d030      	beq.n	80086e6 <__sflush_r+0x92>
 8008684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	0759      	lsls	r1, r3, #29
 800868a:	d505      	bpl.n	8008698 <__sflush_r+0x44>
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008692:	b10b      	cbz	r3, 8008698 <__sflush_r+0x44>
 8008694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800869c:	6a21      	ldr	r1, [r4, #32]
 800869e:	4628      	mov	r0, r5
 80086a0:	47b0      	blx	r6
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	d106      	bne.n	80086b6 <__sflush_r+0x62>
 80086a8:	6829      	ldr	r1, [r5, #0]
 80086aa:	291d      	cmp	r1, #29
 80086ac:	d82b      	bhi.n	8008706 <__sflush_r+0xb2>
 80086ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008758 <__sflush_r+0x104>)
 80086b0:	40ca      	lsrs	r2, r1
 80086b2:	07d6      	lsls	r6, r2, #31
 80086b4:	d527      	bpl.n	8008706 <__sflush_r+0xb2>
 80086b6:	2200      	movs	r2, #0
 80086b8:	6062      	str	r2, [r4, #4]
 80086ba:	04d9      	lsls	r1, r3, #19
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	d504      	bpl.n	80086cc <__sflush_r+0x78>
 80086c2:	1c42      	adds	r2, r0, #1
 80086c4:	d101      	bne.n	80086ca <__sflush_r+0x76>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	b903      	cbnz	r3, 80086cc <__sflush_r+0x78>
 80086ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80086cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ce:	602f      	str	r7, [r5, #0]
 80086d0:	b1b9      	cbz	r1, 8008702 <__sflush_r+0xae>
 80086d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086d6:	4299      	cmp	r1, r3
 80086d8:	d002      	beq.n	80086e0 <__sflush_r+0x8c>
 80086da:	4628      	mov	r0, r5
 80086dc:	f7fe febe 	bl	800745c <_free_r>
 80086e0:	2300      	movs	r3, #0
 80086e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e4:	e00d      	b.n	8008702 <__sflush_r+0xae>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b0      	blx	r6
 80086ec:	4602      	mov	r2, r0
 80086ee:	1c50      	adds	r0, r2, #1
 80086f0:	d1c9      	bne.n	8008686 <__sflush_r+0x32>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c6      	beq.n	8008686 <__sflush_r+0x32>
 80086f8:	2b1d      	cmp	r3, #29
 80086fa:	d001      	beq.n	8008700 <__sflush_r+0xac>
 80086fc:	2b16      	cmp	r3, #22
 80086fe:	d11e      	bne.n	800873e <__sflush_r+0xea>
 8008700:	602f      	str	r7, [r5, #0]
 8008702:	2000      	movs	r0, #0
 8008704:	e022      	b.n	800874c <__sflush_r+0xf8>
 8008706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870a:	b21b      	sxth	r3, r3
 800870c:	e01b      	b.n	8008746 <__sflush_r+0xf2>
 800870e:	690f      	ldr	r7, [r1, #16]
 8008710:	2f00      	cmp	r7, #0
 8008712:	d0f6      	beq.n	8008702 <__sflush_r+0xae>
 8008714:	0793      	lsls	r3, r2, #30
 8008716:	680e      	ldr	r6, [r1, #0]
 8008718:	bf08      	it	eq
 800871a:	694b      	ldreq	r3, [r1, #20]
 800871c:	600f      	str	r7, [r1, #0]
 800871e:	bf18      	it	ne
 8008720:	2300      	movne	r3, #0
 8008722:	eba6 0807 	sub.w	r8, r6, r7
 8008726:	608b      	str	r3, [r1, #8]
 8008728:	f1b8 0f00 	cmp.w	r8, #0
 800872c:	dde9      	ble.n	8008702 <__sflush_r+0xae>
 800872e:	6a21      	ldr	r1, [r4, #32]
 8008730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008732:	4643      	mov	r3, r8
 8008734:	463a      	mov	r2, r7
 8008736:	4628      	mov	r0, r5
 8008738:	47b0      	blx	r6
 800873a:	2800      	cmp	r0, #0
 800873c:	dc08      	bgt.n	8008750 <__sflush_r+0xfc>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	4407      	add	r7, r0
 8008752:	eba8 0800 	sub.w	r8, r8, r0
 8008756:	e7e7      	b.n	8008728 <__sflush_r+0xd4>
 8008758:	20400001 	.word	0x20400001

0800875c <_fflush_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	4605      	mov	r5, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b913      	cbnz	r3, 800876c <_fflush_r+0x10>
 8008766:	2500      	movs	r5, #0
 8008768:	4628      	mov	r0, r5
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	b118      	cbz	r0, 8008776 <_fflush_r+0x1a>
 800876e:	6a03      	ldr	r3, [r0, #32]
 8008770:	b90b      	cbnz	r3, 8008776 <_fflush_r+0x1a>
 8008772:	f7fe fd4d 	bl	8007210 <__sinit>
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0f3      	beq.n	8008766 <_fflush_r+0xa>
 800877e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008780:	07d0      	lsls	r0, r2, #31
 8008782:	d404      	bmi.n	800878e <_fflush_r+0x32>
 8008784:	0599      	lsls	r1, r3, #22
 8008786:	d402      	bmi.n	800878e <_fflush_r+0x32>
 8008788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878a:	f7fe fe46 	bl	800741a <__retarget_lock_acquire_recursive>
 800878e:	4628      	mov	r0, r5
 8008790:	4621      	mov	r1, r4
 8008792:	f7ff ff5f 	bl	8008654 <__sflush_r>
 8008796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008798:	07da      	lsls	r2, r3, #31
 800879a:	4605      	mov	r5, r0
 800879c:	d4e4      	bmi.n	8008768 <_fflush_r+0xc>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	059b      	lsls	r3, r3, #22
 80087a2:	d4e1      	bmi.n	8008768 <_fflush_r+0xc>
 80087a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a6:	f7fe fe39 	bl	800741c <__retarget_lock_release_recursive>
 80087aa:	e7dd      	b.n	8008768 <_fflush_r+0xc>

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	@ (80087c8 <_sbrk_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 fe6c 	bl	8002494 <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20018e10 	.word	0x20018e10

080087cc <__assert_func>:
 80087cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ce:	4614      	mov	r4, r2
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b09      	ldr	r3, [pc, #36]	@ (80087f8 <__assert_func+0x2c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4605      	mov	r5, r0
 80087d8:	68d8      	ldr	r0, [r3, #12]
 80087da:	b14c      	cbz	r4, 80087f0 <__assert_func+0x24>
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <__assert_func+0x30>)
 80087de:	9100      	str	r1, [sp, #0]
 80087e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087e4:	4906      	ldr	r1, [pc, #24]	@ (8008800 <__assert_func+0x34>)
 80087e6:	462b      	mov	r3, r5
 80087e8:	f000 f82a 	bl	8008840 <fiprintf>
 80087ec:	f000 f83a 	bl	8008864 <abort>
 80087f0:	4b04      	ldr	r3, [pc, #16]	@ (8008804 <__assert_func+0x38>)
 80087f2:	461c      	mov	r4, r3
 80087f4:	e7f3      	b.n	80087de <__assert_func+0x12>
 80087f6:	bf00      	nop
 80087f8:	20000274 	.word	0x20000274
 80087fc:	08009917 	.word	0x08009917
 8008800:	08009924 	.word	0x08009924
 8008804:	08009952 	.word	0x08009952

08008808 <_calloc_r>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	fba1 5402 	umull	r5, r4, r1, r2
 800880e:	b934      	cbnz	r4, 800881e <_calloc_r+0x16>
 8008810:	4629      	mov	r1, r5
 8008812:	f7ff f9c9 	bl	8007ba8 <_malloc_r>
 8008816:	4606      	mov	r6, r0
 8008818:	b928      	cbnz	r0, 8008826 <_calloc_r+0x1e>
 800881a:	4630      	mov	r0, r6
 800881c:	bd70      	pop	{r4, r5, r6, pc}
 800881e:	220c      	movs	r2, #12
 8008820:	6002      	str	r2, [r0, #0]
 8008822:	2600      	movs	r6, #0
 8008824:	e7f9      	b.n	800881a <_calloc_r+0x12>
 8008826:	462a      	mov	r2, r5
 8008828:	4621      	mov	r1, r4
 800882a:	f7fe fd6a 	bl	8007302 <memset>
 800882e:	e7f4      	b.n	800881a <_calloc_r+0x12>

08008830 <malloc>:
 8008830:	4b02      	ldr	r3, [pc, #8]	@ (800883c <malloc+0xc>)
 8008832:	4601      	mov	r1, r0
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	f7ff b9b7 	b.w	8007ba8 <_malloc_r>
 800883a:	bf00      	nop
 800883c:	20000274 	.word	0x20000274

08008840 <fiprintf>:
 8008840:	b40e      	push	{r1, r2, r3}
 8008842:	b503      	push	{r0, r1, lr}
 8008844:	4601      	mov	r1, r0
 8008846:	ab03      	add	r3, sp, #12
 8008848:	4805      	ldr	r0, [pc, #20]	@ (8008860 <fiprintf+0x20>)
 800884a:	f853 2b04 	ldr.w	r2, [r3], #4
 800884e:	6800      	ldr	r0, [r0, #0]
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	f000 f837 	bl	80088c4 <_vfiprintf_r>
 8008856:	b002      	add	sp, #8
 8008858:	f85d eb04 	ldr.w	lr, [sp], #4
 800885c:	b003      	add	sp, #12
 800885e:	4770      	bx	lr
 8008860:	20000274 	.word	0x20000274

08008864 <abort>:
 8008864:	b508      	push	{r3, lr}
 8008866:	2006      	movs	r0, #6
 8008868:	f000 fb8c 	bl	8008f84 <raise>
 800886c:	2001      	movs	r0, #1
 800886e:	f7f9 fd98 	bl	80023a2 <_exit>

08008872 <__sfputc_r>:
 8008872:	6893      	ldr	r3, [r2, #8]
 8008874:	3b01      	subs	r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	b410      	push	{r4}
 800887a:	6093      	str	r3, [r2, #8]
 800887c:	da08      	bge.n	8008890 <__sfputc_r+0x1e>
 800887e:	6994      	ldr	r4, [r2, #24]
 8008880:	42a3      	cmp	r3, r4
 8008882:	db01      	blt.n	8008888 <__sfputc_r+0x16>
 8008884:	290a      	cmp	r1, #10
 8008886:	d103      	bne.n	8008890 <__sfputc_r+0x1e>
 8008888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800888c:	f000 babe 	b.w	8008e0c <__swbuf_r>
 8008890:	6813      	ldr	r3, [r2, #0]
 8008892:	1c58      	adds	r0, r3, #1
 8008894:	6010      	str	r0, [r2, #0]
 8008896:	7019      	strb	r1, [r3, #0]
 8008898:	4608      	mov	r0, r1
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <__sfputs_r>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	4614      	mov	r4, r2
 80088a8:	18d5      	adds	r5, r2, r3
 80088aa:	42ac      	cmp	r4, r5
 80088ac:	d101      	bne.n	80088b2 <__sfputs_r+0x12>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e007      	b.n	80088c2 <__sfputs_r+0x22>
 80088b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b6:	463a      	mov	r2, r7
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff ffda 	bl	8008872 <__sfputc_r>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d1f3      	bne.n	80088aa <__sfputs_r+0xa>
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088c4 <_vfiprintf_r>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	460d      	mov	r5, r1
 80088ca:	b09d      	sub	sp, #116	@ 0x74
 80088cc:	4614      	mov	r4, r2
 80088ce:	4698      	mov	r8, r3
 80088d0:	4606      	mov	r6, r0
 80088d2:	b118      	cbz	r0, 80088dc <_vfiprintf_r+0x18>
 80088d4:	6a03      	ldr	r3, [r0, #32]
 80088d6:	b90b      	cbnz	r3, 80088dc <_vfiprintf_r+0x18>
 80088d8:	f7fe fc9a 	bl	8007210 <__sinit>
 80088dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d405      	bmi.n	80088ee <_vfiprintf_r+0x2a>
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	059a      	lsls	r2, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_vfiprintf_r+0x2a>
 80088e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ea:	f7fe fd96 	bl	800741a <__retarget_lock_acquire_recursive>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	071b      	lsls	r3, r3, #28
 80088f2:	d501      	bpl.n	80088f8 <_vfiprintf_r+0x34>
 80088f4:	692b      	ldr	r3, [r5, #16]
 80088f6:	b99b      	cbnz	r3, 8008920 <_vfiprintf_r+0x5c>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	f000 fac4 	bl	8008e88 <__swsetup_r>
 8008900:	b170      	cbz	r0, 8008920 <_vfiprintf_r+0x5c>
 8008902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008904:	07dc      	lsls	r4, r3, #31
 8008906:	d504      	bpl.n	8008912 <_vfiprintf_r+0x4e>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	b01d      	add	sp, #116	@ 0x74
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	0598      	lsls	r0, r3, #22
 8008916:	d4f7      	bmi.n	8008908 <_vfiprintf_r+0x44>
 8008918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800891a:	f7fe fd7f 	bl	800741c <__retarget_lock_release_recursive>
 800891e:	e7f3      	b.n	8008908 <_vfiprintf_r+0x44>
 8008920:	2300      	movs	r3, #0
 8008922:	9309      	str	r3, [sp, #36]	@ 0x24
 8008924:	2320      	movs	r3, #32
 8008926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800892a:	f8cd 800c 	str.w	r8, [sp, #12]
 800892e:	2330      	movs	r3, #48	@ 0x30
 8008930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ae0 <_vfiprintf_r+0x21c>
 8008934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008938:	f04f 0901 	mov.w	r9, #1
 800893c:	4623      	mov	r3, r4
 800893e:	469a      	mov	sl, r3
 8008940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008944:	b10a      	cbz	r2, 800894a <_vfiprintf_r+0x86>
 8008946:	2a25      	cmp	r2, #37	@ 0x25
 8008948:	d1f9      	bne.n	800893e <_vfiprintf_r+0x7a>
 800894a:	ebba 0b04 	subs.w	fp, sl, r4
 800894e:	d00b      	beq.n	8008968 <_vfiprintf_r+0xa4>
 8008950:	465b      	mov	r3, fp
 8008952:	4622      	mov	r2, r4
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ffa2 	bl	80088a0 <__sfputs_r>
 800895c:	3001      	adds	r0, #1
 800895e:	f000 80a7 	beq.w	8008ab0 <_vfiprintf_r+0x1ec>
 8008962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008964:	445a      	add	r2, fp
 8008966:	9209      	str	r2, [sp, #36]	@ 0x24
 8008968:	f89a 3000 	ldrb.w	r3, [sl]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 809f 	beq.w	8008ab0 <_vfiprintf_r+0x1ec>
 8008972:	2300      	movs	r3, #0
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897c:	f10a 0a01 	add.w	sl, sl, #1
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008988:	931a      	str	r3, [sp, #104]	@ 0x68
 800898a:	4654      	mov	r4, sl
 800898c:	2205      	movs	r2, #5
 800898e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008992:	4853      	ldr	r0, [pc, #332]	@ (8008ae0 <_vfiprintf_r+0x21c>)
 8008994:	f7f7 fc2c 	bl	80001f0 <memchr>
 8008998:	9a04      	ldr	r2, [sp, #16]
 800899a:	b9d8      	cbnz	r0, 80089d4 <_vfiprintf_r+0x110>
 800899c:	06d1      	lsls	r1, r2, #27
 800899e:	bf44      	itt	mi
 80089a0:	2320      	movmi	r3, #32
 80089a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a6:	0713      	lsls	r3, r2, #28
 80089a8:	bf44      	itt	mi
 80089aa:	232b      	movmi	r3, #43	@ 0x2b
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b0:	f89a 3000 	ldrb.w	r3, [sl]
 80089b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b6:	d015      	beq.n	80089e4 <_vfiprintf_r+0x120>
 80089b8:	9a07      	ldr	r2, [sp, #28]
 80089ba:	4654      	mov	r4, sl
 80089bc:	2000      	movs	r0, #0
 80089be:	f04f 0c0a 	mov.w	ip, #10
 80089c2:	4621      	mov	r1, r4
 80089c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c8:	3b30      	subs	r3, #48	@ 0x30
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d94b      	bls.n	8008a66 <_vfiprintf_r+0x1a2>
 80089ce:	b1b0      	cbz	r0, 80089fe <_vfiprintf_r+0x13a>
 80089d0:	9207      	str	r2, [sp, #28]
 80089d2:	e014      	b.n	80089fe <_vfiprintf_r+0x13a>
 80089d4:	eba0 0308 	sub.w	r3, r0, r8
 80089d8:	fa09 f303 	lsl.w	r3, r9, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	46a2      	mov	sl, r4
 80089e2:	e7d2      	b.n	800898a <_vfiprintf_r+0xc6>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	1d19      	adds	r1, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	9103      	str	r1, [sp, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfbb      	ittet	lt
 80089f0:	425b      	neglt	r3, r3
 80089f2:	f042 0202 	orrlt.w	r2, r2, #2
 80089f6:	9307      	strge	r3, [sp, #28]
 80089f8:	9307      	strlt	r3, [sp, #28]
 80089fa:	bfb8      	it	lt
 80089fc:	9204      	strlt	r2, [sp, #16]
 80089fe:	7823      	ldrb	r3, [r4, #0]
 8008a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a02:	d10a      	bne.n	8008a1a <_vfiprintf_r+0x156>
 8008a04:	7863      	ldrb	r3, [r4, #1]
 8008a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a08:	d132      	bne.n	8008a70 <_vfiprintf_r+0x1ac>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9203      	str	r2, [sp, #12]
 8008a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a16:	3402      	adds	r4, #2
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008af0 <_vfiprintf_r+0x22c>
 8008a1e:	7821      	ldrb	r1, [r4, #0]
 8008a20:	2203      	movs	r2, #3
 8008a22:	4650      	mov	r0, sl
 8008a24:	f7f7 fbe4 	bl	80001f0 <memchr>
 8008a28:	b138      	cbz	r0, 8008a3a <_vfiprintf_r+0x176>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	eba0 000a 	sub.w	r0, r0, sl
 8008a30:	2240      	movs	r2, #64	@ 0x40
 8008a32:	4082      	lsls	r2, r0
 8008a34:	4313      	orrs	r3, r2
 8008a36:	3401      	adds	r4, #1
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3e:	4829      	ldr	r0, [pc, #164]	@ (8008ae4 <_vfiprintf_r+0x220>)
 8008a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a44:	2206      	movs	r2, #6
 8008a46:	f7f7 fbd3 	bl	80001f0 <memchr>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d03f      	beq.n	8008ace <_vfiprintf_r+0x20a>
 8008a4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ae8 <_vfiprintf_r+0x224>)
 8008a50:	bb1b      	cbnz	r3, 8008a9a <_vfiprintf_r+0x1d6>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	3307      	adds	r3, #7
 8008a56:	f023 0307 	bic.w	r3, r3, #7
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a60:	443b      	add	r3, r7
 8008a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a64:	e76a      	b.n	800893c <_vfiprintf_r+0x78>
 8008a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	e7a8      	b.n	80089c2 <_vfiprintf_r+0xfe>
 8008a70:	2300      	movs	r3, #0
 8008a72:	3401      	adds	r4, #1
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	4619      	mov	r1, r3
 8008a78:	f04f 0c0a 	mov.w	ip, #10
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a82:	3a30      	subs	r2, #48	@ 0x30
 8008a84:	2a09      	cmp	r2, #9
 8008a86:	d903      	bls.n	8008a90 <_vfiprintf_r+0x1cc>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0c6      	beq.n	8008a1a <_vfiprintf_r+0x156>
 8008a8c:	9105      	str	r1, [sp, #20]
 8008a8e:	e7c4      	b.n	8008a1a <_vfiprintf_r+0x156>
 8008a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a94:	4604      	mov	r4, r0
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7f0      	b.n	8008a7c <_vfiprintf_r+0x1b8>
 8008a9a:	ab03      	add	r3, sp, #12
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4b12      	ldr	r3, [pc, #72]	@ (8008aec <_vfiprintf_r+0x228>)
 8008aa2:	a904      	add	r1, sp, #16
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f3af 8000 	nop.w
 8008aaa:	4607      	mov	r7, r0
 8008aac:	1c78      	adds	r0, r7, #1
 8008aae:	d1d6      	bne.n	8008a5e <_vfiprintf_r+0x19a>
 8008ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ab2:	07d9      	lsls	r1, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_vfiprintf_r+0x1fe>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	059a      	lsls	r2, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_vfiprintf_r+0x1fe>
 8008abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008abe:	f7fe fcad 	bl	800741c <__retarget_lock_release_recursive>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	065b      	lsls	r3, r3, #25
 8008ac6:	f53f af1f 	bmi.w	8008908 <_vfiprintf_r+0x44>
 8008aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008acc:	e71e      	b.n	800890c <_vfiprintf_r+0x48>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <_vfiprintf_r+0x228>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f000 f879 	bl	8008bd0 <_printf_i>
 8008ade:	e7e4      	b.n	8008aaa <_vfiprintf_r+0x1e6>
 8008ae0:	08009953 	.word	0x08009953
 8008ae4:	0800995d 	.word	0x0800995d
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	080088a1 	.word	0x080088a1
 8008af0:	08009959 	.word	0x08009959

08008af4 <_printf_common>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	4616      	mov	r6, r2
 8008afa:	4698      	mov	r8, r3
 8008afc:	688a      	ldr	r2, [r1, #8]
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bfb8      	it	lt
 8008b08:	4613      	movlt	r3, r2
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b10:	4607      	mov	r7, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b10a      	cbz	r2, 8008b1a <_printf_common+0x26>
 8008b16:	3301      	adds	r3, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	6833      	ldrmi	r3, [r6, #0]
 8008b22:	3302      	addmi	r3, #2
 8008b24:	6033      	strmi	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	f015 0506 	ands.w	r5, r5, #6
 8008b2c:	d106      	bne.n	8008b3c <_printf_common+0x48>
 8008b2e:	f104 0a19 	add.w	sl, r4, #25
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc26      	bgt.n	8008b8a <_printf_common+0x96>
 8008b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	3b00      	subs	r3, #0
 8008b44:	bf18      	it	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	0692      	lsls	r2, r2, #26
 8008b4a:	d42b      	bmi.n	8008ba4 <_printf_common+0xb0>
 8008b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b50:	4641      	mov	r1, r8
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c8      	blx	r9
 8008b56:	3001      	adds	r0, #1
 8008b58:	d01e      	beq.n	8008b98 <_printf_common+0xa4>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	f003 0306 	and.w	r3, r3, #6
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	bf02      	ittt	eq
 8008b66:	68e5      	ldreq	r5, [r4, #12]
 8008b68:	6833      	ldreq	r3, [r6, #0]
 8008b6a:	1aed      	subeq	r5, r5, r3
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	bf0c      	ite	eq
 8008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b74:	2500      	movne	r5, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfc4      	itt	gt
 8008b7a:	1a9b      	subgt	r3, r3, r2
 8008b7c:	18ed      	addgt	r5, r5, r3
 8008b7e:	2600      	movs	r6, #0
 8008b80:	341a      	adds	r4, #26
 8008b82:	42b5      	cmp	r5, r6
 8008b84:	d11a      	bne.n	8008bbc <_printf_common+0xc8>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e008      	b.n	8008b9c <_printf_common+0xa8>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4641      	mov	r1, r8
 8008b90:	4638      	mov	r0, r7
 8008b92:	47c8      	blx	r9
 8008b94:	3001      	adds	r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_printf_common+0xac>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7c6      	b.n	8008b32 <_printf_common+0x3e>
 8008ba4:	18e1      	adds	r1, r4, r3
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	2030      	movs	r0, #48	@ 0x30
 8008baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bae:	4422      	add	r2, r4
 8008bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bb8:	3302      	adds	r3, #2
 8008bba:	e7c7      	b.n	8008b4c <_printf_common+0x58>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c8      	blx	r9
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0e6      	beq.n	8008b98 <_printf_common+0xa4>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7d9      	b.n	8008b82 <_printf_common+0x8e>
	...

08008bd0 <_printf_i>:
 8008bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	7e0f      	ldrb	r7, [r1, #24]
 8008bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bd8:	2f78      	cmp	r7, #120	@ 0x78
 8008bda:	4691      	mov	r9, r2
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	469a      	mov	sl, r3
 8008be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008be6:	d807      	bhi.n	8008bf8 <_printf_i+0x28>
 8008be8:	2f62      	cmp	r7, #98	@ 0x62
 8008bea:	d80a      	bhi.n	8008c02 <_printf_i+0x32>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	f000 80d1 	beq.w	8008d94 <_printf_i+0x1c4>
 8008bf2:	2f58      	cmp	r7, #88	@ 0x58
 8008bf4:	f000 80b8 	beq.w	8008d68 <_printf_i+0x198>
 8008bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c00:	e03a      	b.n	8008c78 <_printf_i+0xa8>
 8008c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c06:	2b15      	cmp	r3, #21
 8008c08:	d8f6      	bhi.n	8008bf8 <_printf_i+0x28>
 8008c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c10 <_printf_i+0x40>)
 8008c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008bf9 	.word	0x08008bf9
 8008c1c:	08008bf9 	.word	0x08008bf9
 8008c20:	08008bf9 	.word	0x08008bf9
 8008c24:	08008bf9 	.word	0x08008bf9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bf9 	.word	0x08008bf9
 8008c30:	08008bf9 	.word	0x08008bf9
 8008c34:	08008bf9 	.word	0x08008bf9
 8008c38:	08008bf9 	.word	0x08008bf9
 8008c3c:	08008d7b 	.word	0x08008d7b
 8008c40:	08008ca7 	.word	0x08008ca7
 8008c44:	08008d35 	.word	0x08008d35
 8008c48:	08008bf9 	.word	0x08008bf9
 8008c4c:	08008bf9 	.word	0x08008bf9
 8008c50:	08008d9d 	.word	0x08008d9d
 8008c54:	08008bf9 	.word	0x08008bf9
 8008c58:	08008ca7 	.word	0x08008ca7
 8008c5c:	08008bf9 	.word	0x08008bf9
 8008c60:	08008bf9 	.word	0x08008bf9
 8008c64:	08008d3d 	.word	0x08008d3d
 8008c68:	6833      	ldr	r3, [r6, #0]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6032      	str	r2, [r6, #0]
 8008c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e09c      	b.n	8008db6 <_printf_i+0x1e6>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6031      	str	r1, [r6, #0]
 8008c84:	0606      	lsls	r6, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xbc>
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	e003      	b.n	8008c94 <_printf_i+0xc4>
 8008c8c:	0645      	lsls	r5, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xb8>
 8008c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	da03      	bge.n	8008ca0 <_printf_i+0xd0>
 8008c98:	232d      	movs	r3, #45	@ 0x2d
 8008c9a:	426d      	negs	r5, r5
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca0:	4858      	ldr	r0, [pc, #352]	@ (8008e04 <_printf_i+0x234>)
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e011      	b.n	8008cca <_printf_i+0xfa>
 8008ca6:	6821      	ldr	r1, [r4, #0]
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	0608      	lsls	r0, r1, #24
 8008cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cb0:	d402      	bmi.n	8008cb8 <_printf_i+0xe8>
 8008cb2:	0649      	lsls	r1, r1, #25
 8008cb4:	bf48      	it	mi
 8008cb6:	b2ad      	uxthmi	r5, r5
 8008cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cba:	4852      	ldr	r0, [pc, #328]	@ (8008e04 <_printf_i+0x234>)
 8008cbc:	6033      	str	r3, [r6, #0]
 8008cbe:	bf14      	ite	ne
 8008cc0:	230a      	movne	r3, #10
 8008cc2:	2308      	moveq	r3, #8
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cca:	6866      	ldr	r6, [r4, #4]
 8008ccc:	60a6      	str	r6, [r4, #8]
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	db05      	blt.n	8008cde <_printf_i+0x10e>
 8008cd2:	6821      	ldr	r1, [r4, #0]
 8008cd4:	432e      	orrs	r6, r5
 8008cd6:	f021 0104 	bic.w	r1, r1, #4
 8008cda:	6021      	str	r1, [r4, #0]
 8008cdc:	d04b      	beq.n	8008d76 <_printf_i+0x1a6>
 8008cde:	4616      	mov	r6, r2
 8008ce0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ce4:	fb03 5711 	mls	r7, r3, r1, r5
 8008ce8:	5dc7      	ldrb	r7, [r0, r7]
 8008cea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cee:	462f      	mov	r7, r5
 8008cf0:	42bb      	cmp	r3, r7
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	d9f4      	bls.n	8008ce0 <_printf_i+0x110>
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d10b      	bne.n	8008d12 <_printf_i+0x142>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	07df      	lsls	r7, r3, #31
 8008cfe:	d508      	bpl.n	8008d12 <_printf_i+0x142>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	6861      	ldr	r1, [r4, #4]
 8008d04:	4299      	cmp	r1, r3
 8008d06:	bfde      	ittt	le
 8008d08:	2330      	movle	r3, #48	@ 0x30
 8008d0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d12:	1b92      	subs	r2, r2, r6
 8008d14:	6122      	str	r2, [r4, #16]
 8008d16:	f8cd a000 	str.w	sl, [sp]
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	aa03      	add	r2, sp, #12
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4640      	mov	r0, r8
 8008d22:	f7ff fee7 	bl	8008af4 <_printf_common>
 8008d26:	3001      	adds	r0, #1
 8008d28:	d14a      	bne.n	8008dc0 <_printf_i+0x1f0>
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	b004      	add	sp, #16
 8008d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	f043 0320 	orr.w	r3, r3, #32
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	4832      	ldr	r0, [pc, #200]	@ (8008e08 <_printf_i+0x238>)
 8008d3e:	2778      	movs	r7, #120	@ 0x78
 8008d40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	6831      	ldr	r1, [r6, #0]
 8008d48:	061f      	lsls	r7, r3, #24
 8008d4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d4e:	d402      	bmi.n	8008d56 <_printf_i+0x186>
 8008d50:	065f      	lsls	r7, r3, #25
 8008d52:	bf48      	it	mi
 8008d54:	b2ad      	uxthmi	r5, r5
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	07d9      	lsls	r1, r3, #31
 8008d5a:	bf44      	itt	mi
 8008d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8008d60:	6023      	strmi	r3, [r4, #0]
 8008d62:	b11d      	cbz	r5, 8008d6c <_printf_i+0x19c>
 8008d64:	2310      	movs	r3, #16
 8008d66:	e7ad      	b.n	8008cc4 <_printf_i+0xf4>
 8008d68:	4826      	ldr	r0, [pc, #152]	@ (8008e04 <_printf_i+0x234>)
 8008d6a:	e7e9      	b.n	8008d40 <_printf_i+0x170>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	f023 0320 	bic.w	r3, r3, #32
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	e7f6      	b.n	8008d64 <_printf_i+0x194>
 8008d76:	4616      	mov	r6, r2
 8008d78:	e7bd      	b.n	8008cf6 <_printf_i+0x126>
 8008d7a:	6833      	ldr	r3, [r6, #0]
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	6961      	ldr	r1, [r4, #20]
 8008d80:	1d18      	adds	r0, r3, #4
 8008d82:	6030      	str	r0, [r6, #0]
 8008d84:	062e      	lsls	r6, r5, #24
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	d501      	bpl.n	8008d8e <_printf_i+0x1be>
 8008d8a:	6019      	str	r1, [r3, #0]
 8008d8c:	e002      	b.n	8008d94 <_printf_i+0x1c4>
 8008d8e:	0668      	lsls	r0, r5, #25
 8008d90:	d5fb      	bpl.n	8008d8a <_printf_i+0x1ba>
 8008d92:	8019      	strh	r1, [r3, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	4616      	mov	r6, r2
 8008d9a:	e7bc      	b.n	8008d16 <_printf_i+0x146>
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	6032      	str	r2, [r6, #0]
 8008da2:	681e      	ldr	r6, [r3, #0]
 8008da4:	6862      	ldr	r2, [r4, #4]
 8008da6:	2100      	movs	r1, #0
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7f7 fa21 	bl	80001f0 <memchr>
 8008dae:	b108      	cbz	r0, 8008db4 <_printf_i+0x1e4>
 8008db0:	1b80      	subs	r0, r0, r6
 8008db2:	6060      	str	r0, [r4, #4]
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	2300      	movs	r3, #0
 8008dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dbe:	e7aa      	b.n	8008d16 <_printf_i+0x146>
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	47d0      	blx	sl
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d0ad      	beq.n	8008d2a <_printf_i+0x15a>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	079b      	lsls	r3, r3, #30
 8008dd2:	d413      	bmi.n	8008dfc <_printf_i+0x22c>
 8008dd4:	68e0      	ldr	r0, [r4, #12]
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	bfb8      	it	lt
 8008ddc:	4618      	movlt	r0, r3
 8008dde:	e7a6      	b.n	8008d2e <_printf_i+0x15e>
 8008de0:	2301      	movs	r3, #1
 8008de2:	4632      	mov	r2, r6
 8008de4:	4649      	mov	r1, r9
 8008de6:	4640      	mov	r0, r8
 8008de8:	47d0      	blx	sl
 8008dea:	3001      	adds	r0, #1
 8008dec:	d09d      	beq.n	8008d2a <_printf_i+0x15a>
 8008dee:	3501      	adds	r5, #1
 8008df0:	68e3      	ldr	r3, [r4, #12]
 8008df2:	9903      	ldr	r1, [sp, #12]
 8008df4:	1a5b      	subs	r3, r3, r1
 8008df6:	42ab      	cmp	r3, r5
 8008df8:	dcf2      	bgt.n	8008de0 <_printf_i+0x210>
 8008dfa:	e7eb      	b.n	8008dd4 <_printf_i+0x204>
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	f104 0619 	add.w	r6, r4, #25
 8008e02:	e7f5      	b.n	8008df0 <_printf_i+0x220>
 8008e04:	08009964 	.word	0x08009964
 8008e08:	08009975 	.word	0x08009975

08008e0c <__swbuf_r>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	460e      	mov	r6, r1
 8008e10:	4614      	mov	r4, r2
 8008e12:	4605      	mov	r5, r0
 8008e14:	b118      	cbz	r0, 8008e1e <__swbuf_r+0x12>
 8008e16:	6a03      	ldr	r3, [r0, #32]
 8008e18:	b90b      	cbnz	r3, 8008e1e <__swbuf_r+0x12>
 8008e1a:	f7fe f9f9 	bl	8007210 <__sinit>
 8008e1e:	69a3      	ldr	r3, [r4, #24]
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	071a      	lsls	r2, r3, #28
 8008e26:	d501      	bpl.n	8008e2c <__swbuf_r+0x20>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	b943      	cbnz	r3, 8008e3e <__swbuf_r+0x32>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 f82a 	bl	8008e88 <__swsetup_r>
 8008e34:	b118      	cbz	r0, 8008e3e <__swbuf_r+0x32>
 8008e36:	f04f 37ff 	mov.w	r7, #4294967295
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	6922      	ldr	r2, [r4, #16]
 8008e42:	1a98      	subs	r0, r3, r2
 8008e44:	6963      	ldr	r3, [r4, #20]
 8008e46:	b2f6      	uxtb	r6, r6
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	4637      	mov	r7, r6
 8008e4c:	dc05      	bgt.n	8008e5a <__swbuf_r+0x4e>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fc83 	bl	800875c <_fflush_r>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d1ed      	bne.n	8008e36 <__swbuf_r+0x2a>
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	60a3      	str	r3, [r4, #8]
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	6022      	str	r2, [r4, #0]
 8008e66:	701e      	strb	r6, [r3, #0]
 8008e68:	6962      	ldr	r2, [r4, #20]
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d004      	beq.n	8008e7a <__swbuf_r+0x6e>
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	07db      	lsls	r3, r3, #31
 8008e74:	d5e1      	bpl.n	8008e3a <__swbuf_r+0x2e>
 8008e76:	2e0a      	cmp	r6, #10
 8008e78:	d1df      	bne.n	8008e3a <__swbuf_r+0x2e>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f7ff fc6d 	bl	800875c <_fflush_r>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d0d9      	beq.n	8008e3a <__swbuf_r+0x2e>
 8008e86:	e7d6      	b.n	8008e36 <__swbuf_r+0x2a>

08008e88 <__swsetup_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4b29      	ldr	r3, [pc, #164]	@ (8008f30 <__swsetup_r+0xa8>)
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	460c      	mov	r4, r1
 8008e92:	b118      	cbz	r0, 8008e9c <__swsetup_r+0x14>
 8008e94:	6a03      	ldr	r3, [r0, #32]
 8008e96:	b90b      	cbnz	r3, 8008e9c <__swsetup_r+0x14>
 8008e98:	f7fe f9ba 	bl	8007210 <__sinit>
 8008e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea0:	0719      	lsls	r1, r3, #28
 8008ea2:	d422      	bmi.n	8008eea <__swsetup_r+0x62>
 8008ea4:	06da      	lsls	r2, r3, #27
 8008ea6:	d407      	bmi.n	8008eb8 <__swsetup_r+0x30>
 8008ea8:	2209      	movs	r2, #9
 8008eaa:	602a      	str	r2, [r5, #0]
 8008eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	e033      	b.n	8008f20 <__swsetup_r+0x98>
 8008eb8:	0758      	lsls	r0, r3, #29
 8008eba:	d512      	bpl.n	8008ee2 <__swsetup_r+0x5a>
 8008ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ebe:	b141      	cbz	r1, 8008ed2 <__swsetup_r+0x4a>
 8008ec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	d002      	beq.n	8008ece <__swsetup_r+0x46>
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7fe fac7 	bl	800745c <_free_r>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ed8:	81a3      	strh	r3, [r4, #12]
 8008eda:	2300      	movs	r3, #0
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f043 0308 	orr.w	r3, r3, #8
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	b94b      	cbnz	r3, 8008f02 <__swsetup_r+0x7a>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef8:	d003      	beq.n	8008f02 <__swsetup_r+0x7a>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 f883 	bl	8009008 <__smakebuf_r>
 8008f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f06:	f013 0201 	ands.w	r2, r3, #1
 8008f0a:	d00a      	beq.n	8008f22 <__swsetup_r+0x9a>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	60a2      	str	r2, [r4, #8]
 8008f10:	6962      	ldr	r2, [r4, #20]
 8008f12:	4252      	negs	r2, r2
 8008f14:	61a2      	str	r2, [r4, #24]
 8008f16:	6922      	ldr	r2, [r4, #16]
 8008f18:	b942      	cbnz	r2, 8008f2c <__swsetup_r+0xa4>
 8008f1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f1e:	d1c5      	bne.n	8008eac <__swsetup_r+0x24>
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
 8008f22:	0799      	lsls	r1, r3, #30
 8008f24:	bf58      	it	pl
 8008f26:	6962      	ldrpl	r2, [r4, #20]
 8008f28:	60a2      	str	r2, [r4, #8]
 8008f2a:	e7f4      	b.n	8008f16 <__swsetup_r+0x8e>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7f7      	b.n	8008f20 <__swsetup_r+0x98>
 8008f30:	20000274 	.word	0x20000274

08008f34 <_raise_r>:
 8008f34:	291f      	cmp	r1, #31
 8008f36:	b538      	push	{r3, r4, r5, lr}
 8008f38:	4605      	mov	r5, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	d904      	bls.n	8008f48 <_raise_r+0x14>
 8008f3e:	2316      	movs	r3, #22
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f4a:	b112      	cbz	r2, 8008f52 <_raise_r+0x1e>
 8008f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f50:	b94b      	cbnz	r3, 8008f66 <_raise_r+0x32>
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 f830 	bl	8008fb8 <_getpid_r>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f62:	f000 b817 	b.w	8008f94 <_kill_r>
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d00a      	beq.n	8008f80 <_raise_r+0x4c>
 8008f6a:	1c59      	adds	r1, r3, #1
 8008f6c:	d103      	bne.n	8008f76 <_raise_r+0x42>
 8008f6e:	2316      	movs	r3, #22
 8008f70:	6003      	str	r3, [r0, #0]
 8008f72:	2001      	movs	r0, #1
 8008f74:	e7e7      	b.n	8008f46 <_raise_r+0x12>
 8008f76:	2100      	movs	r1, #0
 8008f78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4798      	blx	r3
 8008f80:	2000      	movs	r0, #0
 8008f82:	e7e0      	b.n	8008f46 <_raise_r+0x12>

08008f84 <raise>:
 8008f84:	4b02      	ldr	r3, [pc, #8]	@ (8008f90 <raise+0xc>)
 8008f86:	4601      	mov	r1, r0
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f7ff bfd3 	b.w	8008f34 <_raise_r>
 8008f8e:	bf00      	nop
 8008f90:	20000274 	.word	0x20000274

08008f94 <_kill_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	@ (8008fb4 <_kill_r+0x20>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	f7f9 f9ee 	bl	8002382 <_kill>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d102      	bne.n	8008fb0 <_kill_r+0x1c>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	b103      	cbz	r3, 8008fb0 <_kill_r+0x1c>
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	bd38      	pop	{r3, r4, r5, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20018e10 	.word	0x20018e10

08008fb8 <_getpid_r>:
 8008fb8:	f7f9 b9db 	b.w	8002372 <_getpid>

08008fbc <__swhatbuf_r>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	b096      	sub	sp, #88	@ 0x58
 8008fc8:	4615      	mov	r5, r2
 8008fca:	461e      	mov	r6, r3
 8008fcc:	da0d      	bge.n	8008fea <__swhatbuf_r+0x2e>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fd4:	f04f 0100 	mov.w	r1, #0
 8008fd8:	bf14      	ite	ne
 8008fda:	2340      	movne	r3, #64	@ 0x40
 8008fdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	6031      	str	r1, [r6, #0]
 8008fe4:	602b      	str	r3, [r5, #0]
 8008fe6:	b016      	add	sp, #88	@ 0x58
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	466a      	mov	r2, sp
 8008fec:	f000 f848 	bl	8009080 <_fstat_r>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dbec      	blt.n	8008fce <__swhatbuf_r+0x12>
 8008ff4:	9901      	ldr	r1, [sp, #4]
 8008ff6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ffa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ffe:	4259      	negs	r1, r3
 8009000:	4159      	adcs	r1, r3
 8009002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009006:	e7eb      	b.n	8008fe0 <__swhatbuf_r+0x24>

08009008 <__smakebuf_r>:
 8009008:	898b      	ldrh	r3, [r1, #12]
 800900a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900c:	079d      	lsls	r5, r3, #30
 800900e:	4606      	mov	r6, r0
 8009010:	460c      	mov	r4, r1
 8009012:	d507      	bpl.n	8009024 <__smakebuf_r+0x1c>
 8009014:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	2301      	movs	r3, #1
 800901e:	6163      	str	r3, [r4, #20]
 8009020:	b003      	add	sp, #12
 8009022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009024:	ab01      	add	r3, sp, #4
 8009026:	466a      	mov	r2, sp
 8009028:	f7ff ffc8 	bl	8008fbc <__swhatbuf_r>
 800902c:	9f00      	ldr	r7, [sp, #0]
 800902e:	4605      	mov	r5, r0
 8009030:	4639      	mov	r1, r7
 8009032:	4630      	mov	r0, r6
 8009034:	f7fe fdb8 	bl	8007ba8 <_malloc_r>
 8009038:	b948      	cbnz	r0, 800904e <__smakebuf_r+0x46>
 800903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903e:	059a      	lsls	r2, r3, #22
 8009040:	d4ee      	bmi.n	8009020 <__smakebuf_r+0x18>
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	f043 0302 	orr.w	r3, r3, #2
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	e7e2      	b.n	8009014 <__smakebuf_r+0xc>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	6020      	str	r0, [r4, #0]
 8009052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	9b01      	ldr	r3, [sp, #4]
 800905a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800905e:	b15b      	cbz	r3, 8009078 <__smakebuf_r+0x70>
 8009060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009064:	4630      	mov	r0, r6
 8009066:	f000 f81d 	bl	80090a4 <_isatty_r>
 800906a:	b128      	cbz	r0, 8009078 <__smakebuf_r+0x70>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	431d      	orrs	r5, r3
 800907c:	81a5      	strh	r5, [r4, #12]
 800907e:	e7cf      	b.n	8009020 <__smakebuf_r+0x18>

08009080 <_fstat_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	@ (80090a0 <_fstat_r+0x20>)
 8009084:	2300      	movs	r3, #0
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	f7f9 f9d8 	bl	8002442 <_fstat>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d102      	bne.n	800909c <_fstat_r+0x1c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b103      	cbz	r3, 800909c <_fstat_r+0x1c>
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	20018e10 	.word	0x20018e10

080090a4 <_isatty_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	@ (80090c0 <_isatty_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f9 f9d7 	bl	8002462 <_isatty>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_isatty_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_isatty_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20018e10 	.word	0x20018e10

080090c4 <logf>:
 80090c4:	b508      	push	{r3, lr}
 80090c6:	ed2d 8b02 	vpush	{d8}
 80090ca:	eeb0 8a40 	vmov.f32	s16, s0
 80090ce:	f000 f827 	bl	8009120 <__ieee754_logf>
 80090d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80090d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090da:	d60f      	bvs.n	80090fc <logf+0x38>
 80090dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	dc0a      	bgt.n	80090fc <logf+0x38>
 80090e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80090ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ee:	d108      	bne.n	8009102 <logf+0x3e>
 80090f0:	f7fe f968 	bl	80073c4 <__errno>
 80090f4:	2322      	movs	r3, #34	@ 0x22
 80090f6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009118 <logf+0x54>
 80090fa:	6003      	str	r3, [r0, #0]
 80090fc:	ecbd 8b02 	vpop	{d8}
 8009100:	bd08      	pop	{r3, pc}
 8009102:	f7fe f95f 	bl	80073c4 <__errno>
 8009106:	ecbd 8b02 	vpop	{d8}
 800910a:	2321      	movs	r3, #33	@ 0x21
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009112:	4802      	ldr	r0, [pc, #8]	@ (800911c <logf+0x58>)
 8009114:	f7fe b99c 	b.w	8007450 <nanf>
 8009118:	ff800000 	.word	0xff800000
 800911c:	08009952 	.word	0x08009952

08009120 <__ieee754_logf>:
 8009120:	ee10 3a10 	vmov	r3, s0
 8009124:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009128:	d106      	bne.n	8009138 <__ieee754_logf+0x18>
 800912a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80092c4 <__ieee754_logf+0x1a4>
 800912e:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80092c8 <__ieee754_logf+0x1a8>
 8009132:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009136:	4770      	bx	lr
 8009138:	2b00      	cmp	r3, #0
 800913a:	461a      	mov	r2, r3
 800913c:	da02      	bge.n	8009144 <__ieee754_logf+0x24>
 800913e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009142:	e7f4      	b.n	800912e <__ieee754_logf+0xe>
 8009144:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009148:	db02      	blt.n	8009150 <__ieee754_logf+0x30>
 800914a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800914e:	4770      	bx	lr
 8009150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009154:	bfb8      	it	lt
 8009156:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80092cc <__ieee754_logf+0x1ac>
 800915a:	485d      	ldr	r0, [pc, #372]	@ (80092d0 <__ieee754_logf+0x1b0>)
 800915c:	bfbe      	ittt	lt
 800915e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009162:	f06f 0118 	mvnlt.w	r1, #24
 8009166:	ee17 2a90 	vmovlt	r2, s15
 800916a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800916e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009172:	4410      	add	r0, r2
 8009174:	bfa8      	it	ge
 8009176:	2100      	movge	r1, #0
 8009178:	3b7f      	subs	r3, #127	@ 0x7f
 800917a:	440b      	add	r3, r1
 800917c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8009180:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8009184:	4311      	orrs	r1, r2
 8009186:	ee00 1a10 	vmov	s0, r1
 800918a:	4952      	ldr	r1, [pc, #328]	@ (80092d4 <__ieee754_logf+0x1b4>)
 800918c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8009190:	f102 000f 	add.w	r0, r2, #15
 8009194:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009198:	4001      	ands	r1, r0
 800919a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800919e:	bb89      	cbnz	r1, 8009204 <__ieee754_logf+0xe4>
 80091a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80091a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a8:	d10f      	bne.n	80091ca <__ieee754_logf+0xaa>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 8087 	beq.w	80092be <__ieee754_logf+0x19e>
 80091b0:	ee07 3a90 	vmov	s15, r3
 80091b4:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80092d8 <__ieee754_logf+0x1b8>
 80091b8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80092dc <__ieee754_logf+0x1bc>
 80091bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80091c4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80091c8:	4770      	bx	lr
 80091ca:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80092e0 <__ieee754_logf+0x1c0>
 80091ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80091d2:	eee0 7a66 	vfms.f32	s15, s0, s13
 80091d6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80091da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091de:	b913      	cbnz	r3, 80091e6 <__ieee754_logf+0xc6>
 80091e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80091e4:	4770      	bx	lr
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80092d8 <__ieee754_logf+0x1b8>
 80091ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091f2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80091f6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80091fa:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80092dc <__ieee754_logf+0x1bc>
 80091fe:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009202:	4770      	bx	lr
 8009204:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009208:	ee70 7a27 	vadd.f32	s15, s0, s15
 800920c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80092e4 <__ieee754_logf+0x1c4>
 8009210:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80092e8 <__ieee754_logf+0x1c8>
 8009214:	4935      	ldr	r1, [pc, #212]	@ (80092ec <__ieee754_logf+0x1cc>)
 8009216:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800921a:	4411      	add	r1, r2
 800921c:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8009220:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009224:	430a      	orrs	r2, r1
 8009226:	2a00      	cmp	r2, #0
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009230:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009234:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009238:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80092f0 <__ieee754_logf+0x1d0>
 800923c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009240:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80092f4 <__ieee754_logf+0x1d4>
 8009244:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009248:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80092f8 <__ieee754_logf+0x1d8>
 800924c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009250:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80092fc <__ieee754_logf+0x1dc>
 8009254:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009258:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8009300 <__ieee754_logf+0x1e0>
 800925c:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009260:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009264:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009268:	dd1a      	ble.n	80092a0 <__ieee754_logf+0x180>
 800926a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800926e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009272:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800927a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800927e:	b913      	cbnz	r3, 8009286 <__ieee754_logf+0x166>
 8009280:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009284:	e7ac      	b.n	80091e0 <__ieee754_logf+0xc0>
 8009286:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80092d8 <__ieee754_logf+0x1b8>
 800928a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800928e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009292:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009296:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80092dc <__ieee754_logf+0x1bc>
 800929a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800929e:	4770      	bx	lr
 80092a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80092a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80092a8:	b913      	cbnz	r3, 80092b0 <__ieee754_logf+0x190>
 80092aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80092ae:	4770      	bx	lr
 80092b0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80092d8 <__ieee754_logf+0x1b8>
 80092b4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80092b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80092bc:	e7eb      	b.n	8009296 <__ieee754_logf+0x176>
 80092be:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80092c8 <__ieee754_logf+0x1a8>
 80092c2:	4770      	bx	lr
 80092c4:	cc000000 	.word	0xcc000000
 80092c8:	00000000 	.word	0x00000000
 80092cc:	4c000000 	.word	0x4c000000
 80092d0:	004afb20 	.word	0x004afb20
 80092d4:	007ffff0 	.word	0x007ffff0
 80092d8:	3717f7d1 	.word	0x3717f7d1
 80092dc:	3f317180 	.word	0x3f317180
 80092e0:	3eaaaaab 	.word	0x3eaaaaab
 80092e4:	3e1cd04f 	.word	0x3e1cd04f
 80092e8:	3e178897 	.word	0x3e178897
 80092ec:	ffcf5c30 	.word	0xffcf5c30
 80092f0:	3e638e29 	.word	0x3e638e29
 80092f4:	3ecccccd 	.word	0x3ecccccd
 80092f8:	3e3a3325 	.word	0x3e3a3325
 80092fc:	3e924925 	.word	0x3e924925
 8009300:	3f2aaaab 	.word	0x3f2aaaab

08009304 <_init>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr

08009310 <_fini>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	bf00      	nop
 8009314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009316:	bc08      	pop	{r3}
 8009318:	469e      	mov	lr, r3
 800931a:	4770      	bx	lr
