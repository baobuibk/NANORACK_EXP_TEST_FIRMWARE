
EXP_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08008b78  08008b78  00009b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e8  080092e8  0000b294  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080092e8  080092e8  0000a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092f0  080092f0  0000b294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f0  080092f0  0000a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092f4  080092f4  0000a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  080092f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b294  2**0
                  CONTENTS
 10 .bss          00018b5c  20000294  20000294  0000b294  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20018df0  20018df0  0000b294  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5bf  00000000  00000000  0000b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab1  00000000  00000000  00016883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00019338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a35  00000000  00000000  0001a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205df  00000000  00000000  0001ab45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c944  00000000  00000000  0003b124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad901  00000000  00000000  00047a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5369  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b00  00000000  00000000  000f53ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000f9eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000294 	.word	0x20000294
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b60 	.word	0x08008b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000298 	.word	0x20000298
 80001cc:	08008b60 	.word	0x08008b60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b9be 	b.w	8000f60 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f83c 	bl	8000c68 <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2lz>:
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2300      	movs	r3, #0
 8000c02:	4604      	mov	r4, r0
 8000c04:	460d      	mov	r5, r1
 8000c06:	f7ff ff71 	bl	8000aec <__aeabi_dcmplt>
 8000c0a:	b928      	cbnz	r0, 8000c18 <__aeabi_d2lz+0x1c>
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	4629      	mov	r1, r5
 8000c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c14:	f000 b80a 	b.w	8000c2c <__aeabi_d2ulz>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c1e:	f000 f805 	bl	8000c2c <__aeabi_d2ulz>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2ulz>:
 8000c2c:	b5d0      	push	{r4, r6, r7, lr}
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__aeabi_d2ulz+0x34>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	4606      	mov	r6, r0
 8000c34:	460f      	mov	r7, r1
 8000c36:	f7ff fce7 	bl	8000608 <__aeabi_dmul>
 8000c3a:	f7ff ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	f7ff fc68 	bl	8000514 <__aeabi_ui2d>
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <__aeabi_d2ulz+0x38>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f7ff fcde 	bl	8000608 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4630      	mov	r0, r6
 8000c52:	4639      	mov	r1, r7
 8000c54:	f7ff fb20 	bl	8000298 <__aeabi_dsub>
 8000c58:	f7ff ff98 	bl	8000b8c <__aeabi_d2uiz>
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c60:	3df00000 	.word	0x3df00000
 8000c64:	41f00000 	.word	0x41f00000

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	468e      	mov	lr, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d962      	bls.n	8000d44 <__udivmoddi4+0xdc>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	b14e      	cbz	r6, 8000c98 <__udivmoddi4+0x30>
 8000c84:	f1c6 0320 	rsb	r3, r6, #32
 8000c88:	fa01 f806 	lsl.w	r8, r1, r6
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	40b7      	lsls	r7, r6
 8000c92:	ea43 0808 	orr.w	r8, r3, r8
 8000c96:	40b4      	lsls	r4, r6
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f fc87 	uxth.w	ip, r7
 8000ca0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ca4:	0c23      	lsrs	r3, r4, #16
 8000ca6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fb01 f20c 	mul.w	r2, r1, ip
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cbc:	f080 80ea 	bcs.w	8000e94 <__udivmoddi4+0x22c>
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f240 80e7 	bls.w	8000e94 <__udivmoddi4+0x22c>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	443b      	add	r3, r7
 8000cca:	1a9a      	subs	r2, r3, r2
 8000ccc:	b2a3      	uxth	r3, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cde:	459c      	cmp	ip, r3
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x8e>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	f080 80d6 	bcs.w	8000e98 <__udivmoddi4+0x230>
 8000cec:	459c      	cmp	ip, r3
 8000cee:	f240 80d3 	bls.w	8000e98 <__udivmoddi4+0x230>
 8000cf2:	443b      	add	r3, r7
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfa:	eba3 030c 	sub.w	r3, r3, ip
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11d      	cbz	r5, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40f3      	lsrs	r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d905      	bls.n	8000d1e <__udivmoddi4+0xb6>
 8000d12:	b10d      	cbz	r5, 8000d18 <__udivmoddi4+0xb0>
 8000d14:	e9c5 0100 	strd	r0, r1, [r5]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e7f5      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d1e:	fab3 f183 	clz	r1, r3
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d146      	bne.n	8000db4 <__udivmoddi4+0x14c>
 8000d26:	4573      	cmp	r3, lr
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0xc8>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 8105 	bhi.w	8000f3a <__udivmoddi4+0x2d2>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	4690      	mov	r8, r2
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0e5      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d3e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d42:	e7e2      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 8090 	beq.w	8000e6a <__udivmoddi4+0x202>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f040 80a4 	bne.w	8000e9c <__udivmoddi4+0x234>
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	b280      	uxth	r0, r0
 8000d5e:	b2bc      	uxth	r4, r7
 8000d60:	2101      	movs	r1, #1
 8000d62:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d66:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x11e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x11c>
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	f200 80e0 	bhi.w	8000f44 <__udivmoddi4+0x2dc>
 8000d84:	46c4      	mov	ip, r8
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d8c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d90:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d94:	fb02 f404 	mul.w	r4, r2, r4
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x144>
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x142>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f200 80ca 	bhi.w	8000f3e <__udivmoddi4+0x2d6>
 8000daa:	4602      	mov	r2, r0
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0x98>
 8000db4:	f1c1 0620 	rsb	r6, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 f706 	lsr.w	r7, r2, r6
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dc4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dc8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dcc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	fa1f fc87 	uxth.w	ip, r7
 8000dda:	fbbe f0f9 	udiv	r0, lr, r9
 8000dde:	0c1c      	lsrs	r4, r3, #16
 8000de0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000de4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000de8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	fa02 f201 	lsl.w	r2, r2, r1
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x1a0>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dfa:	f080 809c 	bcs.w	8000f36 <__udivmoddi4+0x2ce>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f240 8099 	bls.w	8000f36 <__udivmoddi4+0x2ce>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	fa1f fe83 	uxth.w	lr, r3
 8000e10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e14:	fb09 4413 	mls	r4, r9, r3, r4
 8000e18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e20:	45a4      	cmp	ip, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1ce>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e2a:	f080 8082 	bcs.w	8000f32 <__udivmoddi4+0x2ca>
 8000e2e:	45a4      	cmp	ip, r4
 8000e30:	d97f      	bls.n	8000f32 <__udivmoddi4+0x2ca>
 8000e32:	3b02      	subs	r3, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	eba4 040c 	sub.w	r4, r4, ip
 8000e3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e42:	4564      	cmp	r4, ip
 8000e44:	4673      	mov	r3, lr
 8000e46:	46e1      	mov	r9, ip
 8000e48:	d362      	bcc.n	8000f10 <__udivmoddi4+0x2a8>
 8000e4a:	d05f      	beq.n	8000f0c <__udivmoddi4+0x2a4>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x1fe>
 8000e4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e52:	eb64 0409 	sbc.w	r4, r4, r9
 8000e56:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e5e:	431e      	orrs	r6, r3
 8000e60:	40cc      	lsrs	r4, r1
 8000e62:	e9c5 6400 	strd	r6, r4, [r5]
 8000e66:	2100      	movs	r1, #0
 8000e68:	e74f      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000e6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e6e:	0c01      	lsrs	r1, r0, #16
 8000e70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	463c      	mov	r4, r7
 8000e80:	46b8      	mov	r8, r7
 8000e82:	46be      	mov	lr, r7
 8000e84:	2620      	movs	r6, #32
 8000e86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e8a:	eba2 0208 	sub.w	r2, r2, r8
 8000e8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e92:	e766      	b.n	8000d62 <__udivmoddi4+0xfa>
 8000e94:	4601      	mov	r1, r0
 8000e96:	e718      	b.n	8000cca <__udivmoddi4+0x62>
 8000e98:	4610      	mov	r0, r2
 8000e9a:	e72c      	b.n	8000cf6 <__udivmoddi4+0x8e>
 8000e9c:	f1c6 0220 	rsb	r2, r6, #32
 8000ea0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ea4:	40b7      	lsls	r7, r6
 8000ea6:	40b1      	lsls	r1, r6
 8000ea8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eb6:	b2bc      	uxth	r4, r7
 8000eb8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb08 f904 	mul.w	r9, r8, r4
 8000ec6:	40b0      	lsls	r0, r6
 8000ec8:	4589      	cmp	r9, r1
 8000eca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ece:	b280      	uxth	r0, r0
 8000ed0:	d93e      	bls.n	8000f50 <__udivmoddi4+0x2e8>
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ed8:	d201      	bcs.n	8000ede <__udivmoddi4+0x276>
 8000eda:	4589      	cmp	r9, r1
 8000edc:	d81f      	bhi.n	8000f1e <__udivmoddi4+0x2b6>
 8000ede:	eba1 0109 	sub.w	r1, r1, r9
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fb09 f804 	mul.w	r8, r9, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	4542      	cmp	r2, r8
 8000ef6:	d229      	bcs.n	8000f4c <__udivmoddi4+0x2e4>
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000efe:	d2c4      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f00:	4542      	cmp	r2, r8
 8000f02:	d2c2      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f04:	f1a9 0102 	sub.w	r1, r9, #2
 8000f08:	443a      	add	r2, r7
 8000f0a:	e7be      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f0c:	45f0      	cmp	r8, lr
 8000f0e:	d29d      	bcs.n	8000e4c <__udivmoddi4+0x1e4>
 8000f10:	ebbe 0302 	subs.w	r3, lr, r2
 8000f14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f18:	3801      	subs	r0, #1
 8000f1a:	46e1      	mov	r9, ip
 8000f1c:	e796      	b.n	8000e4c <__udivmoddi4+0x1e4>
 8000f1e:	eba7 0909 	sub.w	r9, r7, r9
 8000f22:	4449      	add	r1, r9
 8000f24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2c:	fb09 f804 	mul.w	r8, r9, r4
 8000f30:	e7db      	b.n	8000eea <__udivmoddi4+0x282>
 8000f32:	4673      	mov	r3, lr
 8000f34:	e77f      	b.n	8000e36 <__udivmoddi4+0x1ce>
 8000f36:	4650      	mov	r0, sl
 8000f38:	e766      	b.n	8000e08 <__udivmoddi4+0x1a0>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e6fd      	b.n	8000d3a <__udivmoddi4+0xd2>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3a02      	subs	r2, #2
 8000f42:	e733      	b.n	8000dac <__udivmoddi4+0x144>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	443b      	add	r3, r7
 8000f4a:	e71c      	b.n	8000d86 <__udivmoddi4+0x11e>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	e79c      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f50:	eba1 0109 	sub.w	r1, r1, r9
 8000f54:	46c4      	mov	ip, r8
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fb09 f804 	mul.w	r8, r9, r4
 8000f5e:	e7c4      	b.n	8000eea <__udivmoddi4+0x282>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	@ (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	@ (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	@ (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010be:	b480      	push	{r7}
 80010c0:	b089      	sub	sp, #36	@ 0x24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	332c      	adds	r3, #44	@ 0x2c
 80010ce:	4619      	mov	r1, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80010da:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	fa92 f2a2 	rbit	r2, r2
 80010e2:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d101      	bne.n	80010f2 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 80010ee:	2220      	movs	r2, #32
 80010f0:	e003      	b.n	80010fa <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	fab2 f282 	clz	r2, r2
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	40d3      	lsrs	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	211f      	movs	r1, #31
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	401a      	ands	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f003 011f 	and.w	r1, r3, #31
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	@ 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800115e:	b480      	push	{r7}
 8001160:	b08f      	sub	sp, #60	@ 0x3c
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	330c      	adds	r3, #12
 800116e:	4619      	mov	r1, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001176:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800117a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	fa92 f2a2 	rbit	r2, r2
 8001182:	613a      	str	r2, [r7, #16]
  return result;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d101      	bne.n	8001192 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800118e:	2220      	movs	r2, #32
 8001190:	e003      	b.n	800119a <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	40d3      	lsrs	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 80011a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80011ac:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80011b0:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	6a39      	ldr	r1, [r7, #32]
 80011b4:	fa91 f1a1 	rbit	r1, r1
 80011b8:	61f9      	str	r1, [r7, #28]
  return result;
 80011ba:	69f9      	ldr	r1, [r7, #28]
 80011bc:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80011be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011c0:	2900      	cmp	r1, #0
 80011c2:	d101      	bne.n	80011c8 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80011c4:	2120      	movs	r1, #32
 80011c6:	e003      	b.n	80011d0 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80011c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011ca:	fab1 f181 	clz	r1, r1
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	40cb      	lsrs	r3, r1
 80011d2:	2107      	movs	r1, #7
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80011e2:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80011e6:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011ea:	fa91 f1a1 	rbit	r1, r1
 80011ee:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80011f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011f2:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80011f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d101      	bne.n	80011fe <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80011fa:	2120      	movs	r1, #32
 80011fc:	e003      	b.n	8001206 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80011fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001200:	fab1 f181 	clz	r1, r1
 8001204:	b2c9      	uxtb	r1, r1
 8001206:	40cb      	lsrs	r3, r1
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	431a      	orrs	r2, r3
 8001210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001212:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001214:	bf00      	nop
 8001216:	373c      	adds	r7, #60	@ 0x3c
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <LL_DMA_SetDataTransferDirection+0x44>)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001240:	4908      	ldr	r1, [pc, #32]	@ (8001264 <LL_DMA_SetDataTransferDirection+0x44>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	440b      	add	r3, r1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	440b      	add	r3, r1
 800124e:	4619      	mov	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	08008ef0 	.word	0x08008ef0

08001268 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <LL_DMA_SetMode+0x44>)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8001288:	4908      	ldr	r1, [pc, #32]	@ (80012ac <LL_DMA_SetMode+0x44>)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	440b      	add	r3, r1
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	440b      	add	r3, r1
 8001296:	4619      	mov	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	08008ef0 	.word	0x08008ef0

080012b0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <LL_DMA_SetPeriphIncMode+0x44>)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80012d0:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <LL_DMA_SetPeriphIncMode+0x44>)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	440b      	add	r3, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	440b      	add	r3, r1
 80012de:	4619      	mov	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	08008ef0 	.word	0x08008ef0

080012f8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <LL_DMA_SetMemoryIncMode+0x44>)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001318:	4908      	ldr	r1, [pc, #32]	@ (800133c <LL_DMA_SetMemoryIncMode+0x44>)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	440b      	add	r3, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08008ef0 	.word	0x08008ef0

08001340 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LL_DMA_SetPeriphSize+0x44>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8001360:	4908      	ldr	r1, [pc, #32]	@ (8001384 <LL_DMA_SetPeriphSize+0x44>)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	440b      	add	r3, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	440b      	add	r3, r1
 800136e:	4619      	mov	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08008ef0 	.word	0x08008ef0

08001388 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <LL_DMA_SetMemorySize+0x44>)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80013a8:	4908      	ldr	r1, [pc, #32]	@ (80013cc <LL_DMA_SetMemorySize+0x44>)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	440b      	add	r3, r1
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08008ef0 	.word	0x08008ef0

080013d0 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013f0:	4908      	ldr	r1, [pc, #32]	@ (8001414 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	440b      	add	r3, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	440b      	add	r3, r1
 80013fe:	4619      	mov	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	08008ef0 	.word	0x08008ef0

08001418 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <LL_DMA_SetChannelSelection+0x44>)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001438:	4908      	ldr	r1, [pc, #32]	@ (800145c <LL_DMA_SetChannelSelection+0x44>)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	440b      	add	r3, r1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	440b      	add	r3, r1
 8001446:	4619      	mov	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08008ef0 	.word	0x08008ef0

08001460 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800146a:	4a0c      	ldr	r2, [pc, #48]	@ (800149c <LL_DMA_DisableFifoMode+0x3c>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <LL_DMA_DisableFifoMode+0x3c>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	440a      	add	r2, r1
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	4611      	mov	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	440a      	add	r2, r1
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6153      	str	r3, [r2, #20]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	08008ef0 	.word	0x08008ef0

080014a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <LL_RCC_HSE_Enable+0x1c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <LL_RCC_HSE_Enable+0x1c>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <LL_RCC_HSE_IsReady+0x24>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <LL_RCC_SetSysClkSource+0x24>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 0203 	bic.w	r2, r3, #3
 80014f8:	4904      	ldr	r1, [pc, #16]	@ (800150c <LL_RCC_SetSysClkSource+0x24>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800

08001510 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <LL_RCC_GetSysClkSource+0x18>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <LL_RCC_SetAHBPrescaler+0x24>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800153c:	4904      	ldr	r1, [pc, #16]	@ (8001550 <LL_RCC_SetAHBPrescaler+0x24>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40023800 	.word	0x40023800

08001554 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <LL_RCC_SetAPB1Prescaler+0x24>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001564:	4904      	ldr	r1, [pc, #16]	@ (8001578 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40023800 	.word	0x40023800

0800157c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800158c:	4904      	ldr	r1, [pc, #16]	@ (80015a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40023800 	.word	0x40023800

080015a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <LL_RCC_PLL_Enable+0x1c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <LL_RCC_PLL_Enable+0x1c>)
 80015ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <LL_RCC_PLL_IsReady+0x24>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001600:	4013      	ands	r3, r2
 8001602:	68f9      	ldr	r1, [r7, #12]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	4311      	orrs	r1, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	0192      	lsls	r2, r2, #6
 800160c:	430a      	orrs	r2, r1
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800161c:	4904      	ldr	r1, [pc, #16]	@ (8001630 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40023800 	.word	0x40023800
 8001634:	ffbf8000 	.word	0xffbf8000

08001638 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4313      	orrs	r3, r2
 800164a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800164e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4013      	ands	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40023800 	.word	0x40023800

08001668 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001674:	4907      	ldr	r1, [pc, #28]	@ (8001694 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <LL_APB1_GRP1_EnableClock+0x2c>)
 800167e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40023800 	.word	0x40023800

08001698 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40023800 	.word	0x40023800

080016c8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <LL_FLASH_SetLatency+0x24>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 0207 	bic.w	r2, r3, #7
 80016d8:	4904      	ldr	r1, [pc, #16]	@ (80016ec <LL_FLASH_SetLatency+0x24>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <LL_FLASH_GetLatency+0x18>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00

0800170c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800171c:	4904      	ldr	r1, [pc, #16]	@ (8001730 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40007000 	.word	0x40007000

08001734 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40007000 	.word	0x40007000

0800175c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f023 0210 	bic.w	r2, r3, #16
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	605a      	str	r2, [r3, #4]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017b4:	f023 0307 	bic.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	605a      	str	r2, [r3, #4]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	615a      	str	r2, [r3, #20]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	041a      	lsls	r2, r3, #16
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	4013      	ands	r3, r2
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	400b      	ands	r3, r1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	619a      	str	r2, [r3, #24]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <Status_Led>:
        .bActive = true                      // Kích hoạt
    }
};

void Status_Led(void*)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_11);
 80018d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <Status_Led+0x1c>)
 80018da:	f7ff ffdd 	bl	8001898 <LL_GPIO_TogglePin>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80018f2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80018f6:	f7ff fecf 	bl	8001698 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018fa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80018fe:	f7ff feb3 	bl	8001668 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001902:	2003      	movs	r0, #3
 8001904:	f7ff fb2e 	bl	8000f64 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001908:	f7ff fb50 	bl	8000fac <__NVIC_GetPriorityGrouping>
 800190c:	4603      	mov	r3, r0
 800190e:	2200      	movs	r2, #0
 8001910:	210f      	movs	r1, #15
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fba0 	bl	8001058 <NVIC_EncodePriority>
 8001918:	4603      	mov	r3, r0
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff fb70 	bl	8001004 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001924:	f000 f874 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001928:	f000 fb36 	bl	8001f98 <MX_GPIO_Init>
  MX_DMA_Init();
 800192c:	f000 fb1c 	bl	8001f68 <MX_DMA_Init>
  MX_SPI1_Init();
 8001930:	f000 f970 	bl	8001c14 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8001934:	f000 fab8 	bl	8001ea8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001938:	f000 f8b4 	bl	8001aa4 <MX_ADC1_Init>
  MX_SPI2_Init();
 800193c:	f000 f9bc 	bl	8001cb8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001940:	f000 fa72 	bl	8001e28 <MX_TIM1_Init>
  MX_SPI3_Init();
 8001944:	f000 fa1c 	bl	8001d80 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  MCP4902_Device_Init(&DAC_device, SPI1, MCP4902_CS_GPIO_Port, MCP4902_CS_Pin, MCP4902_LATCH_GPIO_Port, MCP4902_LATCH_Pin);
 8001948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <main+0xf0>)
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001956:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <main+0xf0>)
 8001958:	4921      	ldr	r1, [pc, #132]	@ (80019e0 <main+0xf4>)
 800195a:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <main+0xf8>)
 800195c:	f003 fcce 	bl	80052fc <MCP4902_Device_Init>

  ADG1414_Chain_Init(&laser_int, SPI1, ADG1414_INT_CS_GPIO_Port, ADG1414_INT_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 8001960:	2306      	movs	r3, #6
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001968:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <main+0xf0>)
 800196a:	491d      	ldr	r1, [pc, #116]	@ (80019e0 <main+0xf4>)
 800196c:	481e      	ldr	r0, [pc, #120]	@ (80019e8 <main+0xfc>)
 800196e:	f001 ff69 	bl	8003844 <ADG1414_Chain_Init>
  ADG1414_Chain_Init(&laser_ext, SPI1, ADG1414_EXT_CS_GPIO_Port, ADG1414_EXT_CS_Pin, EXTERNAL_CHAIN_SWITCH_NUM);
 8001972:	2301      	movs	r3, #1
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <main+0xf0>)
 800197c:	4918      	ldr	r1, [pc, #96]	@ (80019e0 <main+0xf4>)
 800197e:	481b      	ldr	r0, [pc, #108]	@ (80019ec <main+0x100>)
 8001980:	f001 ff60 	bl	8003844 <ADG1414_Chain_Init>

  ADC_DMA_Init(&laser_adc, ADC1, DMA2, LL_DMA_STREAM_0, 2);
 8001984:	2302      	movs	r3, #2
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <main+0x104>)
 800198c:	4919      	ldr	r1, [pc, #100]	@ (80019f4 <main+0x108>)
 800198e:	481a      	ldr	r0, [pc, #104]	@ (80019f8 <main+0x10c>)
 8001990:	f001 fe36 	bl	8003600 <ADC_DMA_Init>

  ADG1414_Chain_Init(&photo_sw, SPI2, PD_SW_CS_GPIO_Port, PD_SW_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 8001994:	2306      	movs	r3, #6
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <main+0x110>)
 800199e:	4918      	ldr	r1, [pc, #96]	@ (8001a00 <main+0x114>)
 80019a0:	4818      	ldr	r0, [pc, #96]	@ (8001a04 <main+0x118>)
 80019a2:	f001 ff4f 	bl	8003844 <ADG1414_Chain_Init>
  ADS8327_Device_Init(&photo_adc, SPI2, PD_ADC_CS_GPIO_Port, PD_ADC_CS_Pin, PD_ADC_CV_GPIO_Port, PD_ADC_CV_Pin, PD_ADC_EOC_GPIO_Port, PD_ADC_EOC_Pin);
 80019a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019aa:	9303      	str	r3, [sp, #12]
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <main+0x11c>)
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <main+0x110>)
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <main+0x110>)
 80019c0:	490f      	ldr	r1, [pc, #60]	@ (8001a00 <main+0x114>)
 80019c2:	4812      	ldr	r0, [pc, #72]	@ (8001a0c <main+0x120>)
 80019c4:	f002 fb99 	bl	80040fa <ADS8327_Device_Init>
//  LL_TIM_EnableIT_UPDATE(TIM1);  // Bật ngắt Update
//  LL_TIM_EnableCounter(TIM1);    // Bật timer

  SchedulerInit(1000);
 80019c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019cc:	f004 f9d2 	bl	8005d74 <SchedulerInit>
  command_init();
 80019d0:	f002 fc88 	bl	80042e4 <command_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SchedulerRun();
 80019d4:	f004 f9f0 	bl	8005db8 <SchedulerRun>
 80019d8:	e7fc      	b.n	80019d4 <main+0xe8>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40013000 	.word	0x40013000
 80019e4:	2001896c 	.word	0x2001896c
 80019e8:	20018984 	.word	0x20018984
 80019ec:	200189a4 	.word	0x200189a4
 80019f0:	40026400 	.word	0x40026400
 80019f4:	40012000 	.word	0x40012000
 80019f8:	200189c4 	.word	0x200189c4
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40003800 	.word	0x40003800
 8001a04:	200189f4 	.word	0x200189f4
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	20018a14 	.word	0x20018a14

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001a14:	2005      	movs	r0, #5
 8001a16:	f7ff fe57 	bl	80016c8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff fe68 	bl	80016f0 <LL_FLASH_GetLatency>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d1fa      	bne.n	8001a1c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a26:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a2a:	f7ff fe6f 	bl	800170c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001a2e:	f7ff fd37 	bl	80014a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001a32:	bf00      	nop
 8001a34:	f7ff fd44 	bl	80014c0 <LL_RCC_HSE_IsReady>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d1fa      	bne.n	8001a34 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	22a8      	movs	r2, #168	@ 0xa8
 8001a42:	2104      	movs	r1, #4
 8001a44:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001a48:	f7ff fdd0 	bl	80015ec <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a4c:	f7ff fdaa 	bl	80015a4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a50:	bf00      	nop
 8001a52:	f7ff fdb7 	bl	80015c4 <LL_RCC_PLL_IsReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d1fa      	bne.n	8001a52 <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001a5c:	bf00      	nop
 8001a5e:	f7ff fe69 	bl	8001734 <LL_PWR_IsActiveFlag_VOS>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0fa      	beq.n	8001a5e <SystemClock_Config+0x4e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fd5f 	bl	800152c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001a6e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001a72:	f7ff fd6f 	bl	8001554 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001a76:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a7a:	f7ff fd7f 	bl	800157c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7ff fd32 	bl	80014e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a84:	bf00      	nop
 8001a86:	f7ff fd43 	bl	8001510 <LL_RCC_GetSysClkSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d1fa      	bne.n	8001a86 <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(168000000);
 8001a90:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <SystemClock_Config+0x90>)
 8001a92:	f001 fcc9 	bl	8003428 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001a96:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <SystemClock_Config+0x90>)
 8001a98:	f001 fcfa 	bl	8003490 <LL_SetSystemCoreClock>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	0a037a00 	.word	0x0a037a00

08001aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b092      	sub	sp, #72	@ 0x48
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001aaa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001ae4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ae8:	f7ff fdd6 	bl	8001698 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fda3 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA2   ------> ADC1_IN2
  PA3   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = ADC_INT_Pin|ADC_EXT_Pin;
 8001af2:	230c      	movs	r3, #12
 8001af4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	463b      	mov	r3, r7
 8001b00:	4619      	mov	r1, r3
 8001b02:	483e      	ldr	r0, [pc, #248]	@ (8001bfc <MX_ADC1_Init+0x158>)
 8001b04:	f000 fe89 	bl	800281a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	483c      	ldr	r0, [pc, #240]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b0e:	f7ff fc83 	bl	8001418 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	483a      	ldr	r0, [pc, #232]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b18:	f7ff fb82 	bl	8001220 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4837      	ldr	r0, [pc, #220]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b22:	f7ff fc55 	bl	80013d0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4834      	ldr	r0, [pc, #208]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b2e:	f7ff fb9b 	bl	8001268 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	4832      	ldr	r0, [pc, #200]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b38:	f7ff fbba 	bl	80012b0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001b3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b40:	2100      	movs	r1, #0
 8001b42:	482f      	ldr	r0, [pc, #188]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b44:	f7ff fbd8 	bl	80012f8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8001b48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	482c      	ldr	r0, [pc, #176]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b50:	f7ff fbf6 	bl	8001340 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8001b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4829      	ldr	r0, [pc, #164]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b5c:	f7ff fc14 	bl	8001388 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4827      	ldr	r0, [pc, #156]	@ (8001c00 <MX_ADC1_Init+0x15c>)
 8001b64:	f7ff fc7c 	bl	8001460 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b74:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001b76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4821      	ldr	r0, [pc, #132]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001b7e:	f000 fc93 	bl	80024a8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001b86:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001b90:	2302      	movs	r3, #2
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001b94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4818      	ldr	r0, [pc, #96]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001ba2:	f000 fcad 	bl	8002500 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001ba6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001baa:	4816      	ldr	r0, [pc, #88]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001bac:	f7ff fac4 	bl	8001138 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb4:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001bba:	f107 0318 	add.w	r3, r7, #24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4811      	ldr	r0, [pc, #68]	@ (8001c08 <MX_ADC1_Init+0x164>)
 8001bc2:	f000 fc29 	bl	8002418 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001bc6:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <MX_ADC1_Init+0x168>)
 8001bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001bce:	f7ff fa76 	bl	80010be <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <MX_ADC1_Init+0x168>)
 8001bd6:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001bd8:	f7ff fac1 	bl	800115e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <MX_ADC1_Init+0x16c>)
 8001bde:	f240 2105 	movw	r1, #517	@ 0x205
 8001be2:	4808      	ldr	r0, [pc, #32]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001be4:	f7ff fa6b 	bl	80010be <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001be8:	2201      	movs	r2, #1
 8001bea:	4909      	ldr	r1, [pc, #36]	@ (8001c10 <MX_ADC1_Init+0x16c>)
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_ADC1_Init+0x160>)
 8001bee:	f7ff fab6 	bl	800115e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3748      	adds	r7, #72	@ 0x48
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40026400 	.word	0x40026400
 8001c04:	40012000 	.word	0x40012000
 8001c08:	40012300 	.word	0x40012300
 8001c0c:	02600002 	.word	0x02600002
 8001c10:	02900003 	.word	0x02900003

08001c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b090      	sub	sp, #64	@ 0x40
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	2228      	movs	r2, #40	@ 0x28
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 f8c1 	bl	8006daa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001c38:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001c3c:	f7ff fd2c 	bl	8001698 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff fcf9 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001c46:	23e0      	movs	r3, #224	@ 0xe0
 8001c48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4813      	ldr	r0, [pc, #76]	@ (8001cb0 <MX_SPI1_Init+0x9c>)
 8001c64:	f000 fdd9 	bl	800281a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c6c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001c70:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001c84:	2318      	movs	r3, #24
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001c90:	230a      	movs	r3, #10
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	@ (8001cb4 <MX_SPI1_Init+0xa0>)
 8001c9c:	f000 ff9b 	bl	8002bd6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_SPI1_Init+0xa0>)
 8001ca4:	f7ff fd5a 	bl	800175c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3740      	adds	r7, #64	@ 0x40
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40013000 	.word	0x40013000

08001cb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b090      	sub	sp, #64	@ 0x40
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	2228      	movs	r2, #40	@ 0x28
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 f86f 	bl	8006daa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001cdc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ce0:	f7ff fcc2 	bl	8001668 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7ff fca7 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PD_SCK_Pin|PD_MISO_Pin|PD_MOSI_Pin;
 8001cea:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001cee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001d00:	2305      	movs	r3, #5
 8001d02:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	463b      	mov	r3, r7
 8001d06:	4619      	mov	r1, r3
 8001d08:	481b      	ldr	r0, [pc, #108]	@ (8001d78 <MX_SPI2_Init+0xc0>)
 8001d0a:	f000 fd86 	bl	800281a <LL_GPIO_Init>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d0e:	f7ff f94d 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff f99d 	bl	8001058 <NVIC_EncodePriority>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4619      	mov	r1, r3
 8001d22:	2024      	movs	r0, #36	@ 0x24
 8001d24:	f7ff f96e 	bl	8001004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8001d28:	2024      	movs	r0, #36	@ 0x24
 8001d2a:	f7ff f94d 	bl	8000fc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001d32:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001d36:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001d4a:	2318      	movs	r3, #24
 8001d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001d56:	230a      	movs	r3, #10
 8001d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4806      	ldr	r0, [pc, #24]	@ (8001d7c <MX_SPI2_Init+0xc4>)
 8001d62:	f000 ff38 	bl	8002bd6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001d66:	2100      	movs	r1, #0
 8001d68:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <MX_SPI2_Init+0xc4>)
 8001d6a:	f7ff fcf7 	bl	800175c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3740      	adds	r7, #64	@ 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40003800 	.word	0x40003800

08001d80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b090      	sub	sp, #64	@ 0x40
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	2228      	movs	r2, #40	@ 0x28
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f005 f80b 	bl	8006daa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001da4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001da8:	f7ff fc5e 	bl	8001668 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001dac:	2004      	movs	r0, #4
 8001dae:	f7ff fc43 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = FRAM_SCK_Pin|FRAM_MISO_Pin|FRAM_MOSI_Pin;
 8001db2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001db6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001db8:	2302      	movs	r3, #2
 8001dba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001dc8:	2306      	movs	r3, #6
 8001dca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4813      	ldr	r0, [pc, #76]	@ (8001e20 <MX_SPI3_Init+0xa0>)
 8001dd2:	f000 fd22 	bl	800281a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001dda:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001dde:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8001de0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001de4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001dee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e00:	230a      	movs	r3, #10
 8001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <MX_SPI3_Init+0xa4>)
 8001e0c:	f000 fee3 	bl	8002bd6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001e10:	2100      	movs	r1, #0
 8001e12:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <MX_SPI3_Init+0xa4>)
 8001e14:	f7ff fca2 	bl	800175c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3740      	adds	r7, #64	@ 0x40
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40003c00 	.word	0x40003c00

08001e28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7ff fc2b 	bl	8001698 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e42:	f7ff f8b3 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f903 	bl	8001058 <NVIC_EncodePriority>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4619      	mov	r1, r3
 8001e56:	2019      	movs	r0, #25
 8001e58:	f7ff f8d4 	bl	8001004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e5c:	2019      	movs	r0, #25
 8001e5e:	f7ff f8b3 	bl	8000fc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 167;
 8001e62:	23a7      	movs	r3, #167	@ 0xa7
 8001e64:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <MX_TIM1_Init+0x7c>)
 8001e7c:	f000 ff38 	bl	8002cf0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001e80:	4808      	ldr	r0, [pc, #32]	@ (8001ea4 <MX_TIM1_Init+0x7c>)
 8001e82:	f7ff fc7e 	bl	8001782 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001e86:	2100      	movs	r1, #0
 8001e88:	4806      	ldr	r0, [pc, #24]	@ (8001ea4 <MX_TIM1_Init+0x7c>)
 8001e8a:	f7ff fc8a 	bl	80017a2 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <MX_TIM1_Init+0x7c>)
 8001e92:	f7ff fc9b 	bl	80017cc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001e96:	4803      	ldr	r0, [pc, #12]	@ (8001ea4 <MX_TIM1_Init+0x7c>)
 8001e98:	f7ff fcab 	bl	80017f2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40010000 	.word	0x40010000

08001ea8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	@ 0x38
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001ed2:	2020      	movs	r0, #32
 8001ed4:	f7ff fbe0 	bl	8001698 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ed8:	2004      	movs	r0, #4
 8001eda:	f7ff fbad 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001ede:	23c0      	movs	r3, #192	@ 0xc0
 8001ee0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4819      	ldr	r0, [pc, #100]	@ (8001f60 <MX_USART6_UART_Init+0xb8>)
 8001efc:	f000 fc8d 	bl	800281a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f00:	f7ff f854 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f8a4 	bl	8001058 <NVIC_EncodePriority>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4619      	mov	r1, r3
 8001f14:	2047      	movs	r0, #71	@ 0x47
 8001f16:	f7ff f875 	bl	8001004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8001f1a:	2047      	movs	r0, #71	@ 0x47
 8001f1c:	f7ff f854 	bl	8000fc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001f20:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001f24:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f32:	230c      	movs	r3, #12
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <MX_USART6_UART_Init+0xbc>)
 8001f46:	f001 f9d5 	bl	80032f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8001f4a:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <MX_USART6_UART_Init+0xbc>)
 8001f4c:	f7ff fc71 	bl	8001832 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8001f50:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <MX_USART6_UART_Init+0xbc>)
 8001f52:	f7ff fc5e 	bl	8001812 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3738      	adds	r7, #56	@ 0x38
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40011400 	.word	0x40011400

08001f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001f6c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001f70:	f7ff fb62 	bl	8001638 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f74:	f7ff f81a 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f86a 	bl	8001058 <NVIC_EncodePriority>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4619      	mov	r1, r3
 8001f88:	2038      	movs	r0, #56	@ 0x38
 8001f8a:	f7ff f83b 	bl	8001004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f8e:	2038      	movs	r0, #56	@ 0x38
 8001f90:	f7ff f81a 	bl	8000fc8 <__NVIC_EnableIRQ>

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001fae:	2080      	movs	r0, #128	@ 0x80
 8001fb0:	f7ff fb42 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7ff fb3f 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001fba:	2010      	movs	r0, #16
 8001fbc:	f7ff fb3c 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7ff fb39 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	f7ff fb36 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001fcc:	2004      	movs	r0, #4
 8001fce:	f7ff fb33 	bl	8001638 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, STATUS_LED_Pin|MCP4902_CS_Pin|ADG1414_EXT_CS_Pin|ADG1414_INT_CS_Pin
 8001fd2:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001fd6:	482e      	ldr	r0, [pc, #184]	@ (8002090 <MX_GPIO_Init+0xf8>)
 8001fd8:	f7ff fc41 	bl	800185e <LL_GPIO_SetOutputPin>
                          |MCP4902_LATCH_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOD, PD_SW_CS_Pin|PD_ADC_CS_Pin|PD_ADC_CV_Pin);
 8001fdc:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8001fe0:	482c      	ldr	r0, [pc, #176]	@ (8002094 <MX_GPIO_Init+0xfc>)
 8001fe2:	f7ff fc3c 	bl	800185e <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FRAM_CS_GPIO_Port, FRAM_CS_Pin);
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	482a      	ldr	r0, [pc, #168]	@ (8002094 <MX_GPIO_Init+0xfc>)
 8001fea:	f7ff fc46 	bl	800187a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = STATUS_LED_Pin|ADG1414_EXT_CS_Pin|ADG1414_INT_CS_Pin|MCP4902_LATCH_Pin;
 8001fee:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8001ff2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	463b      	mov	r3, r7
 8002006:	4619      	mov	r1, r3
 8002008:	4821      	ldr	r0, [pc, #132]	@ (8002090 <MX_GPIO_Init+0xf8>)
 800200a:	f000 fc06 	bl	800281a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCP4902_CS_Pin;
 800200e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002012:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002014:	2301      	movs	r3, #1
 8002016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCP4902_CS_GPIO_Port, &GPIO_InitStruct);
 8002024:	463b      	mov	r3, r7
 8002026:	4619      	mov	r1, r3
 8002028:	4819      	ldr	r0, [pc, #100]	@ (8002090 <MX_GPIO_Init+0xf8>)
 800202a:	f000 fbf6 	bl	800281a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PD_SW_CS_Pin|FRAM_CS_Pin;
 800202e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002032:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002034:	2301      	movs	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	463b      	mov	r3, r7
 8002046:	4619      	mov	r1, r3
 8002048:	4812      	ldr	r0, [pc, #72]	@ (8002094 <MX_GPIO_Init+0xfc>)
 800204a:	f000 fbe6 	bl	800281a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PD_ADC_CS_Pin|PD_ADC_CV_Pin;
 800204e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002052:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002054:	2301      	movs	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002064:	463b      	mov	r3, r7
 8002066:	4619      	mov	r1, r3
 8002068:	480a      	ldr	r0, [pc, #40]	@ (8002094 <MX_GPIO_Init+0xfc>)
 800206a:	f000 fbd6 	bl	800281a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PD_ADC_EOC_Pin;
 800206e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002072:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002074:	2300      	movs	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002078:	2301      	movs	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PD_ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 800207c:	463b      	mov	r3, r7
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_GPIO_Init+0x100>)
 8002082:	f000 fbca 	bl	800281a <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40020800 	.word	0x40020800

0800209c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f06f 0201 	mvn.w	r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_TIM_IsEnabledIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <LL_TIM_IsEnabledIT_UPDATE+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <NMI_Handler+0x4>

0800210c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <MemManage_Handler+0x4>

0800211c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <UsageFault_Handler+0x4>

0800212c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SchedulerSysTickIntHandler();
 800215a:	f003 fdfd 	bl	8005d58 <SchedulerSysTickIntHandler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	// Kiểm tra cờ ngắt Update
	if (LL_TIM_IsActiveFlag_UPDATE(TIM1) && LL_TIM_IsEnabledIT_UPDATE(TIM1))
 8002168:	4809      	ldr	r0, [pc, #36]	@ (8002190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800216a:	f7ff ffa5 	bl	80020b8 <LL_TIM_IsActiveFlag_UPDATE>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <TIM1_UP_TIM10_IRQHandler+0x28>
 8002174:	4806      	ldr	r0, [pc, #24]	@ (8002190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002176:	f7ff ffb2 	bl	80020de <LL_TIM_IsEnabledIT_UPDATE>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <TIM1_UP_TIM10_IRQHandler+0x28>
	{
		ISR_TIMTrigger_IRQHandler(&photo_adc);
 8002180:	4804      	ldr	r0, [pc, #16]	@ (8002194 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8002182:	f001 feed 	bl	8003f60 <ISR_TIMTrigger_IRQHandler>
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8002186:	4802      	ldr	r0, [pc, #8]	@ (8002190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002188:	f7ff ff88 	bl	800209c <LL_TIM_ClearFlag_UPDATE>
	//
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010000 	.word	0x40010000
 8002194:	20018a14 	.word	0x20018a14

08002198 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	ISR_SPI_IRQHandler(&photo_adc);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <SPI2_IRQHandler+0x10>)
 800219e:	f001 ff37 	bl	8004010 <ISR_SPI_IRQHandler>
  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20018a14 	.word	0x20018a14

080021ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	USART6_IRQ();
 80021be:	f003 fad5 	bl	800576c <USART6_IRQ>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return 1;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_kill>:

int _kill(int pid, int sig)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021e0:	f004 fe44 	bl	8006e6c <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2216      	movs	r2, #22
 80021e8:	601a      	str	r2, [r3, #0]
  return -1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_exit>:

void _exit (int status)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffe7 	bl	80021d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <_exit+0x12>

0800220c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e00a      	b.n	8002234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800221e:	f3af 8000 	nop.w
 8002222:	4601      	mov	r1, r0
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60ba      	str	r2, [r7, #8]
 800222a:	b2ca      	uxtb	r2, r1
 800222c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	dbf0      	blt.n	800221e <_read+0x12>
  }

  return len;
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e009      	b.n	800226c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	60ba      	str	r2, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf1      	blt.n	8002258 <_write+0x12>
  }
  return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_close>:

int _close(int file)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a6:	605a      	str	r2, [r3, #4]
  return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_isatty>:

int _isatty(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f0:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <_sbrk+0x5c>)
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <_sbrk+0x60>)
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <_sbrk+0x64>)
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <_sbrk+0x68>)
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230a:	4b10      	ldr	r3, [pc, #64]	@ (800234c <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d207      	bcs.n	8002328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002318:	f004 fda8 	bl	8006e6c <__errno>
 800231c:	4603      	mov	r3, r0
 800231e:	220c      	movs	r2, #12
 8002320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e009      	b.n	800233c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800232e:	4b07      	ldr	r3, [pc, #28]	@ (800234c <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	4a05      	ldr	r2, [pc, #20]	@ (800234c <_sbrk+0x64>)
 8002338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20020000 	.word	0x20020000
 8002348:	00000400 	.word	0x00000400
 800234c:	20018a3c 	.word	0x20018a3c
 8002350:	20018df0 	.word	0x20018df0

08002354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <SystemInit+0x20>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <SystemInit+0x20>)
 8002360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800237c:	f7ff ffea 	bl	8002354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002380:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002382:	490d      	ldr	r1, [pc, #52]	@ (80023b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002398:	4c0a      	ldr	r4, [pc, #40]	@ (80023c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a6:	f004 fd67 	bl	8006e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023aa:	f7ff fa9f 	bl	80018ec <main>
  bx  lr    
 80023ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b8:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80023bc:	080092f8 	.word	0x080092f8
  ldr r2, =_sbss
 80023c0:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 80023c4:	20018df0 	.word	0x20018df0

080023c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC_IRQHandler>

080023ca <LL_ADC_REG_SetSequencerLength>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002426:	481c      	ldr	r0, [pc, #112]	@ (8002498 <LL_ADC_CommonInit+0x80>)
 8002428:	f7ff ffe2 	bl	80023f0 <LL_ADC_IsEnabled>
 800242c:	4604      	mov	r4, r0
 800242e:	481b      	ldr	r0, [pc, #108]	@ (800249c <LL_ADC_CommonInit+0x84>)
 8002430:	f7ff ffde 	bl	80023f0 <LL_ADC_IsEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	431c      	orrs	r4, r3
 8002438:	4819      	ldr	r0, [pc, #100]	@ (80024a0 <LL_ADC_CommonInit+0x88>)
 800243a:	f7ff ffd9 	bl	80023f0 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	4323      	orrs	r3, r4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d120      	bne.n	8002488 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <LL_ADC_CommonInit+0x8c>)
 8002454:	4013      	ands	r3, r2
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6852      	ldr	r2, [r2, #4]
 800245e:	4311      	orrs	r1, r2
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	6892      	ldr	r2, [r2, #8]
 8002464:	4311      	orrs	r1, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	68d2      	ldr	r2, [r2, #12]
 800246a:	430a      	orrs	r2, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	e00b      	b.n	800248c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <LL_ADC_CommonInit+0x8c>)
 800247a:	4013      	ands	r3, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	e001      	b.n	800248c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	bf00      	nop
 8002498:	40012000 	.word	0x40012000
 800249c:	40012100 	.word	0x40012100
 80024a0:	40012200 	.word	0x40012200
 80024a4:	fffc10e0 	.word	0xfffc10e0

080024a8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff9a 	bl	80023f0 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d117      	bne.n	80024f2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80024ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6811      	ldr	r1, [r2, #0]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	6892      	ldr	r2, [r2, #8]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e001      	b.n	80024f6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff6e 	bl	80023f0 <LL_ADC_IsEnabled>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d12b      	bne.n	8002572 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	e005      	b.n	8002542 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <LL_ADC_REG_Init+0x80>)
 8002548:	4013      	ands	r3, r2
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	4311      	orrs	r1, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6912      	ldr	r2, [r2, #16]
 800255c:	430a      	orrs	r2, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ff2d 	bl	80023ca <LL_ADC_REG_SetSequencerLength>
 8002570:	e001      	b.n	8002576 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	c0fffcfd 	.word	0xc0fffcfd

08002584 <LL_GPIO_SetPinMode>:
{
 8002584:	b480      	push	{r7}
 8002586:	b08b      	sub	sp, #44	@ 0x2c
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	613b      	str	r3, [r7, #16]
  return result;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80025aa:	2320      	movs	r3, #32
 80025ac:	e003      	b.n	80025b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2103      	movs	r1, #3
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	61fb      	str	r3, [r7, #28]
  return result;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	372c      	adds	r7, #44	@ 0x2c
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_GPIO_SetPinOutputType>:
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_GPIO_SetPinSpeed>:
{
 800262e:	b480      	push	{r7}
 8002630:	b08b      	sub	sp, #44	@ 0x2c
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	613b      	str	r3, [r7, #16]
  return result;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2103      	movs	r1, #3
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	61fb      	str	r3, [r7, #28]
  return result;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e003      	b.n	800268e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	431a      	orrs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]
}
 800269c:	bf00      	nop
 800269e:	372c      	adds	r7, #44	@ 0x2c
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_GPIO_SetPinPull>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b08b      	sub	sp, #44	@ 0x2c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	613b      	str	r3, [r7, #16]
  return result;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80026ce:	2320      	movs	r3, #32
 80026d0:	e003      	b.n	80026da <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2103      	movs	r1, #3
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	401a      	ands	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	61fb      	str	r3, [r7, #28]
  return result;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e003      	b.n	8002708 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	60da      	str	r2, [r3, #12]
}
 8002716:	bf00      	nop
 8002718:	372c      	adds	r7, #44	@ 0x2c
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_GPIO_SetAFPin_0_7>:
{
 8002722:	b480      	push	{r7}
 8002724:	b08b      	sub	sp, #44	@ 0x2c
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1a      	ldr	r2, [r3, #32]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	613b      	str	r3, [r7, #16]
  return result;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	210f      	movs	r1, #15
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	61fb      	str	r3, [r7, #28]
  return result;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e003      	b.n	8002782 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	431a      	orrs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	372c      	adds	r7, #44	@ 0x2c
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_GPIO_SetAFPin_8_15>:
{
 800279c:	b480      	push	{r7}
 800279e:	b08b      	sub	sp, #44	@ 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	613b      	str	r3, [r7, #16]
  return result;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e003      	b.n	80027d0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	210f      	movs	r1, #15
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	61fb      	str	r3, [r7, #28]
  return result;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e003      	b.n	8002800 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800280e:	bf00      	nop
 8002810:	372c      	adds	r7, #44	@ 0x2c
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08a      	sub	sp, #40	@ 0x28
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	617b      	str	r3, [r7, #20]
  return result;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <LL_GPIO_Init+0x2e>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002852:	e057      	b.n	8002904 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	4013      	ands	r3, r2
 8002862:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d049      	beq.n	80028fe <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d003      	beq.n	800287a <LL_GPIO_Init+0x60>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d10d      	bne.n	8002896 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	461a      	mov	r2, r3
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fed3 	bl	800262e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	461a      	mov	r2, r3
 800288e:	6a39      	ldr	r1, [r7, #32]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff feb4 	bl	80025fe <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	461a      	mov	r2, r3
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff02 	bl	80026a8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d121      	bne.n	80028f0 <LL_GPIO_Init+0xd6>
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	60bb      	str	r3, [r7, #8]
  return result;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <LL_GPIO_Init+0xac>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80028ce:	2b07      	cmp	r3, #7
 80028d0:	d807      	bhi.n	80028e2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	461a      	mov	r2, r3
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff21 	bl	8002722 <LL_GPIO_SetAFPin_0_7>
 80028e0:	e006      	b.n	80028f0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	461a      	mov	r2, r3
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff56 	bl	800279c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	461a      	mov	r2, r3
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fe43 	bl	8002584 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	3301      	adds	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1a0      	bne.n	8002854 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3728      	adds	r7, #40	@ 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <LL_RCC_GetSysClkSource>:
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <LL_RCC_GetSysClkSource+0x18>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <LL_RCC_GetAHBPrescaler>:
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <LL_RCC_GetAHBPrescaler+0x18>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <LL_RCC_GetAPB1Prescaler>:
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <LL_RCC_GetAPB1Prescaler+0x18>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <LL_RCC_GetAPB2Prescaler>:
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002974:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <LL_RCC_PLL_GetMainSource+0x18>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <LL_RCC_PLL_GetN+0x18>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40023800 	.word	0x40023800

080029c4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80029c8:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <LL_RCC_PLL_GetP+0x18>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <LL_RCC_PLL_GetDivider+0x18>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a04:	f000 f820 	bl	8002a48 <RCC_GetSystemClockFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f840 	bl	8002a98 <RCC_GetHCLKClockFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f84e 	bl	8002ac4 <RCC_GetPCLK1ClockFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f85a 	bl	8002aec <RCC_GetPCLK2ClockFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002a52:	f7ff ff63 	bl	800291c <LL_RCC_GetSysClkSource>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d00c      	beq.n	8002a76 <RCC_GetSystemClockFreq+0x2e>
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d80f      	bhi.n	8002a80 <RCC_GetSystemClockFreq+0x38>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <RCC_GetSystemClockFreq+0x22>
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d003      	beq.n	8002a70 <RCC_GetSystemClockFreq+0x28>
 8002a68:	e00a      	b.n	8002a80 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <RCC_GetSystemClockFreq+0x48>)
 8002a6c:	607b      	str	r3, [r7, #4]
      break;
 8002a6e:	e00a      	b.n	8002a86 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <RCC_GetSystemClockFreq+0x4c>)
 8002a72:	607b      	str	r3, [r7, #4]
      break;
 8002a74:	e007      	b.n	8002a86 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002a76:	2008      	movs	r0, #8
 8002a78:	f000 f84c 	bl	8002b14 <RCC_PLL_GetFreqDomain_SYS>
 8002a7c:	6078      	str	r0, [r7, #4]
      break;
 8002a7e:	e002      	b.n	8002a86 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <RCC_GetSystemClockFreq+0x48>)
 8002a82:	607b      	str	r3, [r7, #4]
      break;
 8002a84:	bf00      	nop
  }

  return frequency;
 8002a86:	687b      	ldr	r3, [r7, #4]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	00f42400 	.word	0x00f42400
 8002a94:	007a1200 	.word	0x007a1200

08002a98 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002aa0:	f7ff ff4a 	bl	8002938 <LL_RCC_GetAHBPrescaler>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <RCC_GetHCLKClockFreq+0x28>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	40d3      	lsrs	r3, r2
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	08008ef8 	.word	0x08008ef8

08002ac4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002acc:	f7ff ff42 	bl	8002954 <LL_RCC_GetAPB1Prescaler>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	40d3      	lsrs	r3, r2
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08008f08 	.word	0x08008f08

08002aec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002af4:	f7ff ff3c 	bl	8002970 <LL_RCC_GetAPB2Prescaler>
 8002af8:	4603      	mov	r3, r0
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <RCC_GetPCLK2ClockFreq+0x24>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	461a      	mov	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	40d3      	lsrs	r3, r2
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	08008f08 	.word	0x08008f08

08002b14 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b28:	f7ff ff30 	bl	800298c <LL_RCC_PLL_GetMainSource>
 8002b2c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b3a:	d003      	beq.n	8002b44 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002b3c:	e005      	b.n	8002b4a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b40:	617b      	str	r3, [r7, #20]
      break;
 8002b42:	e005      	b.n	8002b50 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002b46:	617b      	str	r3, [r7, #20]
      break;
 8002b48:	e002      	b.n	8002b50 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002b4c:	617b      	str	r3, [r7, #20]
      break;
 8002b4e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d113      	bne.n	8002b7e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b56:	f7ff ff43 	bl	80029e0 <LL_RCC_PLL_GetDivider>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002b62:	f7ff ff21 	bl	80029a8 <LL_RCC_PLL_GetN>
 8002b66:	4603      	mov	r3, r0
 8002b68:	fb03 f404 	mul.w	r4, r3, r4
 8002b6c:	f7ff ff2a 	bl	80029c4 <LL_RCC_PLL_GetP>
 8002b70:	4603      	mov	r3, r0
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	3301      	adds	r3, #1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b7c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002b7e:	693b      	ldr	r3, [r7, #16]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	007a1200 	.word	0x007a1200

08002b90 <LL_SPI_IsEnabled>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d101      	bne.n	8002ba8 <LL_SPI_IsEnabled+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_SPI_IsEnabled+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffd3 	bl	8002b90 <LL_SPI_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d139      	bne.n	8002c64 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bf8:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	6811      	ldr	r1, [r2, #0]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	4311      	orrs	r1, r2
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	68d2      	ldr	r2, [r2, #12]
 8002c10:	4311      	orrs	r1, r2
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	6912      	ldr	r2, [r2, #16]
 8002c16:	4311      	orrs	r1, r2
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	6952      	ldr	r2, [r2, #20]
 8002c1c:	4311      	orrs	r1, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	6992      	ldr	r2, [r2, #24]
 8002c22:	4311      	orrs	r1, r2
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	69d2      	ldr	r2, [r2, #28]
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	6a12      	ldr	r2, [r2, #32]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f023 0204 	bic.w	r2, r3, #4
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c52:	d105      	bne.n	8002c60 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffab 	bl	8002bb6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	61da      	str	r2, [r3, #28]
  return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <LL_TIM_SetPrescaler>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_TIM_SetAutoReload>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_TIM_SetRepetitionCounter>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3d      	ldr	r2, [pc, #244]	@ (8002df8 <LL_TIM_Init+0x108>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <LL_TIM_Init+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0e:	d00f      	beq.n	8002d30 <LL_TIM_Init+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3a      	ldr	r2, [pc, #232]	@ (8002dfc <LL_TIM_Init+0x10c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00b      	beq.n	8002d30 <LL_TIM_Init+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a39      	ldr	r2, [pc, #228]	@ (8002e00 <LL_TIM_Init+0x110>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <LL_TIM_Init+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a38      	ldr	r2, [pc, #224]	@ (8002e04 <LL_TIM_Init+0x114>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <LL_TIM_Init+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a37      	ldr	r2, [pc, #220]	@ (8002e08 <LL_TIM_Init+0x118>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d106      	bne.n	8002d3e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2d      	ldr	r2, [pc, #180]	@ (8002df8 <LL_TIM_Init+0x108>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d027      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	@ (8002dfc <LL_TIM_Init+0x10c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d023      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <LL_TIM_Init+0x110>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <LL_TIM_Init+0x114>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01b      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a27      	ldr	r2, [pc, #156]	@ (8002e08 <LL_TIM_Init+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d017      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <LL_TIM_Init+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a25      	ldr	r2, [pc, #148]	@ (8002e10 <LL_TIM_Init+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a24      	ldr	r2, [pc, #144]	@ (8002e14 <LL_TIM_Init+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00b      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a23      	ldr	r2, [pc, #140]	@ (8002e18 <LL_TIM_Init+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a22      	ldr	r2, [pc, #136]	@ (8002e1c <LL_TIM_Init+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <LL_TIM_Init+0xae>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a21      	ldr	r2, [pc, #132]	@ (8002e20 <LL_TIM_Init+0x130>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d106      	bne.n	8002dac <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff6c 	bl	8002c96 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff58 	bl	8002c7a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <LL_TIM_Init+0x108>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <LL_TIM_Init+0xea>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <LL_TIM_Init+0x118>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d105      	bne.n	8002de6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff66 	bl	8002cb2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff71 	bl	8002cce <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800
 8002e18:	40001800 	.word	0x40001800
 8002e1c:	40001c00 	.word	0x40001c00
 8002e20:	40002000 	.word	0x40002000

08002e24 <LL_USART_IsEnabled>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_USART_SetStopBitsLength>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_USART_SetHWFlowCtrl>:
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	615a      	str	r2, [r3, #20]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_USART_SetBaudRate>:
{
 8002e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e9c:	b0c0      	sub	sp, #256	@ 0x100
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ea4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002ea8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002eac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb8:	f040 810c 	bne.w	80030d4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ebc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	6639      	str	r1, [r7, #96]	@ 0x60
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eda:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002ede:	4621      	mov	r1, r4
 8002ee0:	eb12 0801 	adds.w	r8, r2, r1
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb43 0901 	adc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	eb49 0303 	adc.w	r3, r9, r3
 8002f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	469a      	mov	sl, r3
 8002f1e:	4693      	mov	fp, r2
 8002f20:	eb1a 030a 	adds.w	r3, sl, sl
 8002f24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f26:	eb4b 030b 	adc.w	r3, fp, fp
 8002f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f34:	f7fd fe4a 	bl	8000bcc <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4b64      	ldr	r3, [pc, #400]	@ (80030d0 <LL_USART_SetBaudRate+0x238>)
 8002f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	b29c      	uxth	r4, r3
 8002f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f54:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f58:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	1891      	adds	r1, r2, r2
 8002f62:	6539      	str	r1, [r7, #80]	@ 0x50
 8002f64:	415b      	adcs	r3, r3
 8002f66:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	1851      	adds	r1, r2, r1
 8002f70:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f72:	4649      	mov	r1, r9
 8002f74:	414b      	adcs	r3, r1
 8002f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8002f84:	4659      	mov	r1, fp
 8002f86:	00cb      	lsls	r3, r1, #3
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8e:	4651      	mov	r1, sl
 8002f90:	00ca      	lsls	r2, r1, #3
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	4642      	mov	r2, r8
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	eb42 0303 	adc.w	r3, r2, r3
 8002fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002fac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fb6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002fba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	18db      	adds	r3, r3, r3
 8002fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	eb42 0303 	adc.w	r3, r2, r3
 8002fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fd0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002fd4:	f7fd fdfa 	bl	8000bcc <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4b3c      	ldr	r3, [pc, #240]	@ (80030d0 <LL_USART_SetBaudRate+0x238>)
 8002fe0:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	2264      	movs	r2, #100	@ 0x64
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	1acb      	subs	r3, r1, r3
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ff4:	4b36      	ldr	r3, [pc, #216]	@ (80030d0 <LL_USART_SetBaudRate+0x238>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	b29b      	uxth	r3, r3
 8003002:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003006:	b29b      	uxth	r3, r3
 8003008:	4423      	add	r3, r4
 800300a:	b29c      	uxth	r4, r3
 800300c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003016:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800301a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800301e:	4642      	mov	r2, r8
 8003020:	464b      	mov	r3, r9
 8003022:	1891      	adds	r1, r2, r2
 8003024:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003026:	415b      	adcs	r3, r3
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800302e:	4641      	mov	r1, r8
 8003030:	1851      	adds	r1, r2, r1
 8003032:	6339      	str	r1, [r7, #48]	@ 0x30
 8003034:	4649      	mov	r1, r9
 8003036:	414b      	adcs	r3, r1
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003046:	4659      	mov	r1, fp
 8003048:	00cb      	lsls	r3, r1, #3
 800304a:	4651      	mov	r1, sl
 800304c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003050:	4651      	mov	r1, sl
 8003052:	00ca      	lsls	r2, r1, #3
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	4603      	mov	r3, r0
 800305a:	4642      	mov	r2, r8
 800305c:	189b      	adds	r3, r3, r2
 800305e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003062:	464b      	mov	r3, r9
 8003064:	460a      	mov	r2, r1
 8003066:	eb42 0303 	adc.w	r3, r2, r3
 800306a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800306e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003078:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800307c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003080:	460b      	mov	r3, r1
 8003082:	18db      	adds	r3, r3, r3
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003086:	4613      	mov	r3, r2
 8003088:	eb42 0303 	adc.w	r3, r2, r3
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003092:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003096:	f7fd fd99 	bl	8000bcc <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <LL_USART_SetBaudRate+0x238>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	@ 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3332      	adds	r3, #50	@ 0x32
 80030b2:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <LL_USART_SetBaudRate+0x238>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4423      	add	r3, r4
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030cc:	609a      	str	r2, [r3, #8]
}
 80030ce:	e108      	b.n	80032e2 <LL_USART_SetBaudRate+0x44a>
 80030d0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80030d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030de:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80030e6:	4642      	mov	r2, r8
 80030e8:	464b      	mov	r3, r9
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	6239      	str	r1, [r7, #32]
 80030ee:	415b      	adcs	r3, r3
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f6:	4641      	mov	r1, r8
 80030f8:	1854      	adds	r4, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb43 0501 	adc.w	r5, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	00eb      	lsls	r3, r5, #3
 800310a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310e:	00e2      	lsls	r2, r4, #3
 8003110:	4614      	mov	r4, r2
 8003112:	461d      	mov	r5, r3
 8003114:	4643      	mov	r3, r8
 8003116:	18e3      	adds	r3, r4, r3
 8003118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800311c:	464b      	mov	r3, r9
 800311e:	eb45 0303 	adc.w	r3, r5, r3
 8003122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003126:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003130:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003140:	4629      	mov	r1, r5
 8003142:	008b      	lsls	r3, r1, #2
 8003144:	4621      	mov	r1, r4
 8003146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800314a:	4621      	mov	r1, r4
 800314c:	008a      	lsls	r2, r1, #2
 800314e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003152:	f7fd fd3b 	bl	8000bcc <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4b65      	ldr	r3, [pc, #404]	@ (80032f0 <LL_USART_SetBaudRate+0x458>)
 800315c:	fba3 2302 	umull	r2, r3, r3, r2
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b29b      	uxth	r3, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	b29c      	uxth	r4, r3
 8003168:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003176:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800317a:	4642      	mov	r2, r8
 800317c:	464b      	mov	r3, r9
 800317e:	1891      	adds	r1, r2, r2
 8003180:	61b9      	str	r1, [r7, #24]
 8003182:	415b      	adcs	r3, r3
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800318a:	4641      	mov	r1, r8
 800318c:	1851      	adds	r1, r2, r1
 800318e:	6139      	str	r1, [r7, #16]
 8003190:	4649      	mov	r1, r9
 8003192:	414b      	adcs	r3, r1
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a2:	4659      	mov	r1, fp
 80031a4:	00cb      	lsls	r3, r1, #3
 80031a6:	4651      	mov	r1, sl
 80031a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ac:	4651      	mov	r1, sl
 80031ae:	00ca      	lsls	r2, r1, #3
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	4642      	mov	r2, r8
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031be:	464b      	mov	r3, r9
 80031c0:	460a      	mov	r2, r1
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80031e4:	4649      	mov	r1, r9
 80031e6:	008b      	lsls	r3, r1, #2
 80031e8:	4641      	mov	r1, r8
 80031ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ee:	4641      	mov	r1, r8
 80031f0:	008a      	lsls	r2, r1, #2
 80031f2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80031f6:	f7fd fce9 	bl	8000bcc <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <LL_USART_SetBaudRate+0x458>)
 8003202:	fba3 2301 	umull	r2, r3, r3, r1
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2264      	movs	r2, #100	@ 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	1acb      	subs	r3, r1, r3
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	3332      	adds	r3, #50	@ 0x32
 8003214:	4a36      	ldr	r2, [pc, #216]	@ (80032f0 <LL_USART_SetBaudRate+0x458>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	b29b      	uxth	r3, r3
 800321e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003222:	b29b      	uxth	r3, r3
 8003224:	4423      	add	r3, r4
 8003226:	b29c      	uxth	r4, r3
 8003228:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800322c:	2200      	movs	r2, #0
 800322e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003230:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003232:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003236:	4642      	mov	r2, r8
 8003238:	464b      	mov	r3, r9
 800323a:	1891      	adds	r1, r2, r2
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	415b      	adcs	r3, r3
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003246:	4641      	mov	r1, r8
 8003248:	1851      	adds	r1, r2, r1
 800324a:	6039      	str	r1, [r7, #0]
 800324c:	4649      	mov	r1, r9
 800324e:	414b      	adcs	r3, r1
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800325e:	4659      	mov	r1, fp
 8003260:	00cb      	lsls	r3, r1, #3
 8003262:	4651      	mov	r1, sl
 8003264:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003268:	4651      	mov	r1, sl
 800326a:	00ca      	lsls	r2, r1, #3
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	4603      	mov	r3, r0
 8003272:	4642      	mov	r2, r8
 8003274:	189b      	adds	r3, r3, r2
 8003276:	673b      	str	r3, [r7, #112]	@ 0x70
 8003278:	464b      	mov	r3, r9
 800327a:	460a      	mov	r2, r1
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	677b      	str	r3, [r7, #116]	@ 0x74
 8003282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003286:	2200      	movs	r2, #0
 8003288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800328a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003298:	4649      	mov	r1, r9
 800329a:	008b      	lsls	r3, r1, #2
 800329c:	4641      	mov	r1, r8
 800329e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a2:	4641      	mov	r1, r8
 80032a4:	008a      	lsls	r2, r1, #2
 80032a6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80032aa:	f7fd fc8f 	bl	8000bcc <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <LL_USART_SetBaudRate+0x458>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	@ 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	3332      	adds	r3, #50	@ 0x32
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <LL_USART_SetBaudRate+0x458>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4423      	add	r3, r4
 80032d8:	b29b      	uxth	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	51eb851f 	.word	0x51eb851f

080032f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fd8c 	bl	8002e24 <LL_USART_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d15e      	bne.n	80033d0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800331a:	f023 030c 	bic.w	r3, r3, #12
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	6851      	ldr	r1, [r2, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	4311      	orrs	r1, r2
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	6912      	ldr	r2, [r2, #16]
 800332c:	4311      	orrs	r1, r2
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	6992      	ldr	r2, [r2, #24]
 8003332:	430a      	orrs	r2, r1
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fd83 	bl	8002e4c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fd90 	bl	8002e72 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fb50 	bl	80029fc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <LL_USART_Init+0xe8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d102      	bne.n	800336a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e021      	b.n	80033ae <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <LL_USART_Init+0xec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d102      	bne.n	8003378 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e01a      	b.n	80033ae <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a1a      	ldr	r2, [pc, #104]	@ (80033e4 <LL_USART_Init+0xf0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d102      	bne.n	8003386 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	e013      	b.n	80033ae <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <LL_USART_Init+0xf4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d102      	bne.n	8003394 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e00c      	b.n	80033ae <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <LL_USART_Init+0xf8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d102      	bne.n	80033a2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e005      	b.n	80033ae <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <LL_USART_Init+0xfc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80033c8:	69b9      	ldr	r1, [r7, #24]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fd64 	bl	8002e98 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40004400 	.word	0x40004400
 80033e4:	40004800 	.word	0x40004800
 80033e8:	40011400 	.word	0x40011400
 80033ec:	40004c00 	.word	0x40004c00
 80033f0:	40005000 	.word	0x40005000

080033f4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	4a07      	ldr	r2, [pc, #28]	@ (8003424 <LL_InitTick+0x30>)
 8003408:	3b01      	subs	r3, #1
 800340a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <LL_InitTick+0x30>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003412:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <LL_InitTick+0x30>)
 8003414:	2205      	movs	r2, #5
 8003416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e010 	.word	0xe000e010

08003428 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003430:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffdd 	bl	80033f4 <LL_InitTick>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <LL_mDelay+0x48>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003452:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d00c      	beq.n	8003476 <LL_mDelay+0x32>
  {
    Delay++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3301      	adds	r3, #1
 8003460:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003462:	e008      	b.n	8003476 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <LL_mDelay+0x48>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <LL_mDelay+0x32>
    {
      Delay--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f3      	bne.n	8003464 <LL_mDelay+0x20>
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e010 	.word	0xe000e010

08003490 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003498:	4a04      	ldr	r2, [pc, #16]	@ (80034ac <LL_SetSystemCoreClock+0x1c>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000030 	.word	0x20000030

080034b0 <LL_ADC_Enable>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_IsEnabled>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <LL_DMA_EnableStream>:
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003522:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <LL_DMA_EnableStream+0x3c>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4908      	ldr	r1, [pc, #32]	@ (8003554 <LL_DMA_EnableStream+0x3c>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	440a      	add	r2, r1
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	4611      	mov	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	440a      	add	r2, r1
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6013      	str	r3, [r2, #0]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	08008f10 	.word	0x08008f10

08003558 <LL_DMA_SetDataLength>:
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003564:	4a0d      	ldr	r2, [pc, #52]	@ (800359c <LL_DMA_SetDataLength+0x44>)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	4908      	ldr	r1, [pc, #32]	@ (800359c <LL_DMA_SetDataLength+0x44>)
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	440a      	add	r2, r1
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	4611      	mov	r1, r2
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	440a      	add	r2, r1
 8003586:	4611      	mov	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	08008f10 	.word	0x08008f10

080035a0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80035ac:	4a07      	ldr	r2, [pc, #28]	@ (80035cc <LL_DMA_SetMemoryAddress+0x2c>)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60d3      	str	r3, [r2, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	08008f10 	.word	0x08008f10

080035d0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80035dc:	4a07      	ldr	r2, [pc, #28]	@ (80035fc <LL_DMA_SetPeriphAddress+0x2c>)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6093      	str	r3, [r2, #8]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	08008f10 	.word	0x08008f10

08003600 <ADC_DMA_Init>:
void ADC_DMA_Init(	ADC_DMA_Device_t* ADC_DMA_Device,
					ADC_TypeDef* ADCx,
					DMA_TypeDef* DMAx,
					uint32_t stream,
					uint32_t length)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
	ADC_DMA_Device->ADCx = ADCx;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	601a      	str	r2, [r3, #0]
	ADC_DMA_Device->DMAx = DMAx;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
	ADC_DMA_Device->stream = stream;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	609a      	str	r2, [r3, #8]
	ADC_DMA_Device->data_length = length;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c



	LL_DMA_SetPeriphAddress(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream, (uint32_t)&ADC_DMA_Device->ADCx->DR);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6858      	ldr	r0, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	334c      	adds	r3, #76	@ 0x4c
 8003634:	461a      	mov	r2, r3
 8003636:	f7ff ffcb 	bl	80035d0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream, (uint32_t)ADC_DMA_Device->ADC_Data);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6858      	ldr	r0, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	330c      	adds	r3, #12
 8003646:	461a      	mov	r2, r3
 8003648:	f7ff ffaa 	bl	80035a0 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream, ADC_DMA_Device->data_length);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6858      	ldr	r0, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	461a      	mov	r2, r3
 800365a:	f7ff ff7d 	bl	8003558 <LL_DMA_SetDataLength>

	LL_DMA_EnableStream(ADC_DMA_Device->DMAx, ADC_DMA_Device->stream);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7ff ff55 	bl	8003518 <LL_DMA_EnableStream>

	while (!LL_ADC_IsEnabled(ADC_DMA_Device->ADCx))
 800366e:	e005      	b.n	800367c <ADC_DMA_Init+0x7c>
	{
		LL_ADC_Enable(ADC_DMA_Device->ADCx);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff1b 	bl	80034b0 <LL_ADC_Enable>
		__NOP();
 800367a:	bf00      	nop
	while (!LL_ADC_IsEnabled(ADC_DMA_Device->ADCx))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff25 	bl	80034d0 <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f1      	beq.n	8003670 <ADC_DMA_Init+0x70>
	}

    LL_ADC_REG_StartConversionSWStart(ADC_DMA_Device->ADCx);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff30 	bl	80034f6 <LL_ADC_REG_StartConversionSWStart>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <LL_SPI_Enable>:
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_SPI_IsEnabled>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ce:	2b40      	cmp	r3, #64	@ 0x40
 80036d0:	d101      	bne.n	80036d6 <LL_SPI_IsEnabled+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_SPI_IsEnabled+0x1a>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d101      	bne.n	80036fc <LL_SPI_IsActiveFlag_TXE+0x18>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <LL_SPI_IsActiveFlag_TXE+0x1a>
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(const SPI_TypeDef *SPIx)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371a:	2b80      	cmp	r3, #128	@ 0x80
 800371c:	d101      	bne.n	8003722 <LL_SPI_IsActiveFlag_BSY+0x18>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	330c      	adds	r3, #12
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	b2db      	uxtb	r3, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	330c      	adds	r3, #12
 800375c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_GPIO_SetOutputPin>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	619a      	str	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_GPIO_ResetOutputPin>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <ADG1414_Chain_Write>:

#include "adg1414.h"


static void ADG1414_Chain_Write(ADG1414_Device_t *dev)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 80037b2:	bf00      	nop
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff93 	bl	80036e4 <LL_SPI_IsActiveFlag_TXE>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f7      	beq.n	80037b4 <ADG1414_Chain_Write+0xa>
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f7ff ffdc 	bl	800378c <LL_GPIO_ResetOutputPin>

    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7b1b      	ldrb	r3, [r3, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e023      	b.n	8003826 <ADG1414_Chain_Write+0x7c>
    {
        LL_SPI_TransmitData8(dev->spi, dev->switch_state[i]);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	330d      	adds	r3, #13
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7ff ffad 	bl	800374c <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 80037f2:	bf00      	nop
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff73 	bl	80036e4 <LL_SPI_IsActiveFlag_TXE>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f7      	beq.n	80037f4 <ADG1414_Chain_Write+0x4a>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8003804:	bf00      	nop
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff7d 	bl	800370a <LL_SPI_IsActiveFlag_BSY>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f7      	bne.n	8003806 <ADG1414_Chain_Write+0x5c>
        (void)LL_SPI_ReceiveData8(dev->spi);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff88 	bl	8003730 <LL_SPI_ReceiveData8>
    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dad8      	bge.n	80037de <ADG1414_Chain_Write+0x34>
    }

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7ff ff9a 	bl	8003770 <LL_GPIO_SetOutputPin>
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <ADG1414_Chain_Init>:

/* Hàm khởi tạo module ADG1414 */
void ADG1414_Chain_Init(ADG1414_Device_t *dev, SPI_TypeDef *spi, GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t num_of_sw)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08c      	sub	sp, #48	@ 0x30
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	601a      	str	r2, [r3, #0]
	dev->num_of_sw = num_of_sw;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800385e:	731a      	strb	r2, [r3, #12]
	dev->cs_port = cs_port;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = dev->cs_pin;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003884:	2301      	movs	r3, #1
 8003886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003888:	2302      	movs	r3, #2
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f107 0214 	add.w	r2, r7, #20
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe ffbb 	bl	800281a <LL_GPIO_Init>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7ff ff5e 	bl	8003770 <LL_GPIO_SetOutputPin>

    for (int i = 0; i < dev->num_of_sw; i++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b8:	e008      	b.n	80038cc <ADG1414_Chain_Init+0x88>
    {
        dev->switch_state[i] = 0x00;
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	4413      	add	r3, r2
 80038c0:	330d      	adds	r3, #13
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	3301      	adds	r3, #1
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	7b1b      	ldrb	r3, [r3, #12]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	4293      	cmp	r3, r2
 80038d6:	dbf0      	blt.n	80038ba <ADG1414_Chain_Init+0x76>
    }

    while (!LL_SPI_IsEnabled(dev->spi))
 80038d8:	e005      	b.n	80038e6 <ADG1414_Chain_Init+0xa2>
	{
		LL_SPI_Enable(dev->spi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fedd 	bl	800369e <LL_SPI_Enable>
		__NOP();
 80038e4:	bf00      	nop
    while (!LL_SPI_IsEnabled(dev->spi))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fee7 	bl	80036be <LL_SPI_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f1      	beq.n	80038da <ADG1414_Chain_Init+0x96>
	}

    ADG1414_Chain_Write(dev);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff ff57 	bl	80037aa <ADG1414_Chain_Write>
}
 80038fc:	bf00      	nop
 80038fe:	3730      	adds	r7, #48	@ 0x30
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <ADG1414_Chain_SwitchOn>:

/* Hàm bật một switch */
void ADG1414_Chain_SwitchOn(ADG1414_Device_t *dev, uint8_t channel_num)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	2b24      	cmp	r3, #36	@ 0x24
 8003914:	d903      	bls.n	800391e <ADG1414_Chain_SwitchOn+0x1a>
    	(dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 800391a:	2b06      	cmp	r3, #6
 800391c:	d05a      	beq.n	80039d4 <ADG1414_Chain_SwitchOn+0xd0>
    	return;  // Kiểm tra giới hạn

    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d903      	bls.n	800392c <ADG1414_Chain_SwitchOn+0x28>
		(dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8003928:	2b01      	cmp	r3, #1
 800392a:	d055      	beq.n	80039d8 <ADG1414_Chain_SwitchOn+0xd4>
		return;  // Kiểm tra giới hạn

    if (dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7b1b      	ldrb	r3, [r3, #12]
 8003930:	2b06      	cmp	r3, #6
 8003932:	d138      	bne.n	80039a6 <ADG1414_Chain_SwitchOn+0xa2>
	{
    	for (int i = 0; i < dev->num_of_sw; i++)
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e008      	b.n	800394c <ADG1414_Chain_SwitchOn+0x48>
		{
			dev->switch_state[i] = 0x00;
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	330d      	adds	r3, #13
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < dev->num_of_sw; i++)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7b1b      	ldrb	r3, [r3, #12]
 8003950:	461a      	mov	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4293      	cmp	r3, r2
 8003956:	dbf0      	blt.n	800393a <ADG1414_Chain_SwitchOn+0x36>
		}
    	if (channel_num)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d036      	beq.n	80039cc <ADG1414_Chain_SwitchOn+0xc8>
    	{
    		uint8_t chip_idx = (channel_num-1) / 6;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	3b01      	subs	r3, #1
 8003962:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <ADG1414_Chain_SwitchOn+0xdc>)
 8003964:	fb82 1203 	smull	r1, r2, r2, r3
 8003968:	17db      	asrs	r3, r3, #31
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	72fb      	strb	r3, [r7, #11]
			uint8_t bit_idx = (channel_num-1) % 6;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <ADG1414_Chain_SwitchOn+0xdc>)
 8003974:	fb83 3102 	smull	r3, r1, r3, r2
 8003978:	17d3      	asrs	r3, r2, #31
 800397a:	1ac9      	subs	r1, r1, r3
 800397c:	460b      	mov	r3, r1
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	440b      	add	r3, r1
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	1ad1      	subs	r1, r2, r3
 8003986:	460b      	mov	r3, r1
 8003988:	72bb      	strb	r3, [r7, #10]
			dev->switch_state[(uint8_t)chip_idx] = (1 << bit_idx)&0x3F;
 800398a:	7abb      	ldrb	r3, [r7, #10]
 800398c:	2201      	movs	r2, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	b2da      	uxtb	r2, r3
 8003994:	7afb      	ldrb	r3, [r7, #11]
 8003996:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800399a:	b2d1      	uxtb	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	460a      	mov	r2, r1
 80039a2:	735a      	strb	r2, [r3, #13]
 80039a4:	e012      	b.n	80039cc <ADG1414_Chain_SwitchOn+0xc8>
    	}
	}

    else if (dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7b1b      	ldrb	r3, [r3, #12]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10e      	bne.n	80039cc <ADG1414_Chain_SwitchOn+0xc8>
	{
    	if(channel_num)
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <ADG1414_Chain_SwitchOn+0xc2>
    	{
    		dev->switch_state[0] = (1 << (channel_num - 1));
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	2201      	movs	r2, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	735a      	strb	r2, [r3, #13]
 80039c4:	e002      	b.n	80039cc <ADG1414_Chain_SwitchOn+0xc8>
    	}

    	else
    	{
    		dev->switch_state[0] = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	735a      	strb	r2, [r3, #13]
		}
	}

    ADG1414_Chain_Write(dev);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff feec 	bl	80037aa <ADG1414_Chain_Write>
 80039d2:	e002      	b.n	80039da <ADG1414_Chain_SwitchOn+0xd6>
    	return;  // Kiểm tra giới hạn
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <ADG1414_Chain_SwitchOn+0xd6>
		return;  // Kiểm tra giới hạn
 80039d8:	bf00      	nop
}
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	2aaaaaab 	.word	0x2aaaaaab

080039e4 <ADG1414_Chain_SwitchAllOff>:
//	ADG1414_Chain_Write(dev);
//}

/* Hàm tắt tất cả các switch */
void ADG1414_Chain_SwitchAllOff(ADG1414_Device_t *dev)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < dev->num_of_sw; i++)
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e008      	b.n	8003a04 <ADG1414_Chain_SwitchAllOff+0x20>
    {
        dev->switch_state[i] = 0x00;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	330d      	adds	r3, #13
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7b1b      	ldrb	r3, [r3, #12]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	dbf0      	blt.n	80039f2 <ADG1414_Chain_SwitchAllOff+0xe>
    }
    ADG1414_Chain_Write(dev);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff feca 	bl	80037aa <ADG1414_Chain_Write>
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <LL_SPI_Enable>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_SPI_Disable>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_SPI_IsEnabled>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6e:	2b40      	cmp	r3, #64	@ 0x40
 8003a70:	d101      	bne.n	8003a76 <LL_SPI_IsEnabled+0x18>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_SPI_IsEnabled+0x1a>
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_SPI_SetBaudRatePrescaler>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_SPI_SetDataWidth>:
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_SPI_IsActiveFlag_RXNE>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_SPI_IsActiveFlag_TXE>:
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d101      	bne.n	8003b0e <LL_SPI_IsActiveFlag_TXE+0x18>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_SPI_IsActiveFlag_BSY>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	d101      	bne.n	8003b34 <LL_SPI_IsActiveFlag_BSY+0x18>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_SPI_ReceiveData8>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_SPI_TransmitData8>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	701a      	strb	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_GPIO_IsInputPinSet>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4013      	ands	r3, r2
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_GPIO_SetOutputPin>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	619a      	str	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_GPIO_ResetOutputPin>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <ADS8327_Transmit16>:
#include "UART.h"

static uint16_t CFR_user_default = 0x0EFD;		//0000 1110 1111 1101

static void ADS8327_Transmit16(ADS8327_Device_t *dev, uint16_t data)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	807b      	strh	r3, [r7, #2]
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8003bf2:	bf00      	nop
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff7c 	bl	8003af6 <LL_SPI_IsActiveFlag_TXE>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f7      	beq.n	8003bf4 <ADS8327_Transmit16+0xe>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)(data>>8));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7ff ffa3 	bl	8003b5e <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8003c18:	bf00      	nop
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff69 	bl	8003af6 <LL_SPI_IsActiveFlag_TXE>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f7      	beq.n	8003c1a <ADS8327_Transmit16+0x34>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi
 8003c2a:	bf00      	nop
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff73 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f7      	bne.n	8003c2c <ADS8327_Transmit16+0x46>
	(void)LL_SPI_ReceiveData8(dev->spi);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff7e 	bl	8003b42 <LL_SPI_ReceiveData8>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)data);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff84 	bl	8003b5e <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8003c56:	bf00      	nop
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff4a 	bl	8003af6 <LL_SPI_IsActiveFlag_TXE>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f7      	beq.n	8003c58 <ADS8327_Transmit16+0x72>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8003c68:	bf00      	nop
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff54 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f7      	bne.n	8003c6a <ADS8327_Transmit16+0x84>
	(void)LL_SPI_ReceiveData8(dev->spi);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff5f 	bl	8003b42 <LL_SPI_ReceiveData8>

}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <ADS8327_Receive16>:

static uint16_t ADS8327_Receive16(ADS8327_Device_t *dev)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	uint16_t data1 = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	81fb      	strh	r3, [r7, #14]
	uint16_t data2 = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	81bb      	strh	r3, [r7, #12]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8003c9c:	bf00      	nop
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff27 	bl	8003af6 <LL_SPI_IsActiveFlag_TXE>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f7      	beq.n	8003c9e <ADS8327_Receive16+0x12>
	LL_SPI_TransmitData8(dev->spi, 0xAA);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	21aa      	movs	r1, #170	@ 0xaa
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff52 	bl	8003b5e <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003cba:	bf00      	nop
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff2b 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f7      	bne.n	8003cbc <ADS8327_Receive16+0x30>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8003ccc:	bf00      	nop
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fefc 	bl	8003ad0 <LL_SPI_IsActiveFlag_RXNE>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f7      	beq.n	8003cce <ADS8327_Receive16+0x42>
	data1 = LL_SPI_ReceiveData8(dev->spi);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ff2d 	bl	8003b42 <LL_SPI_ReceiveData8>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	81fb      	strh	r3, [r7, #14]
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003cec:	bf00      	nop
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff ff12 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f7      	bne.n	8003cee <ADS8327_Receive16+0x62>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8003cfe:	bf00      	nop
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fef6 	bl	8003af6 <LL_SPI_IsActiveFlag_TXE>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f7      	beq.n	8003d00 <ADS8327_Receive16+0x74>
	LL_SPI_TransmitData8(dev->spi, 0xAA);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	21aa      	movs	r1, #170	@ 0xaa
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff21 	bl	8003b5e <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003d1c:	bf00      	nop
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fefa 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f7      	bne.n	8003d1e <ADS8327_Receive16+0x92>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8003d2e:	bf00      	nop
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fecb 	bl	8003ad0 <LL_SPI_IsActiveFlag_RXNE>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f7      	beq.n	8003d30 <ADS8327_Receive16+0xa4>
	data2 = LL_SPI_ReceiveData8(dev->spi);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fefc 	bl	8003b42 <LL_SPI_ReceiveData8>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	81bb      	strh	r3, [r7, #12]
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003d4e:	bf00      	nop
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fee1 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f7      	bne.n	8003d50 <ADS8327_Receive16+0xc4>

	return (data1 << 8)|data2;
 8003d60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	b29b      	uxth	r3, r3
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <ADS8327_Wake_Up>:

void ADS8327_Wake_Up(ADS8327_Device_t *dev)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	dev->CMD = ADS8327_CMD_WAKE_UP;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f44f 4230 	mov.w	r2, #45056	@ 0xb000
 8003d88:	839a      	strh	r2, [r3, #28]
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7ff ff17 	bl	8003bc8 <LL_GPIO_ResetOutputPin>

    ADS8327_Transmit16(dev, dev->CMD);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8b9b      	ldrh	r3, [r3, #28]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff20 	bl	8003be6 <ADS8327_Transmit16>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7ff fefb 	bl	8003bac <LL_GPIO_SetOutputPin>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <ADS8327_Write_CFR>:

void ADS8327_Write_CFR(ADS8327_Device_t *dev, uint16_t CFR)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	807b      	strh	r3, [r7, #2]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7ff fef7 	bl	8003bc8 <LL_GPIO_ResetOutputPin>

	dev->CMD = ADS8327_CMD_WRITE_CONFIG;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003de0:	839a      	strh	r2, [r3, #28]
	dev->CFR_value = CFR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	83da      	strh	r2, [r3, #30]
	uint16_t temp = (dev->CMD & 0xF000) | (dev->CFR_value & 0x0FFF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8b9b      	ldrh	r3, [r3, #28]
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003df2:	f023 030f 	bic.w	r3, r3, #15
 8003df6:	b21a      	sxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8bdb      	ldrh	r3, [r3, #30]
 8003dfc:	b21b      	sxth	r3, r3
 8003dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b21b      	sxth	r3, r3
 8003e08:	81fb      	strh	r3, [r7, #14]

	ADS8327_Transmit16(dev, temp);
 8003e0a:	89fb      	ldrh	r3, [r7, #14]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fee9 	bl	8003be6 <ADS8327_Transmit16>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7ff fec4 	bl	8003bac <LL_GPIO_SetOutputPin>
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <ADS8327_Default_CFR>:


void ADS8327_Default_CFR(ADS8327_Device_t *dev, CFR_default_t CFR_default)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
	if (CFR_default == USER_DEFAULT)
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <ADS8327_Default_CFR+0x20>
	{
		ADS8327_Write_CFR(dev, CFR_user_default);
 8003e3e:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <ADS8327_Default_CFR+0x6c>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ffba 	bl	8003dbe <ADS8327_Write_CFR>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
		ADS8327_Transmit16(dev, dev->CMD);
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
	}
}
 8003e4a:	e020      	b.n	8003e8e <ADS8327_Default_CFR+0x62>
	else if (CFR_default == FACTORY_DEFAULT)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11d      	bne.n	8003e8e <ADS8327_Default_CFR+0x62>
		LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f7ff feb3 	bl	8003bc8 <LL_GPIO_ResetOutputPin>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8003e68:	839a      	strh	r2, [r3, #28]
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f640 62fd 	movw	r2, #3837	@ 0xefd
 8003e70:	83da      	strh	r2, [r3, #30]
		ADS8327_Transmit16(dev, dev->CMD);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8b9b      	ldrh	r3, [r3, #28]
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff feb4 	bl	8003be6 <ADS8327_Transmit16>
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7ff fe8f 	bl	8003bac <LL_GPIO_SetOutputPin>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000034 	.word	0x20000034

08003e9c <ADS8327_Read_Data_Polling>:


uint16_t ADS8327_Read_Data_Polling(ADS8327_Device_t *dev, int timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	LL_GPIO_ResetOutputPin(dev->convst_port, dev->convst_pin);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7ff fe89 	bl	8003bc8 <LL_GPIO_ResetOutputPin>
	int time = timeout;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
	while(LL_GPIO_IsInputPinSet(dev->EOC_port, dev->EOC_pin) && (time--));
 8003eba:	bf00      	nop
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7ff fe5b 	bl	8003b82 <LL_GPIO_IsInputPinSet>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <ADS8327_Read_Data_Polling+0x40>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ef      	bne.n	8003ebc <ADS8327_Read_Data_Polling+0x20>
	time = timeout;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
	while(!LL_GPIO_IsInputPinSet(dev->EOC_port, dev->EOC_pin) && (time--));
 8003ee0:	bf00      	nop
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7ff fe48 	bl	8003b82 <LL_GPIO_IsInputPinSet>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <ADS8327_Read_Data_Polling+0x66>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	60fa      	str	r2, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1ef      	bne.n	8003ee2 <ADS8327_Read_Data_Polling+0x46>

	LL_GPIO_SetOutputPin(dev->convst_port, dev->convst_pin);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7ff fe4d 	bl	8003bac <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7ff fe53 	bl	8003bc8 <LL_GPIO_ResetOutputPin>

	dev->ADC_val = ADS8327_Receive16(dev);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff feb2 	bl	8003c8c <ADS8327_Receive16>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	841a      	strh	r2, [r3, #32]

	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 8003f30:	bf00      	nop
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fdf0 	bl	8003b1c <LL_SPI_IsActiveFlag_BSY>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f7      	bne.n	8003f32 <ADS8327_Read_Data_Polling+0x96>
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7ff fe2d 	bl	8003bac <LL_GPIO_SetOutputPin>

	return dev->ADC_val;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8c1b      	ldrh	r3, [r3, #32]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <ISR_TIMTrigger_IRQHandler>:
	}
}
*/

void ISR_TIMTrigger_IRQHandler(ADS8327_Device_t *dev)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	WRITE_REG(dev->convst_port->BSRR, dev->convst_pin);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6912      	ldr	r2, [r2, #16]
 8003f70:	619a      	str	r2, [r3, #24]
	// Collect data
	if(adc_rec_ind < adc_rec_total)
 8003f72:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <ISR_TIMTrigger_IRQHandler+0x9c>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <ISR_TIMTrigger_IRQHandler+0xa0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d220      	bcs.n	8003fc0 <ISR_TIMTrigger_IRQHandler+0x60>
	{
		WRITE_REG(dev->cs_port->BSRR, (dev->cs_pin << 16));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0412      	lsls	r2, r2, #16
 8003f88:	619a      	str	r2, [r3, #24]
		SET_BIT(dev->spi->CR2, SPI_CR2_TXEIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f98:	605a      	str	r2, [r3, #4]
		*(__IO uint16_t *)&dev->spi->DR = 0xAAAA;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003fa4:	801a      	strh	r2, [r3, #0]
		adc_ptr[adc_rec_ind++] = dev->ADC_val;
 8003fa6:	4b17      	ldr	r3, [pc, #92]	@ (8004004 <ISR_TIMTrigger_IRQHandler+0xa4>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <ISR_TIMTrigger_IRQHandler+0x9c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	4812      	ldr	r0, [pc, #72]	@ (8003ffc <ISR_TIMTrigger_IRQHandler+0x9c>)
 8003fb2:	6001      	str	r1, [r0, #0]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	4413      	add	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	8c12      	ldrh	r2, [r2, #32]
 8003fbc:	801a      	strh	r2, [r3, #0]
	//	LL_GPIO_SetOutputPin(dev->convst_port, dev->convst_pin);
	//	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
	//	LL_SPI_EnableIT_TXE(dev->spi);
	//	LL_SPI_TransmitData16(dev->spi, 0xAAAA); 	// Transmit dummy

}
 8003fbe:	e019      	b.n	8003ff4 <ISR_TIMTrigger_IRQHandler+0x94>
		CLEAR_BIT(dev->spi->CR2, SPI_CR2_TXEIE);		//Clear TXE
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fce:	605a      	str	r2, [r3, #4]
		CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <ISR_TIMTrigger_IRQHandler+0xa8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <ISR_TIMTrigger_IRQHandler+0xa8>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <ISR_TIMTrigger_IRQHandler+0xa8>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <ISR_TIMTrigger_IRQHandler+0xa8>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	60d3      	str	r3, [r2, #12]
		UARTprintf("\r\n %d samples successfully taken!\r\n", adc_rec_ind);
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <ISR_TIMTrigger_IRQHandler+0x9c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	4807      	ldr	r0, [pc, #28]	@ (800400c <ISR_TIMTrigger_IRQHandler+0xac>)
 8003ff0:	f001 fea0 	bl	8005d34 <UARTprintf>
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20018964 	.word	0x20018964
 8004000:	20018968 	.word	0x20018968
 8004004:	20000000 	.word	0x20000000
 8004008:	40010000 	.word	0x40010000
 800400c:	08008b78 	.word	0x08008b78

08004010 <ISR_SPI_IRQHandler>:

void ISR_SPI_IRQHandler(ADS8327_Device_t *dev)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	// Kiểm tra cờ ngắt TXE
	if (READ_BIT(dev->spi->SR, SPI_SR_TXE) == (SPI_SR_TXE))//LL_SPI_IsActiveFlag_TXE(dev->spi))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d11c      	bne.n	8004060 <ISR_SPI_IRQHandler+0x50>
	{
		WRITE_REG(dev->convst_port->BSRR, (dev->convst_pin << 16));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	0412      	lsls	r2, r2, #16
 8004030:	619a      	str	r2, [r3, #24]
		dev->ADC_val = (uint16_t)(READ_REG(dev->spi->DR));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	841a      	strh	r2, [r3, #32]
		WRITE_REG(dev->cs_port->BSRR, dev->cs_pin);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6892      	ldr	r2, [r2, #8]
 8004046:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(dev->spi->CR2, SPI_CR2_TXEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004056:	605a      	str	r2, [r3, #4]
		dev->tran_ind = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//		dev->ADC_val = LL_SPI_ReceiveData16(dev->spi);
//		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
//		LL_SPI_DisableIT_TXE(dev->spi);
//		dev->tran_ind = 0;
	}
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <SPI_SetPrescaler>:
	LL_SPI_EnableIT_TXE(dev->spi);
	dev->tran_ind = 1;
}

void SPI_SetPrescaler(SPI_TypeDef *spi, uint32_t Prescaler)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
    // Kiểm tra giá trị prescaler hợp lệ
    if ((Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV2) &&
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d014      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d011      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV4) &&
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d00e      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV8) &&
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b18      	cmp	r3, #24
 800408c:	d00b      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV16) &&
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b20      	cmp	r3, #32
 8004092:	d008      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV32) &&
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b28      	cmp	r3, #40	@ 0x28
 8004098:	d005      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV64) &&
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b30      	cmp	r3, #48	@ 0x30
 800409e:	d002      	beq.n	80040a6 <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV128) &&
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b38      	cmp	r3, #56	@ 0x38
 80040a4:	d10a      	bne.n	80040bc <SPI_SetPrescaler+0x50>
    {
        // Xử lý lỗi nếu prescaler không hợp lệ
        return;
    }
    // Vô hiệu hóa SPIx
    LL_SPI_Disable(spi);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fcc9 	bl	8003a3e <LL_SPI_Disable>
    // Cấu hình lại prescaler
    LL_SPI_SetBaudRatePrescaler(spi, Prescaler);
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fce8 	bl	8003a84 <LL_SPI_SetBaudRatePrescaler>
    // Kích hoạt lại SPIx
    LL_SPI_Enable(spi);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fcb2 	bl	8003a1e <LL_SPI_Enable>
 80040ba:	e000      	b.n	80040be <SPI_SetPrescaler+0x52>
        return;
 80040bc:	bf00      	nop
}
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <SPI_SetDataLength>:

// Hàm thay đổi data length của SPIx
void SPI_SetDataLength(SPI_TypeDef *spi, uint32_t DataWidth)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
    // Kiểm tra giá trị DataWidth hợp lệ
    if ((DataWidth != LL_SPI_DATAWIDTH_8BIT)  &&
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <SPI_SetDataLength+0x18>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040da:	d10a      	bne.n	80040f2 <SPI_SetDataLength+0x2e>
    {
        // Xử lý lỗi nếu DataWidth không hợp lệ
        return;
    }
    // Vô hiệu hóa SPIx để thay đổi cấu hình
    LL_SPI_Disable(spi);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fcae 	bl	8003a3e <LL_SPI_Disable>
    // Cập nhật Data Width
    LL_SPI_SetDataWidth(spi, DataWidth);
 80040e2:	6839      	ldr	r1, [r7, #0]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fce0 	bl	8003aaa <LL_SPI_SetDataWidth>
    // Kích hoạt lại SPIx
    LL_SPI_Enable(spi);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fc97 	bl	8003a1e <LL_SPI_Enable>
 80040f0:	e000      	b.n	80040f4 <SPI_SetDataLength+0x30>
        return;
 80040f2:	bf00      	nop
}
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <ADS8327_Device_Init>:
							uint32_t cs_pin,
							GPIO_TypeDef *convst_port,
							uint32_t convst_pin,
							GPIO_TypeDef *EOC_port,
							uint32_t EOC_pin)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]

	dev->spi = spi;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	609a      	str	r2, [r3, #8]
	dev->convst_port = convst_port;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	60da      	str	r2, [r3, #12]
	dev->convst_pin = convst_pin;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	611a      	str	r2, [r3, #16]
	dev->EOC_port = EOC_port;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	615a      	str	r2, [r3, #20]
	dev->EOC_pin = EOC_pin;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	619a      	str	r2, [r3, #24]
	dev->ADC_val = 0xFFFF;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004138:	841a      	strh	r2, [r3, #32]
	dev->tran_ind = 0;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	while (!LL_SPI_IsEnabled(dev->spi))
 8004142:	e005      	b.n	8004150 <ADS8327_Device_Init+0x56>
	{
		LL_SPI_Enable(dev->spi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fc68 	bl	8003a1e <LL_SPI_Enable>
		__NOP();
 800414e:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fc82 	bl	8003a5e <LL_SPI_IsEnabled>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f1      	beq.n	8004144 <ADS8327_Device_Init+0x4a>
	}

	ADS8327_Default_CFR(dev, USER_DEFAULT);
 8004160:	2100      	movs	r1, #0
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff fe62 	bl	8003e2c <ADS8327_Default_CFR>
	ADS8327_Wake_Up(dev);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff fe06 	bl	8003d7a <ADS8327_Wake_Up>
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 800418c:	e01f      	b.n	80041ce <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b20      	cmp	r3, #32
 8004194:	d105      	bne.n	80041a2 <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e012      	b.n	80041c8 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00f      	beq.n	80041c8 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b07      	cmp	r3, #7
 80041ac:	d80a      	bhi.n	80041c4 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80041ae:	491d      	ldr	r1, [pc, #116]	@ (8004224 <CmdLineProcess+0xac>)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3301      	adds	r3, #1
 80041bc:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	e001      	b.n	80041c8 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80041c4:	2302      	movs	r3, #2
 80041c6:	e028      	b.n	800421a <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3301      	adds	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1db      	bne.n	800418e <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01d      	beq.n	8004218 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80041dc:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <CmdLineProcess+0xb0>)
 80041de:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 80041e0:	e016      	b.n	8004210 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <CmdLineProcess+0xac>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f7fb ffef 	bl	80001d0 <strcmp>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4909      	ldr	r1, [pc, #36]	@ (8004224 <CmdLineProcess+0xac>)
 8004200:	4610      	mov	r0, r2
 8004202:	4798      	blx	r3
 8004204:	4603      	mov	r3, r0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e007      	b.n	800421a <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	330c      	adds	r3, #12
 800420e:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e4      	bne.n	80041e2 <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8004218:	2301      	movs	r3, #1
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20018a40 	.word	0x20018a40
 8004228:	2000004c 	.word	0x2000004c

0800422c <LL_TIM_EnableCounter>:
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_TIM_DisableCounter>:
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 0201 	bic.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_TIM_SetCounter>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_TIM_SetAutoReload>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_TIM_EnableIT_UPDATE>:
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_TIM_DisableIT_UPDATE>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f023 0201 	bic.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <command_init>:
static uint8_t	s_commandBufferIndex = 0;
static uint8_t photo_index = 0;
static uint32_t samp_rate = 0;

void	command_init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
	USART6_init();
 80042e8:	f001 fab0 	bl	800584c <USART6_init>
	p_CommandRingBuffer = uart_get_USART6_rx_buffer_address();
 80042ec:	f001 fb1c 	bl	8005928 <uart_get_USART6_rx_buffer_address>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <command_init+0x2c>)
 80042f4:	6013      	str	r3, [r2, #0]
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 80042f6:	2220      	movs	r2, #32
 80042f8:	2100      	movs	r1, #0
 80042fa:	4806      	ldr	r0, [pc, #24]	@ (8004314 <command_init+0x30>)
 80042fc:	f002 fd55 	bl	8006daa <memset>
	s_commandBufferIndex = 0;
 8004300:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <command_init+0x34>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
	USART6_send_string("EXP_LASER_TEST V1.1.0 \r\n>");
 8004306:	4805      	ldr	r0, [pc, #20]	@ (800431c <command_init+0x38>)
 8004308:	f001 fadc 	bl	80058c4 <USART6_send_string>
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20018a64 	.word	0x20018a64
 8004314:	20018a68 	.word	0x20018a68
 8004318:	20018a88 	.word	0x20018a88
 800431c:	08008d94 	.word	0x08008d94

08004320 <ftoa>:
	0.05,				// 1
	0.005,				// 2
};

char * ftoa(double f, char * buf, int precision)
{
 8004320:	b5b0      	push	{r4, r5, r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	ed87 0b02 	vstr	d0, [r7, #8]
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
	char * p = ptr;
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;
	if (precision > MAX_PRECISION)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b02      	cmp	r3, #2
 800433a:	dd01      	ble.n	8004340 <ftoa+0x20>
	precision = MAX_PRECISION;
 800433c:	2302      	movs	r3, #2
 800433e:	603b      	str	r3, [r7, #0]
	if (f < 0)
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800434c:	f7fc fbce 	bl	8000aec <__aeabi_dcmplt>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <ftoa+0x4c>
	{
		f = -f;
 8004356:	68bc      	ldr	r4, [r7, #8]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800435e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	627a      	str	r2, [r7, #36]	@ 0x24
 8004368:	222d      	movs	r2, #45	@ 0x2d
 800436a:	701a      	strb	r2, [r3, #0]
	}
	if (precision < 0)  
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da4f      	bge.n	8004412 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	4b7c      	ldr	r3, [pc, #496]	@ (8004568 <ftoa+0x248>)
 8004378:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800437c:	f7fc fbb6 	bl	8000aec <__aeabi_dcmplt>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <ftoa+0x6c>
 8004386:	2306      	movs	r3, #6
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	e042      	b.n	8004412 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	4b76      	ldr	r3, [pc, #472]	@ (800456c <ftoa+0x24c>)
 8004392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004396:	f7fc fba9 	bl	8000aec <__aeabi_dcmplt>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <ftoa+0x86>
 80043a0:	2305      	movs	r3, #5
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	e035      	b.n	8004412 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	4b71      	ldr	r3, [pc, #452]	@ (8004570 <ftoa+0x250>)
 80043ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043b0:	f7fc fb9c 	bl	8000aec <__aeabi_dcmplt>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <ftoa+0xa0>
 80043ba:	2304      	movs	r3, #4
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	e028      	b.n	8004412 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004574 <ftoa+0x254>)
 80043c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ca:	f7fc fb8f 	bl	8000aec <__aeabi_dcmplt>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <ftoa+0xba>
 80043d4:	2303      	movs	r3, #3
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	e01b      	b.n	8004412 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 80043da:	a35f      	add	r3, pc, #380	@ (adr r3, 8004558 <ftoa+0x238>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043e4:	f7fc fb82 	bl	8000aec <__aeabi_dcmplt>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <ftoa+0xd4>
 80043ee:	2302      	movs	r3, #2
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	e00e      	b.n	8004412 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 80043f4:	a35a      	add	r3, pc, #360	@ (adr r3, 8004560 <ftoa+0x240>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043fe:	f7fc fb75 	bl	8000aec <__aeabi_dcmplt>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <ftoa+0xee>
 8004408:	2301      	movs	r3, #1
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	e001      	b.n	8004412 <ftoa+0xf2>
		else precision = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	603b      	str	r3, [r7, #0]
	}
	if (precision)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <ftoa+0x114>
	f += rounders[precision];
 8004418:	4a57      	ldr	r2, [pc, #348]	@ (8004578 <ftoa+0x258>)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004428:	f7fb ff38 	bl	800029c <__adddf3>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e9c7 2302 	strd	r2, r3, [r7, #8]
	intPart = f;
 8004434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004438:	f7fc fb80 	bl	8000b3c <__aeabi_d2iz>
 800443c:	4603      	mov	r3, r0
 800443e:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8004440:	69f8      	ldr	r0, [r7, #28]
 8004442:	f7fc f877 	bl	8000534 <__aeabi_i2d>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800444e:	f7fb ff23 	bl	8000298 <__aeabi_dsub>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <ftoa+0x14c>
	*ptr++ = '0';
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	627a      	str	r2, [r7, #36]	@ 0x24
 8004466:	2230      	movs	r2, #48	@ 0x30
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e038      	b.n	80044de <ftoa+0x1be>
	else
	{
		p = ptr;
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	623b      	str	r3, [r7, #32]
		while (intPart)
 8004470:	e01a      	b.n	80044a8 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	4b41      	ldr	r3, [pc, #260]	@ (800457c <ftoa+0x25c>)
 8004476:	fb83 1302 	smull	r1, r3, r3, r2
 800447a:	1099      	asrs	r1, r3, #2
 800447c:	17d3      	asrs	r3, r2, #31
 800447e:	1ac9      	subs	r1, r1, r3
 8004480:	460b      	mov	r3, r1
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	1ad1      	subs	r1, r2, r3
 800448a:	b2ca      	uxtb	r2, r1
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	1c59      	adds	r1, r3, #1
 8004490:	6239      	str	r1, [r7, #32]
 8004492:	3230      	adds	r2, #48	@ 0x30
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4a38      	ldr	r2, [pc, #224]	@ (800457c <ftoa+0x25c>)
 800449c:	fb82 1203 	smull	r1, r2, r2, r3
 80044a0:	1092      	asrs	r2, r2, #2
 80044a2:	17db      	asrs	r3, r3, #31
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	61fb      	str	r3, [r7, #28]
		while (intPart)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e1      	bne.n	8004472 <ftoa+0x152>
		}
		p1 = p;
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	61bb      	str	r3, [r7, #24]
		while (p > ptr)
 80044b2:	e00e      	b.n	80044d2 <ftoa+0x1b2>
		{
			c = *--p;
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	623b      	str	r3, [r7, #32]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ce:	7dfa      	ldrb	r2, [r7, #23]
 80044d0:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d8ec      	bhi.n	80044b4 <ftoa+0x194>
		}
		ptr = p1;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	if (precision)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d030      	beq.n	8004546 <ftoa+0x226>
	{
		*ptr++ = '.';
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ea:	222e      	movs	r2, #46	@ 0x2e
 80044ec:	701a      	strb	r2, [r3, #0]
		while (precision--)
 80044ee:	e025      	b.n	800453c <ftoa+0x21c>
		{
			f *= 10.0;
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	4b1d      	ldr	r3, [pc, #116]	@ (800456c <ftoa+0x24c>)
 80044f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044fa:	f7fc f885 	bl	8000608 <__aeabi_dmul>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 8004506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800450a:	f7fc fb3f 	bl	8000b8c <__aeabi_d2uiz>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	627a      	str	r2, [r7, #36]	@ 0x24
 8004518:	7dfa      	ldrb	r2, [r7, #23]
 800451a:	3230      	adds	r2, #48	@ 0x30
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc f806 	bl	8000534 <__aeabi_i2d>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004530:	f7fb feb2 	bl	8000298 <__aeabi_dsub>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	603a      	str	r2, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1d4      	bne.n	80044f0 <ftoa+0x1d0>
		}
	}
	*ptr = 0;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
	return buf;
 800454c:	687b      	ldr	r3, [r7, #4]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3728      	adds	r7, #40	@ 0x28
 8004552:	46bd      	mov	sp, r7
 8004554:	bdb0      	pop	{r4, r5, r7, pc}
 8004556:	bf00      	nop
 8004558:	00000000 	.word	0x00000000
 800455c:	40c38800 	.word	0x40c38800
 8004560:	00000000 	.word	0x00000000
 8004564:	40f86a00 	.word	0x40f86a00
 8004568:	3ff00000 	.word	0x3ff00000
 800456c:	40240000 	.word	0x40240000
 8004570:	40590000 	.word	0x40590000
 8004574:	408f4000 	.word	0x408f4000
 8004578:	08008f18 	.word	0x08008f18
 800457c:	66666667 	.word	0x66666667

08004580 <Map>:

int32_t Map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	1a8a      	subs	r2, r1, r2
 800459a:	fb03 f202 	mul.w	r2, r3, r2
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1acb      	subs	r3, r1, r3
 80045a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4413      	add	r3, r2
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <crc16_CCITT_update>:

static void crc16_CCITT_update(uint16_t *crc, uint16_t data)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
    uint8_t bytes[2] = {data >> 8, data & 0xFF};
 80045c4:	887b      	ldrh	r3, [r7, #2]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	733b      	strb	r3, [r7, #12]
 80045ce:	887b      	ldrh	r3, [r7, #2]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	737b      	strb	r3, [r7, #13]
    for (uint8_t i = 0; i < 2; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e032      	b.n	8004640 <crc16_CCITT_update+0x88>
    {
        *crc ^= bytes[i] << 8;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b21a      	sxth	r2, r3
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	3310      	adds	r3, #16
 80045e4:	443b      	add	r3, r7
 80045e6:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80045ea:	b21b      	sxth	r3, r3
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	b21b      	sxth	r3, r3
 80045f0:	4053      	eors	r3, r2
 80045f2:	b21b      	sxth	r3, r3
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	73bb      	strb	r3, [r7, #14]
 80045fe:	e019      	b.n	8004634 <crc16_CCITT_update+0x7c>
            *crc = (*crc & 0x8000) ? (*crc << 1) ^ 0x1021 : *crc << 1;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b21b      	sxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	da0b      	bge.n	8004622 <crc16_CCITT_update+0x6a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b21b      	sxth	r3, r3
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	b21b      	sxth	r3, r3
 8004614:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8004618:	f083 0301 	eor.w	r3, r3, #1
 800461c:	b21b      	sxth	r3, r3
 800461e:	b29b      	uxth	r3, r3
 8004620:	e003      	b.n	800462a <crc16_CCITT_update+0x72>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++)
 800462e:	7bbb      	ldrb	r3, [r7, #14]
 8004630:	3301      	adds	r3, #1
 8004632:	73bb      	strb	r3, [r7, #14]
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	2b07      	cmp	r3, #7
 8004638:	d9e2      	bls.n	8004600 <crc16_CCITT_update+0x48>
    for (uint8_t i = 0; i < 2; i++)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	3301      	adds	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d9c9      	bls.n	80045da <crc16_CCITT_update+0x22>
    }
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <htoa>:

static void htoa(uint16_t hex_value, char *output)
{
 8004654:	b4b0      	push	{r4, r5, r7}
 8004656:	b089      	sub	sp, #36	@ 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	80fb      	strh	r3, [r7, #6]
    const char hex_chars[] = "0123456789ABCDEF";
 8004660:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <htoa+0x88>)
 8004662:	f107 040c 	add.w	r4, r7, #12
 8004666:	461d      	mov	r5, r3
 8004668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800466a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	7023      	strb	r3, [r4, #0]
    output[0] = hex_chars[(hex_value >> 12) & 0x0F];
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	0b1b      	lsrs	r3, r3, #12
 8004674:	b29b      	uxth	r3, r3
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3320      	adds	r3, #32
 800467c:	443b      	add	r3, r7
 800467e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	701a      	strb	r2, [r3, #0]
    output[1] = hex_chars[(hex_value >> 8) & 0x0F];
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	b29b      	uxth	r3, r3
 800468c:	f003 020f 	and.w	r2, r3, #15
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	3220      	adds	r2, #32
 8004696:	443a      	add	r2, r7
 8004698:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800469c:	701a      	strb	r2, [r3, #0]
    output[2] = hex_chars[(hex_value >> 4) & 0x0F];
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	3302      	adds	r3, #2
 80046ac:	3220      	adds	r2, #32
 80046ae:	443a      	add	r2, r7
 80046b0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046b4:	701a      	strb	r2, [r3, #0]
    output[3] = hex_chars[hex_value & 0x0F];
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	3303      	adds	r3, #3
 80046c0:	3220      	adds	r2, #32
 80046c2:	443a      	add	r2, r7
 80046c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046c8:	701a      	strb	r2, [r3, #0]
    output[4] = ' ';
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2220      	movs	r2, #32
 80046d0:	701a      	strb	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3724      	adds	r7, #36	@ 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bcb0      	pop	{r4, r5, r7}
 80046da:	4770      	bx	lr
 80046dc:	08008db0 	.word	0x08008db0

080046e0 <cur_cal>:

static float cur_cal(uint16_t adc_val)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
	float temp = (adc_val* 1000 * 3.3f)/4095.0f;	//mV
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004734 <cur_cal+0x54>
 8004700:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004704:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004738 <cur_cal+0x58>
 8004708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800470c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp /= 250;
 8004710:	ed97 7a03 	vldr	s14, [r7, #12]
 8004714:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800473c <cur_cal+0x5c>
 8004718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800471c:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	ee07 3a90 	vmov	s15, r3
}
 8004726:	eeb0 0a67 	vmov.f32	s0, s15
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40533333 	.word	0x40533333
 8004738:	457ff000 	.word	0x457ff000
 800473c:	437a0000 	.word	0x437a0000

08004740 <command_task_update>:

void command_task_update(void*)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	char rxData;
	int8_t	ret_val;
	while (! rbuffer_empty(p_CommandRingBuffer))
 8004748:	e061      	b.n	800480e <command_task_update+0xce>
	{
		rxData = rbuffer_remove(p_CommandRingBuffer);
 800474a:	4b39      	ldr	r3, [pc, #228]	@ (8004830 <command_task_update+0xf0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 feb3 	bl	80054ba <rbuffer_remove>
 8004754:	4603      	mov	r3, r0
 8004756:	73bb      	strb	r3, [r7, #14]
		if ((rxData != '\r')&&(rxData != '\n'))	USART6_send_char(rxData);
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	2b0d      	cmp	r3, #13
 800475c:	d006      	beq.n	800476c <command_task_update+0x2c>
 800475e:	7bbb      	ldrb	r3, [r7, #14]
 8004760:	2b0a      	cmp	r3, #10
 8004762:	d003      	beq.n	800476c <command_task_update+0x2c>
 8004764:	7bbb      	ldrb	r3, [r7, #14]
 8004766:	4618      	mov	r0, r3
 8004768:	f001 f888 	bl	800587c <USART6_send_char>
		if (rxData == '\r')//got a return or new line
 800476c:	7bbb      	ldrb	r3, [r7, #14]
 800476e:	2b0d      	cmp	r3, #13
 8004770:	d129      	bne.n	80047c6 <command_task_update+0x86>
		{
			if (s_commandBufferIndex > 0)		//if we got the CR or LF at the begining, discard	
 8004772:	4b30      	ldr	r3, [pc, #192]	@ (8004834 <command_task_update+0xf4>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01d      	beq.n	80047b6 <command_task_update+0x76>
			{
				s_commandBuffer[s_commandBufferIndex] = 0;
 800477a:	4b2e      	ldr	r3, [pc, #184]	@ (8004834 <command_task_update+0xf4>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	4b2d      	ldr	r3, [pc, #180]	@ (8004838 <command_task_update+0xf8>)
 8004782:	2100      	movs	r1, #0
 8004784:	5499      	strb	r1, [r3, r2]
				ret_val = CmdLineProcess(s_commandBuffer);
 8004786:	482c      	ldr	r0, [pc, #176]	@ (8004838 <command_task_update+0xf8>)
 8004788:	f7ff fcf6 	bl	8004178 <CmdLineProcess>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
				s_commandBufferIndex = 0;
 8004790:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <command_task_update+0xf4>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
				if(ret_val < 5)
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	2b04      	cmp	r3, #4
 800479c:	dc37      	bgt.n	800480e <command_task_update+0xce>
				{
					USART6_send_string(ErrorCode[ret_val]);
 800479e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a2:	4a26      	ldr	r2, [pc, #152]	@ (800483c <command_task_update+0xfc>)
 80047a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f88b 	bl	80058c4 <USART6_send_string>
					USART6_send_string("\r\n> ");
 80047ae:	4824      	ldr	r0, [pc, #144]	@ (8004840 <command_task_update+0x100>)
 80047b0:	f001 f888 	bl	80058c4 <USART6_send_string>
 80047b4:	e02b      	b.n	800480e <command_task_update+0xce>
				}
			}	
			else
			{
				if(ret_val < 5)	USART6_send_string("\r\n> ");
 80047b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	dc27      	bgt.n	800480e <command_task_update+0xce>
 80047be:	4820      	ldr	r0, [pc, #128]	@ (8004840 <command_task_update+0x100>)
 80047c0:	f001 f880 	bl	80058c4 <USART6_send_string>
 80047c4:	e023      	b.n	800480e <command_task_update+0xce>
			}
		}
		else if ((rxData == 8) || (rxData == 127))	
 80047c6:	7bbb      	ldrb	r3, [r7, #14]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d002      	beq.n	80047d2 <command_task_update+0x92>
 80047cc:	7bbb      	ldrb	r3, [r7, #14]
 80047ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80047d0:	d10a      	bne.n	80047e8 <command_task_update+0xa8>
		{
			if (s_commandBufferIndex > 0) s_commandBufferIndex--;
 80047d2:	4b18      	ldr	r3, [pc, #96]	@ (8004834 <command_task_update+0xf4>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d019      	beq.n	800480e <command_task_update+0xce>
 80047da:	4b16      	ldr	r3, [pc, #88]	@ (8004834 <command_task_update+0xf4>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <command_task_update+0xf4>)
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e012      	b.n	800480e <command_task_update+0xce>
		}
		else
		{
			s_commandBuffer[s_commandBufferIndex] = rxData;
 80047e8:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <command_task_update+0xf4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	4a12      	ldr	r2, [pc, #72]	@ (8004838 <command_task_update+0xf8>)
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	5453      	strb	r3, [r2, r1]
			s_commandBufferIndex ++;
 80047f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <command_task_update+0xf4>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <command_task_update+0xf4>)
 80047fe:	701a      	strb	r2, [r3, #0]
			if (s_commandBufferIndex >= COMMAND_MAX_LENGTH) s_commandBufferIndex= 0;
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <command_task_update+0xf4>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b1f      	cmp	r3, #31
 8004806:	d902      	bls.n	800480e <command_task_update+0xce>
 8004808:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <command_task_update+0xf4>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
	while (! rbuffer_empty(p_CommandRingBuffer))
 800480e:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <command_task_update+0xf0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fe12 	bl	800543c <rbuffer_empty>
 8004818:	4603      	mov	r3, r0
 800481a:	f083 0301 	eor.w	r3, r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d192      	bne.n	800474a <command_task_update+0xa>
		}
	}	
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20018a64 	.word	0x20018a64
 8004834:	20018a88 	.word	0x20018a88
 8004838:	20018a68 	.word	0x20018a68
 800483c:	20000038 	.word	0x20000038
 8004840:	08008dc4 	.word	0x08008dc4

08004844 <Cmd_help>:



int Cmd_help(int argc, char *argv[]) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;

	USART6_send_string("\r\nAvailable commands:");
 800484e:	480f      	ldr	r0, [pc, #60]	@ (800488c <Cmd_help+0x48>)
 8004850:	f001 f838 	bl	80058c4 <USART6_send_string>
	pEntry = &g_psCmdTable[0];
 8004854:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <Cmd_help+0x4c>)
 8004856:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8004858:	e00f      	b.n	800487a <Cmd_help+0x36>
		USART6_send_string("\r\n");
 800485a:	480e      	ldr	r0, [pc, #56]	@ (8004894 <Cmd_help+0x50>)
 800485c:	f001 f832 	bl	80058c4 <USART6_send_string>
		USART6_send_string(pEntry->pcCmd);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f001 f82d 	bl	80058c4 <USART6_send_string>
		USART6_send_string(pEntry->pcHelp);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f828 	bl	80058c4 <USART6_send_string>
		pEntry++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	330c      	adds	r3, #12
 8004878:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1eb      	bne.n	800485a <Cmd_help+0x16>

	}
	return CMDLINE_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	08008dcc 	.word	0x08008dcc
 8004890:	2000004c 	.word	0x2000004c
 8004894:	08008de4 	.word	0x08008de4

08004898 <Cmd_set_laser>:
// Format: get_temp
// Get the temperature from NTC
//
//*****************************************************************************
int Cmd_set_laser(int argc, char *argv[])
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	uint8_t laser_ind = atoi(argv[2]);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fae2 	bl	8005e72 <atoi>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]
	uint8_t percent = atof(argv[3]);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fad7 	bl	8005e6c <atof>
 80048be:	ec53 2b10 	vmov	r2, r3, d0
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	f7fc f961 	bl	8000b8c <__aeabi_d2uiz>
 80048ca:	4603      	mov	r3, r0
 80048cc:	73bb      	strb	r3, [r7, #14]
	if(!strcmp(argv[1], "int"))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3304      	adds	r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4951      	ldr	r1, [pc, #324]	@ (8004a1c <Cmd_set_laser+0x184>)
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fc7a 	bl	80001d0 <strcmp>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d145      	bne.n	800496e <Cmd_set_laser+0xd6>
	{
		if(!laser_ind)
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d112      	bne.n	800490e <Cmd_set_laser+0x76>
		{
			if(argc < 3)		return CMDLINE_TOO_FEW_ARGS;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	dc01      	bgt.n	80048f2 <Cmd_set_laser+0x5a>
 80048ee:	2303      	movs	r3, #3
 80048f0:	e090      	b.n	8004a14 <Cmd_set_laser+0x17c>
			else if(argc > 3)	return CMDLINE_TOO_MANY_ARGS;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	dd01      	ble.n	80048fc <Cmd_set_laser+0x64>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e08b      	b.n	8004a14 <Cmd_set_laser+0x17c>
			MCP4902_Shutdown(&DAC_device, MCP4902_CHA);
 80048fc:	2100      	movs	r1, #0
 80048fe:	4848      	ldr	r0, [pc, #288]	@ (8004a20 <Cmd_set_laser+0x188>)
 8004900:	f000 fc92 	bl	8005228 <MCP4902_Shutdown>
			ADG1414_Chain_SwitchAllOff(&laser_int);
 8004904:	4847      	ldr	r0, [pc, #284]	@ (8004a24 <Cmd_set_laser+0x18c>)
 8004906:	f7ff f86d 	bl	80039e4 <ADG1414_Chain_SwitchAllOff>
			return CMDLINE_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e082      	b.n	8004a14 <Cmd_set_laser+0x17c>
		}

		else if((laser_ind > 0)&&(laser_ind <= 36))
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d027      	beq.n	8004964 <Cmd_set_laser+0xcc>
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b24      	cmp	r3, #36	@ 0x24
 8004918:	d824      	bhi.n	8004964 <Cmd_set_laser+0xcc>
		{
			if(argc < 4)		return CMDLINE_TOO_FEW_ARGS;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b03      	cmp	r3, #3
 800491e:	dc01      	bgt.n	8004924 <Cmd_set_laser+0x8c>
 8004920:	2303      	movs	r3, #3
 8004922:	e077      	b.n	8004a14 <Cmd_set_laser+0x17c>
			else if(argc > 4)	return CMDLINE_TOO_MANY_ARGS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b04      	cmp	r3, #4
 8004928:	dd01      	ble.n	800492e <Cmd_set_laser+0x96>
 800492a:	2302      	movs	r3, #2
 800492c:	e072      	b.n	8004a14 <Cmd_set_laser+0x17c>
			if((percent < 0)||(percent > 100))	return CMDLINE_INVALID_ARG;
 800492e:	7bbb      	ldrb	r3, [r7, #14]
 8004930:	2b64      	cmp	r3, #100	@ 0x64
 8004932:	d901      	bls.n	8004938 <Cmd_set_laser+0xa0>
 8004934:	2304      	movs	r3, #4
 8004936:	e06d      	b.n	8004a14 <Cmd_set_laser+0x17c>

			uint8_t dac_val = Map(percent, 0, 100, 0, 255);
 8004938:	7bb8      	ldrb	r0, [r7, #14]
 800493a:	23ff      	movs	r3, #255	@ 0xff
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	2264      	movs	r2, #100	@ 0x64
 8004942:	2100      	movs	r1, #0
 8004944:	f7ff fe1c 	bl	8004580 <Map>
 8004948:	4603      	mov	r3, r0
 800494a:	733b      	strb	r3, [r7, #12]
			MCP4902_Set_DAC(&DAC_device, MCP4902_CHA, dac_val);
 800494c:	7b3b      	ldrb	r3, [r7, #12]
 800494e:	461a      	mov	r2, r3
 8004950:	2100      	movs	r1, #0
 8004952:	4833      	ldr	r0, [pc, #204]	@ (8004a20 <Cmd_set_laser+0x188>)
 8004954:	f000 fcbe 	bl	80052d4 <MCP4902_Set_DAC>
			ADG1414_Chain_SwitchOn(&laser_int, laser_ind);
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4619      	mov	r1, r3
 800495c:	4831      	ldr	r0, [pc, #196]	@ (8004a24 <Cmd_set_laser+0x18c>)
 800495e:	f7fe ffd1 	bl	8003904 <ADG1414_Chain_SwitchOn>
		{
 8004962:	e056      	b.n	8004a12 <Cmd_set_laser+0x17a>
		}
		else if(laser_ind > 36)	return CMDLINE_INVALID_ARG;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b24      	cmp	r3, #36	@ 0x24
 8004968:	d953      	bls.n	8004a12 <Cmd_set_laser+0x17a>
 800496a:	2304      	movs	r3, #4
 800496c:	e052      	b.n	8004a14 <Cmd_set_laser+0x17c>

	}

	else if(!strcmp(argv[1], "ext"))
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	3304      	adds	r3, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	492c      	ldr	r1, [pc, #176]	@ (8004a28 <Cmd_set_laser+0x190>)
 8004976:	4618      	mov	r0, r3
 8004978:	f7fb fc2a 	bl	80001d0 <strcmp>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d145      	bne.n	8004a0e <Cmd_set_laser+0x176>
	{
		if(!laser_ind)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d112      	bne.n	80049ae <Cmd_set_laser+0x116>
		{
			if(argc < 3)		return CMDLINE_TOO_FEW_ARGS;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	dc01      	bgt.n	8004992 <Cmd_set_laser+0xfa>
 800498e:	2303      	movs	r3, #3
 8004990:	e040      	b.n	8004a14 <Cmd_set_laser+0x17c>
			else if(argc > 3)	return CMDLINE_TOO_MANY_ARGS;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b03      	cmp	r3, #3
 8004996:	dd01      	ble.n	800499c <Cmd_set_laser+0x104>
 8004998:	2302      	movs	r3, #2
 800499a:	e03b      	b.n	8004a14 <Cmd_set_laser+0x17c>
			MCP4902_Shutdown(&DAC_device, MCP4902_CHB);
 800499c:	2101      	movs	r1, #1
 800499e:	4820      	ldr	r0, [pc, #128]	@ (8004a20 <Cmd_set_laser+0x188>)
 80049a0:	f000 fc42 	bl	8005228 <MCP4902_Shutdown>
			ADG1414_Chain_SwitchAllOff(&laser_ext);
 80049a4:	4821      	ldr	r0, [pc, #132]	@ (8004a2c <Cmd_set_laser+0x194>)
 80049a6:	f7ff f81d 	bl	80039e4 <ADG1414_Chain_SwitchAllOff>
			return CMDLINE_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e032      	b.n	8004a14 <Cmd_set_laser+0x17c>
		}

		else if((laser_ind > 0)&&(laser_ind <= 8))
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d027      	beq.n	8004a04 <Cmd_set_laser+0x16c>
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d824      	bhi.n	8004a04 <Cmd_set_laser+0x16c>
		{
			if(argc < 4)		return CMDLINE_TOO_FEW_ARGS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	dc01      	bgt.n	80049c4 <Cmd_set_laser+0x12c>
 80049c0:	2303      	movs	r3, #3
 80049c2:	e027      	b.n	8004a14 <Cmd_set_laser+0x17c>
			else if(argc > 4)	return CMDLINE_TOO_MANY_ARGS;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	dd01      	ble.n	80049ce <Cmd_set_laser+0x136>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e022      	b.n	8004a14 <Cmd_set_laser+0x17c>
			if((percent < 0)||(percent > 100))	return CMDLINE_INVALID_ARG;
 80049ce:	7bbb      	ldrb	r3, [r7, #14]
 80049d0:	2b64      	cmp	r3, #100	@ 0x64
 80049d2:	d901      	bls.n	80049d8 <Cmd_set_laser+0x140>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e01d      	b.n	8004a14 <Cmd_set_laser+0x17c>

			uint8_t dac_val = Map(percent, 0, 100, 0, 255);
 80049d8:	7bb8      	ldrb	r0, [r7, #14]
 80049da:	23ff      	movs	r3, #255	@ 0xff
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2300      	movs	r3, #0
 80049e0:	2264      	movs	r2, #100	@ 0x64
 80049e2:	2100      	movs	r1, #0
 80049e4:	f7ff fdcc 	bl	8004580 <Map>
 80049e8:	4603      	mov	r3, r0
 80049ea:	737b      	strb	r3, [r7, #13]
			MCP4902_Set_DAC(&DAC_device, MCP4902_CHB, dac_val);
 80049ec:	7b7b      	ldrb	r3, [r7, #13]
 80049ee:	461a      	mov	r2, r3
 80049f0:	2101      	movs	r1, #1
 80049f2:	480b      	ldr	r0, [pc, #44]	@ (8004a20 <Cmd_set_laser+0x188>)
 80049f4:	f000 fc6e 	bl	80052d4 <MCP4902_Set_DAC>
			ADG1414_Chain_SwitchOn(&laser_ext, laser_ind);
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	4619      	mov	r1, r3
 80049fc:	480b      	ldr	r0, [pc, #44]	@ (8004a2c <Cmd_set_laser+0x194>)
 80049fe:	f7fe ff81 	bl	8003904 <ADG1414_Chain_SwitchOn>
		{
 8004a02:	e006      	b.n	8004a12 <Cmd_set_laser+0x17a>
		}
		else if(laser_ind > 8)	return CMDLINE_INVALID_ARG;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d903      	bls.n	8004a12 <Cmd_set_laser+0x17a>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e002      	b.n	8004a14 <Cmd_set_laser+0x17c>

	}

	else return CMDLINE_INVALID_ARG;
 8004a0e:	2304      	movs	r3, #4
 8004a10:	e000      	b.n	8004a14 <Cmd_set_laser+0x17c>
 	return CMDLINE_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08008de8 	.word	0x08008de8
 8004a20:	2001896c 	.word	0x2001896c
 8004a24:	20018984 	.word	0x20018984
 8004a28:	08008dec 	.word	0x08008dec
 8004a2c:	200189a4 	.word	0x200189a4

08004a30 <Cmd_get_current>:

// Format: get_current [int/ext]
int Cmd_get_current(int argc, char *argv[])
{
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	dc01      	bgt.n	8004a44 <Cmd_get_current+0x14>
 8004a40:	2303      	movs	r3, #3
 8004a42:	e055      	b.n	8004af0 <Cmd_get_current+0xc0>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	dd01      	ble.n	8004a4e <Cmd_get_current+0x1e>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e050      	b.n	8004af0 <Cmd_get_current+0xc0>
	char buf[10];
	float data_temp;
	if(!strcmp(argv[1], "int"))
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4928      	ldr	r1, [pc, #160]	@ (8004af8 <Cmd_get_current+0xc8>)
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fbba 	bl	80001d0 <strcmp>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11c      	bne.n	8004a9c <Cmd_get_current+0x6c>
	{
		USART6_send_string("\r\nCurrent int: ");
 8004a62:	4826      	ldr	r0, [pc, #152]	@ (8004afc <Cmd_get_current+0xcc>)
 8004a64:	f000 ff2e 	bl	80058c4 <USART6_send_string>
		data_temp = cur_cal(laser_adc.ADC_Data[0]);
 8004a68:	4b25      	ldr	r3, [pc, #148]	@ (8004b00 <Cmd_get_current+0xd0>)
 8004a6a:	899b      	ldrh	r3, [r3, #12]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fe37 	bl	80046e0 <cur_cal>
 8004a72:	ed87 0a05 	vstr	s0, [r7, #20]
		UARTprintf("%s mA",ftoa((float)data_temp, buf, 2));
 8004a76:	6978      	ldr	r0, [r7, #20]
 8004a78:	f7fb fd6e 	bl	8000558 <__aeabi_f2d>
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	460d      	mov	r5, r1
 8004a80:	f107 0308 	add.w	r3, r7, #8
 8004a84:	2102      	movs	r1, #2
 8004a86:	4618      	mov	r0, r3
 8004a88:	ec45 4b10 	vmov	d0, r4, r5
 8004a8c:	f7ff fc48 	bl	8004320 <ftoa>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4619      	mov	r1, r3
 8004a94:	481b      	ldr	r0, [pc, #108]	@ (8004b04 <Cmd_get_current+0xd4>)
 8004a96:	f001 f94d 	bl	8005d34 <UARTprintf>
 8004a9a:	e028      	b.n	8004aee <Cmd_get_current+0xbe>
	}
	else if(!strcmp(argv[1], "ext"))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4919      	ldr	r1, [pc, #100]	@ (8004b08 <Cmd_get_current+0xd8>)
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fb93 	bl	80001d0 <strcmp>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d11c      	bne.n	8004aea <Cmd_get_current+0xba>
	{
		USART6_send_string("\r\nCurrent ext: ");
 8004ab0:	4816      	ldr	r0, [pc, #88]	@ (8004b0c <Cmd_get_current+0xdc>)
 8004ab2:	f000 ff07 	bl	80058c4 <USART6_send_string>
		data_temp = cur_cal(laser_adc.ADC_Data[1]);
 8004ab6:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <Cmd_get_current+0xd0>)
 8004ab8:	89db      	ldrh	r3, [r3, #14]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fe10 	bl	80046e0 <cur_cal>
 8004ac0:	ed87 0a05 	vstr	s0, [r7, #20]
		UARTprintf("%s mA",ftoa((float)data_temp, buf, 2));
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f7fb fd47 	bl	8000558 <__aeabi_f2d>
 8004aca:	4604      	mov	r4, r0
 8004acc:	460d      	mov	r5, r1
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	ec45 4b10 	vmov	d0, r4, r5
 8004ada:	f7ff fc21 	bl	8004320 <ftoa>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4808      	ldr	r0, [pc, #32]	@ (8004b04 <Cmd_get_current+0xd4>)
 8004ae4:	f001 f926 	bl	8005d34 <UARTprintf>
 8004ae8:	e001      	b.n	8004aee <Cmd_get_current+0xbe>
	}
	else return CMDLINE_INVALID_ARG;
 8004aea:	2304      	movs	r3, #4
 8004aec:	e000      	b.n	8004af0 <Cmd_get_current+0xc0>
	return CMDLINE_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bdb0      	pop	{r4, r5, r7, pc}
 8004af8:	08008de8 	.word	0x08008de8
 8004afc:	08008df0 	.word	0x08008df0
 8004b00:	200189c4 	.word	0x200189c4
 8004b04:	08008e00 	.word	0x08008e00
 8004b08:	08008dec 	.word	0x08008dec
 8004b0c:	08008e08 	.word	0x08008e08

08004b10 <Cmd_pd_get>:

//Format: pd_get [pd_index]
int Cmd_pd_get(int argc, char *argv[])
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	dc01      	bgt.n	8004b24 <Cmd_pd_get+0x14>
 8004b20:	2303      	movs	r3, #3
 8004b22:	e031      	b.n	8004b88 <Cmd_pd_get+0x78>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	dd01      	ble.n	8004b2e <Cmd_pd_get+0x1e>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e02c      	b.n	8004b88 <Cmd_pd_get+0x78>

	uint8_t pd_ind = atoi(argv[1]);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	3304      	adds	r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f99c 	bl	8005e72 <atoi>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	73fb      	strb	r3, [r7, #15]
	if((pd_ind < 1) || (pd_ind > 36)) return CMDLINE_INVALID_ARG;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <Cmd_pd_get+0x3a>
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b24      	cmp	r3, #36	@ 0x24
 8004b48:	d901      	bls.n	8004b4e <Cmd_pd_get+0x3e>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	e01c      	b.n	8004b88 <Cmd_pd_get+0x78>

	SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_8BIT);
 8004b4e:	2100      	movs	r1, #0
 8004b50:	480f      	ldr	r0, [pc, #60]	@ (8004b90 <Cmd_pd_get+0x80>)
 8004b52:	f7ff fab7 	bl	80040c4 <SPI_SetDataLength>
	SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV16);
 8004b56:	2118      	movs	r1, #24
 8004b58:	480d      	ldr	r0, [pc, #52]	@ (8004b90 <Cmd_pd_get+0x80>)
 8004b5a:	f7ff fa87 	bl	800406c <SPI_SetPrescaler>
	ADG1414_Chain_SwitchOn(&photo_sw, pd_ind);
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	4619      	mov	r1, r3
 8004b62:	480c      	ldr	r0, [pc, #48]	@ (8004b94 <Cmd_pd_get+0x84>)
 8004b64:	f7fe fece 	bl	8003904 <ADG1414_Chain_SwitchOn>
	LL_mDelay(10);
 8004b68:	200a      	movs	r0, #10
 8004b6a:	f7fe fc6b 	bl	8003444 <LL_mDelay>

	ADS8327_Read_Data_Polling(&photo_adc, 1000);
 8004b6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b72:	4809      	ldr	r0, [pc, #36]	@ (8004b98 <Cmd_pd_get+0x88>)
 8004b74:	f7ff f992 	bl	8003e9c <ADS8327_Read_Data_Polling>
	UARTprintf("\r\nPD_index[%d]: %d", pd_ind, (uint16_t)photo_adc.ADC_val);
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	4a07      	ldr	r2, [pc, #28]	@ (8004b98 <Cmd_pd_get+0x88>)
 8004b7c:	8c12      	ldrh	r2, [r2, #32]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4806      	ldr	r0, [pc, #24]	@ (8004b9c <Cmd_pd_get+0x8c>)
 8004b82:	f001 f8d7 	bl	8005d34 <UARTprintf>
	return CMDLINE_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40003800 	.word	0x40003800
 8004b94:	200189f4 	.word	0x200189f4
 8004b98:	20018a14 	.word	0x20018a14
 8004b9c:	08008e18 	.word	0x08008e18

08004ba0 <Cmd_sample_set>:


//format: sp_set [photo_index] [sampling_rate]
int Cmd_sample_set(int argc, char *argv[])
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	dc01      	bgt.n	8004bb4 <Cmd_sample_set+0x14>
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e087      	b.n	8004cc4 <Cmd_sample_set+0x124>
	if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	dd01      	ble.n	8004bbe <Cmd_sample_set+0x1e>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e082      	b.n	8004cc4 <Cmd_sample_set+0x124>

	uint8_t pd_ind = atoi(argv[1]);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 f954 	bl	8005e72 <atoi>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	75fb      	strb	r3, [r7, #23]
	uint32_t sp_rate = atoi(argv[2]);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 f94c 	bl	8005e72 <atoi>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	613b      	str	r3, [r7, #16]

	if((pd_ind < 1) || (pd_ind > 36)) return CMDLINE_INVALID_ARG;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <Cmd_sample_set+0x4a>
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b24      	cmp	r3, #36	@ 0x24
 8004be8:	d901      	bls.n	8004bee <Cmd_sample_set+0x4e>
 8004bea:	2304      	movs	r3, #4
 8004bec:	e06a      	b.n	8004cc4 <Cmd_sample_set+0x124>
	if((sp_rate < 1) || (sp_rate > 330000)) return CMDLINE_INVALID_ARG;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <Cmd_sample_set+0x5c>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4a35      	ldr	r2, [pc, #212]	@ (8004ccc <Cmd_sample_set+0x12c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <Cmd_sample_set+0x60>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	e061      	b.n	8004cc4 <Cmd_sample_set+0x124>

	SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_8BIT);
 8004c00:	2100      	movs	r1, #0
 8004c02:	4833      	ldr	r0, [pc, #204]	@ (8004cd0 <Cmd_sample_set+0x130>)
 8004c04:	f7ff fa5e 	bl	80040c4 <SPI_SetDataLength>
	SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV16);
 8004c08:	2118      	movs	r1, #24
 8004c0a:	4831      	ldr	r0, [pc, #196]	@ (8004cd0 <Cmd_sample_set+0x130>)
 8004c0c:	f7ff fa2e 	bl	800406c <SPI_SetPrescaler>
	ADG1414_Chain_SwitchOn(&photo_sw, pd_ind);
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	4619      	mov	r1, r3
 8004c14:	482f      	ldr	r0, [pc, #188]	@ (8004cd4 <Cmd_sample_set+0x134>)
 8004c16:	f7fe fe75 	bl	8003904 <ADG1414_Chain_SwitchOn>

	uint32_t AutoReload = ROUND(1000000.0f / sp_rate) - 1;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c24:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8004cd8 <Cmd_sample_set+0x138>
 8004c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c34:	db1a      	blt.n	8004c6c <Cmd_sample_set+0xcc>
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c40:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004cd8 <Cmd_sample_set+0x138>
 8004c44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c48:	ee16 0a90 	vmov	r0, s13
 8004c4c:	f7fb fc84 	bl	8000558 <__aeabi_f2d>
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <Cmd_sample_set+0x13c>)
 8004c56:	f7fb fb21 	bl	800029c <__adddf3>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	f7fb ff6b 	bl	8000b3c <__aeabi_d2iz>
 8004c66:	4603      	mov	r3, r0
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	e019      	b.n	8004ca0 <Cmd_sample_set+0x100>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004cd8 <Cmd_sample_set+0x138>
 8004c7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c7e:	ee16 0a90 	vmov	r0, s13
 8004c82:	f7fb fc69 	bl	8000558 <__aeabi_f2d>
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	4b14      	ldr	r3, [pc, #80]	@ (8004cdc <Cmd_sample_set+0x13c>)
 8004c8c:	f7fb fb04 	bl	8000298 <__aeabi_dsub>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	f7fb ff50 	bl	8000b3c <__aeabi_d2iz>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
	LL_TIM_DisableIT_UPDATE(TIM1);
 8004ca2:	480f      	ldr	r0, [pc, #60]	@ (8004ce0 <Cmd_sample_set+0x140>)
 8004ca4:	f7ff fb0e 	bl	80042c4 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM1);
 8004ca8:	480d      	ldr	r0, [pc, #52]	@ (8004ce0 <Cmd_sample_set+0x140>)
 8004caa:	f7ff facf 	bl	800424c <LL_TIM_DisableCounter>
	LL_TIM_SetAutoReload(TIM1, AutoReload);
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	480b      	ldr	r0, [pc, #44]	@ (8004ce0 <Cmd_sample_set+0x140>)
 8004cb2:	f7ff fae9 	bl	8004288 <LL_TIM_SetAutoReload>

	photo_index = pd_ind;
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ce4 <Cmd_sample_set+0x144>)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	7013      	strb	r3, [r2, #0]
	samp_rate = sp_rate;
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce8 <Cmd_sample_set+0x148>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6013      	str	r3, [r2, #0]
	return CMDLINE_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	00050910 	.word	0x00050910
 8004cd0:	40003800 	.word	0x40003800
 8004cd4:	200189f4 	.word	0x200189f4
 8004cd8:	49742400 	.word	0x49742400
 8004cdc:	3fe00000 	.word	0x3fe00000
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	20018a89 	.word	0x20018a89
 8004ce8:	20018a8c 	.word	0x20018a8c

08004cec <Cmd_sample_trig>:

//format: sp_trig [num_samples]
int Cmd_sample_trig(int argc, char *argv[])
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	dc01      	bgt.n	8004d00 <Cmd_sample_trig+0x14>
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e03b      	b.n	8004d78 <Cmd_sample_trig+0x8c>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	dd01      	ble.n	8004d0a <Cmd_sample_trig+0x1e>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e036      	b.n	8004d78 <Cmd_sample_trig+0x8c>
	uint32_t num_sample = atoi(argv[1]);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f8ae 	bl	8005e72 <atoi>
 8004d16:	4603      	mov	r3, r0
 8004d18:	60fb      	str	r3, [r7, #12]

	if((num_sample < 1) || (num_sample > 50000)) return CMDLINE_INVALID_ARG;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <Cmd_sample_trig+0x3e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <Cmd_sample_trig+0x42>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e024      	b.n	8004d78 <Cmd_sample_trig+0x8c>

	// Prepare to collect data
	memset(adc_rec_buf, 0x00, adc_rec_total * 2);		//Clear pre buffer
 8004d2e:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <Cmd_sample_trig+0x94>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	461a      	mov	r2, r3
 8004d36:	2100      	movs	r1, #0
 8004d38:	4812      	ldr	r0, [pc, #72]	@ (8004d84 <Cmd_sample_trig+0x98>)
 8004d3a:	f002 f836 	bl	8006daa <memset>
	adc_ptr = adc_rec_buf;
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <Cmd_sample_trig+0x9c>)
 8004d40:	4a10      	ldr	r2, [pc, #64]	@ (8004d84 <Cmd_sample_trig+0x98>)
 8004d42:	601a      	str	r2, [r3, #0]
	adc_rec_ind = 0;
 8004d44:	4b11      	ldr	r3, [pc, #68]	@ (8004d8c <Cmd_sample_trig+0xa0>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
	adc_rec_total = num_sample;
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d80 <Cmd_sample_trig+0x94>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6013      	str	r3, [r2, #0]
	SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_16BIT);
 8004d50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d54:	480e      	ldr	r0, [pc, #56]	@ (8004d90 <Cmd_sample_trig+0xa4>)
 8004d56:	f7ff f9b5 	bl	80040c4 <SPI_SetDataLength>
	SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV2);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	480c      	ldr	r0, [pc, #48]	@ (8004d90 <Cmd_sample_trig+0xa4>)
 8004d5e:	f7ff f985 	bl	800406c <SPI_SetPrescaler>
	// Start collect data
	LL_TIM_SetCounter(TIM1, 0);
 8004d62:	2100      	movs	r1, #0
 8004d64:	480b      	ldr	r0, [pc, #44]	@ (8004d94 <Cmd_sample_trig+0xa8>)
 8004d66:	f7ff fa81 	bl	800426c <LL_TIM_SetCounter>
	LL_TIM_EnableIT_UPDATE(TIM1);  // Bật ngắt Update
 8004d6a:	480a      	ldr	r0, [pc, #40]	@ (8004d94 <Cmd_sample_trig+0xa8>)
 8004d6c:	f7ff fa9a 	bl	80042a4 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);    // Bật timer
 8004d70:	4808      	ldr	r0, [pc, #32]	@ (8004d94 <Cmd_sample_trig+0xa8>)
 8004d72:	f7ff fa5b 	bl	800422c <LL_TIM_EnableCounter>

	return CMDLINE_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20018968 	.word	0x20018968
 8004d84:	200002b0 	.word	0x200002b0
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	20018964 	.word	0x20018964
 8004d90:	40003800 	.word	0x40003800
 8004d94:	40010000 	.word	0x40010000

08004d98 <Cmd_sample_status_get>:

//format: sp_status
int Cmd_sample_status_get(int argc, char *argv[])
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dc01      	bgt.n	8004dac <Cmd_sample_status_get+0x14>
 8004da8:	2303      	movs	r3, #3
 8004daa:	e01b      	b.n	8004de4 <Cmd_sample_status_get+0x4c>
	if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	dd01      	ble.n	8004db6 <Cmd_sample_status_get+0x1e>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e016      	b.n	8004de4 <Cmd_sample_status_get+0x4c>

	UARTprintf("\r\nPhoto: %d   Sampling_Rate: %d SPS", photo_index, samp_rate);
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <Cmd_sample_status_get+0x54>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <Cmd_sample_status_get+0x58>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	480c      	ldr	r0, [pc, #48]	@ (8004df4 <Cmd_sample_status_get+0x5c>)
 8004dc4:	f000 ffb6 	bl	8005d34 <UARTprintf>
	if(adc_rec_ind == adc_rec_total)	USART6_send_string("\r\n-> ADC Data ready to get!");
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <Cmd_sample_status_get+0x60>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <Cmd_sample_status_get+0x64>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d103      	bne.n	8004ddc <Cmd_sample_status_get+0x44>
 8004dd4:	480a      	ldr	r0, [pc, #40]	@ (8004e00 <Cmd_sample_status_get+0x68>)
 8004dd6:	f000 fd75 	bl	80058c4 <USART6_send_string>
 8004dda:	e002      	b.n	8004de2 <Cmd_sample_status_get+0x4a>
	else USART6_send_string("\r\n-> ADC Data is not ready!");
 8004ddc:	4809      	ldr	r0, [pc, #36]	@ (8004e04 <Cmd_sample_status_get+0x6c>)
 8004dde:	f000 fd71 	bl	80058c4 <USART6_send_string>
	return CMDLINE_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20018a89 	.word	0x20018a89
 8004df0:	20018a8c 	.word	0x20018a8c
 8004df4:	08008e2c 	.word	0x08008e2c
 8004df8:	20018964 	.word	0x20018964
 8004dfc:	20018968 	.word	0x20018968
 8004e00:	08008e50 	.word	0x08008e50
 8004e04:	08008e6c 	.word	0x08008e6c

08004e08 <Cmd_sample_get>:

//format: sp_get [num_samples]
int Cmd_sample_get(int argc, char *argv[])
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	dc01      	bgt.n	8004e1c <Cmd_sample_get+0x14>
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e070      	b.n	8004efe <Cmd_sample_get+0xf6>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	dd01      	ble.n	8004e26 <Cmd_sample_get+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e06b      	b.n	8004efe <Cmd_sample_get+0xf6>
	if (!adc_rec_ind)
 8004e26:	4b38      	ldr	r3, [pc, #224]	@ (8004f08 <Cmd_sample_get+0x100>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <Cmd_sample_get+0x30>
	{
		USART6_send_string("\r\nPlease send cmd 'sp_trig' first!");
 8004e2e:	4837      	ldr	r0, [pc, #220]	@ (8004f0c <Cmd_sample_get+0x104>)
 8004e30:	f000 fd48 	bl	80058c4 <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 8004e34:	2304      	movs	r3, #4
 8004e36:	e062      	b.n	8004efe <Cmd_sample_get+0xf6>
	}
	uint32_t num_sample = atoi(argv[1]);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 f817 	bl	8005e72 <atoi>
 8004e44:	4603      	mov	r3, r0
 8004e46:	61bb      	str	r3, [r7, #24]
	uint16_t crc_val = 0xffff;
 8004e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e4c:	827b      	strh	r3, [r7, #18]
	uint8_t bytes_temp[3];

	if((num_sample < 1) || (num_sample > 50000)) return CMDLINE_INVALID_ARG;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d004      	beq.n	8004e5e <Cmd_sample_get+0x56>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <Cmd_sample_get+0x5a>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e04d      	b.n	8004efe <Cmd_sample_get+0xf6>

	uint32_t header = (0x000FFFFF & num_sample) | 0xFFF00000;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8004e68:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8004e6c:	617b      	str	r3, [r7, #20]
	bytes_temp[0] = (uint8_t)(header >> 16);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	733b      	strb	r3, [r7, #12]
	bytes_temp[1] = (uint8_t)(header >> 8);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	737b      	strb	r3, [r7, #13]
	bytes_temp[2] = (uint8_t)header;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	73bb      	strb	r3, [r7, #14]
	USART6_send_array((const char*)bytes_temp, 3);
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	2103      	movs	r1, #3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fd2f 	bl	80058ee <USART6_send_array>

	for(uint32_t i = 0; i < num_sample; i++)
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e020      	b.n	8004ed8 <Cmd_sample_get+0xd0>
	{
		crc16_CCITT_update(&crc_val, adc_rec_buf[i]);
 8004e96:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <Cmd_sample_get+0x108>)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004e9e:	f107 0312 	add.w	r3, r7, #18
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fb87 	bl	80045b8 <crc16_CCITT_update>
		bytes_temp[0] = adc_rec_buf[i] >> 8;
 8004eaa:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <Cmd_sample_get+0x108>)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	733b      	strb	r3, [r7, #12]
		bytes_temp[1] = adc_rec_buf[i] & 0xFF;
 8004eba:	4a15      	ldr	r2, [pc, #84]	@ (8004f10 <Cmd_sample_get+0x108>)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	737b      	strb	r3, [r7, #13]
		USART6_send_array((const char*)bytes_temp, 2);
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fd0e 	bl	80058ee <USART6_send_array>
	for(uint32_t i = 0; i < num_sample; i++)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3da      	bcc.n	8004e96 <Cmd_sample_get+0x8e>
	}
	bytes_temp[0] = crc_val >> 8;
 8004ee0:	8a7b      	ldrh	r3, [r7, #18]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	733b      	strb	r3, [r7, #12]
	bytes_temp[1] = crc_val & 0xFF;
 8004eea:	8a7b      	ldrh	r3, [r7, #18]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	737b      	strb	r3, [r7, #13]
	USART6_send_array((const char*)&bytes_temp, 2);
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fcf9 	bl	80058ee <USART6_send_array>
	return CMDLINE_NOT_RETURN;
 8004efc:	2305      	movs	r3, #5
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20018964 	.word	0x20018964
 8004f0c:	08008e88 	.word	0x08008e88
 8004f10:	200002b0 	.word	0x200002b0

08004f14 <Cmd_sample_get_char>:

//format: sp_get_c [num_samples]
int Cmd_sample_get_char(int argc, char *argv[])
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	dc01      	bgt.n	8004f28 <Cmd_sample_get_char+0x14>
 8004f24:	2303      	movs	r3, #3
 8004f26:	e057      	b.n	8004fd8 <Cmd_sample_get_char+0xc4>
	if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	dd01      	ble.n	8004f32 <Cmd_sample_get_char+0x1e>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e052      	b.n	8004fd8 <Cmd_sample_get_char+0xc4>
	if (!adc_rec_ind)
 8004f32:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <Cmd_sample_get_char+0xcc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <Cmd_sample_get_char+0x30>
	{
		USART6_send_string("Please send cmd 'sp_trig' first!");
 8004f3a:	482a      	ldr	r0, [pc, #168]	@ (8004fe4 <Cmd_sample_get_char+0xd0>)
 8004f3c:	f000 fcc2 	bl	80058c4 <USART6_send_string>
		return CMDLINE_INVALID_ARG;
 8004f40:	2304      	movs	r3, #4
 8004f42:	e049      	b.n	8004fd8 <Cmd_sample_get_char+0xc4>
	}
	uint32_t num_sample = atoi(argv[1]);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	3304      	adds	r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 ff91 	bl	8005e72 <atoi>
 8004f50:	4603      	mov	r3, r0
 8004f52:	613b      	str	r3, [r7, #16]
	uint16_t crc_val = 0xffff;
 8004f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f58:	81fb      	strh	r3, [r7, #14]

	if((num_sample < 1) || (num_sample > 50000)) return CMDLINE_INVALID_ARG;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <Cmd_sample_get_char+0x56>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <Cmd_sample_get_char+0x5a>
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	e034      	b.n	8004fd8 <Cmd_sample_get_char+0xc4>

	char ascii_buf[5];
	USART6_send_string("\r\n");
 8004f6e:	481e      	ldr	r0, [pc, #120]	@ (8004fe8 <Cmd_sample_get_char+0xd4>)
 8004f70:	f000 fca8 	bl	80058c4 <USART6_send_string>
	for(uint32_t i = 0; i < num_sample; i++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e01c      	b.n	8004fb4 <Cmd_sample_get_char+0xa0>
	{
		crc16_CCITT_update(&crc_val, adc_rec_buf[i]);
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <Cmd_sample_get_char+0xd8>)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004f82:	f107 030e 	add.w	r3, r7, #14
 8004f86:	4611      	mov	r1, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fb15 	bl	80045b8 <crc16_CCITT_update>
		htoa(adc_rec_buf[i], ascii_buf);
 8004f8e:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <Cmd_sample_get_char+0xd8>)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f96:	f107 0208 	add.w	r2, r7, #8
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fb59 	bl	8004654 <htoa>
		USART6_send_array(ascii_buf, 5);
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	2105      	movs	r1, #5
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fca0 	bl	80058ee <USART6_send_array>
	for(uint32_t i = 0; i < num_sample; i++)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3de      	bcc.n	8004f7a <Cmd_sample_get_char+0x66>
	}

	htoa(crc_val, ascii_buf);
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	f107 0208 	add.w	r2, r7, #8
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fb45 	bl	8004654 <htoa>
	USART6_send_array(ascii_buf, 5);
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	2105      	movs	r1, #5
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fc8c 	bl	80058ee <USART6_send_array>
	return CMDLINE_NOT_RETURN;
 8004fd6:	2305      	movs	r3, #5
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20018964 	.word	0x20018964
 8004fe4:	08008eac 	.word	0x08008eac
 8004fe8:	08008de4 	.word	0x08008de4
 8004fec:	200002b0 	.word	0x200002b0

08004ff0 <LL_SPI_Enable>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <LL_SPI_IsEnabled>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b40      	cmp	r3, #64	@ 0x40
 8005022:	d101      	bne.n	8005028 <LL_SPI_IsEnabled+0x18>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <LL_SPI_IsEnabled+0x1a>
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <LL_SPI_IsActiveFlag_TXE>:
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d101      	bne.n	800504e <LL_SPI_IsActiveFlag_TXE+0x18>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <LL_SPI_IsActiveFlag_BSY>:
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506c:	2b80      	cmp	r3, #128	@ 0x80
 800506e:	d101      	bne.n	8005074 <LL_SPI_IsActiveFlag_BSY+0x18>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_SPI_TransmitData8>:
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	330c      	adds	r3, #12
 8005092:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	701a      	strb	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	330c      	adds	r3, #12
 80050b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_GPIO_SetOutputPin>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	619a      	str	r2, [r3, #24]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_GPIO_ResetOutputPin>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	041a      	lsls	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <MCP4902_Write>:
	return (dac*_VREF_DAC)/2.55f;
}

/* Hàm gửi dữ liệu qua SPI */
static void MCP4902_Write(MCP4902_Device_t *dev)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800510c:	bf00      	nop
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff ff8f 	bl	8005036 <LL_SPI_IsActiveFlag_TXE>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f7      	beq.n	800510e <MCP4902_Write+0xa>


    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e076      	b.n	8005212 <MCP4902_Write+0x10e>
    {
    	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7ff ffd9 	bl	80050e6 <LL_GPIO_ResetOutputPin>
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <MCP4902_Write+0x50>
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	3314      	adds	r3, #20
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	b21b      	sxth	r3, r3
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	b21a      	sxth	r2, r3
 800514a:	4b36      	ldr	r3, [pc, #216]	@ (8005224 <MCP4902_Write+0x120>)
 800514c:	4313      	orrs	r3, r2
 800514e:	b21b      	sxth	r3, r3
 8005150:	b29b      	uxth	r3, r3
 8005152:	e00b      	b.n	800516c <MCP4902_Write+0x68>
				   ((1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4));
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	3314      	adds	r3, #20
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b21b      	sxth	r3, r3
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	b21b      	sxth	r3, r3
 8005164:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8005168:	b21b      	sxth	r3, r3
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800516a:	b29b      	uxth	r3, r3
 800516c:	817b      	strh	r3, [r7, #10]

        LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	897b      	ldrh	r3, [r7, #10]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	b29b      	uxth	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7ff ff80 	bl	8005082 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8005182:	bf00      	nop
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff54 	bl	8005036 <LL_SPI_IsActiveFlag_TXE>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f7      	beq.n	8005184 <MCP4902_Write+0x80>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8005194:	bf00      	nop
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff5e 	bl	800505c <LL_SPI_IsActiveFlag_BSY>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f7      	bne.n	8005196 <MCP4902_Write+0x92>

        LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	897a      	ldrh	r2, [r7, #10]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff ff66 	bl	8005082 <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 80051b6:	bf00      	nop
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ff3a 	bl	8005036 <LL_SPI_IsActiveFlag_TXE>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f7      	beq.n	80051b8 <MCP4902_Write+0xb4>
		while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 80051c8:	bf00      	nop
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ff44 	bl	800505c <LL_SPI_IsActiveFlag_BSY>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f7      	bne.n	80051ca <MCP4902_Write+0xc6>

        LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f7ff ff70 	bl	80050ca <LL_GPIO_SetOutputPin>

		LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7ff ff76 	bl	80050e6 <LL_GPIO_ResetOutputPin>
		__NOP();
 80051fa:	bf00      	nop
		LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f7ff ff5f 	bl	80050ca <LL_GPIO_SetOutputPin>
    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b01      	cmp	r3, #1
 8005216:	dd85      	ble.n	8005124 <MCP4902_Write+0x20>
    }


}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	ffffb000 	.word	0xffffb000

08005228 <MCP4902_Shutdown>:

void MCP4902_Shutdown(MCP4902_Device_t *dev, uint8_t channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8005234:	bf00      	nop
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fefb 	bl	8005036 <LL_SPI_IsActiveFlag_TXE>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f7      	beq.n	8005236 <MCP4902_Shutdown+0xe>
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7ff ff48 	bl	80050e6 <LL_GPIO_ResetOutputPin>

	temp = channel ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)) : (1<<MCP4902_GA_BIT);
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <MCP4902_Shutdown+0x3a>
 800525c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8005260:	e001      	b.n	8005266 <MCP4902_Shutdown+0x3e>
 8005262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005266:	81fb      	strh	r3, [r7, #14]
	LL_SPI_TransmitData16(dev->spi, temp);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	89fa      	ldrh	r2, [r7, #14]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff18 	bl	80050a6 <LL_SPI_TransmitData16>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8005276:	bf00      	nop
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff feda 	bl	8005036 <LL_SPI_IsActiveFlag_TXE>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f7      	beq.n	8005278 <MCP4902_Shutdown+0x50>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8005288:	bf00      	nop
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fee4 	bl	800505c <LL_SPI_IsActiveFlag_BSY>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f7      	bne.n	800528a <MCP4902_Shutdown+0x62>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7ff ff10 	bl	80050ca <LL_GPIO_SetOutputPin>

    LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7ff ff16 	bl	80050e6 <LL_GPIO_ResetOutputPin>
	__NOP();
 80052ba:	bf00      	nop
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f7ff feff 	bl	80050ca <LL_GPIO_SetOutputPin>
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <MCP4902_Set_DAC>:

void MCP4902_Set_DAC(MCP4902_Device_t *dev, uint8_t channel, uint8_t DAC_val)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
 80052e0:	4613      	mov	r3, r2
 80052e2:	70bb      	strb	r3, [r7, #2]
	dev->dac_channel[channel] = DAC_val;
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	78ba      	ldrb	r2, [r7, #2]
 80052ec:	751a      	strb	r2, [r3, #20]
	MCP4902_Write(dev);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff08 	bl	8005104 <MCP4902_Write>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <MCP4902_Device_Init>:
							SPI_TypeDef *spi,
							GPIO_TypeDef *cs_port,
							uint32_t cs_pin,
							GPIO_TypeDef *latch_port,
							uint32_t latch_pin)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08c      	sub	sp, #48	@ 0x30
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	609a      	str	r2, [r3, #8]
	dev->latch_port = latch_port;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005320:	60da      	str	r2, [r3, #12]
	dev->latch_pin = latch_pin;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005326:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
 8005338:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = dev->cs_pin;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005340:	2301      	movs	r3, #1
 8005342:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005344:	2302      	movs	r3, #2
 8005346:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800534c:	2300      	movs	r3, #0
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
	LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f107 0214 	add.w	r2, r7, #20
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd fa5d 	bl	800281a <LL_GPIO_Init>

	GPIO_InitStruct.Pin = dev->latch_pin;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(dev->latch_port, &GPIO_InitStruct);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f107 0214 	add.w	r2, r7, #20
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd fa52 	bl	800281a <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f7ff fea2 	bl	80050ca <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f7ff fe9a 	bl	80050ca <LL_GPIO_SetOutputPin>

	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539a:	e008      	b.n	80053ae <MCP4902_Device_Init+0xb2>
	{
		dev->dac_channel[i] = 0;
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a0:	4413      	add	r3, r2
 80053a2:	3314      	adds	r3, #20
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	3301      	adds	r3, #1
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	ddf3      	ble.n	800539c <MCP4902_Device_Init+0xa0>
	}

	while (!LL_SPI_IsEnabled(dev->spi))
 80053b4:	e005      	b.n	80053c2 <MCP4902_Device_Init+0xc6>
	{
		LL_SPI_Enable(dev->spi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fe18 	bl	8004ff0 <LL_SPI_Enable>
		__NOP();
 80053c0:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fe22 	bl	8005010 <LL_SPI_IsEnabled>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f1      	beq.n	80053b6 <MCP4902_Device_Init+0xba>
	}

	MCP4902_Write(dev);
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fe96 	bl	8005104 <MCP4902_Write>
}
 80053d8:	bf00      	nop
 80053da:	3730      	adds	r7, #48	@ 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <rbuffer_init>:
 */

// RINGBUFFER FUNCTIONS
#include "RingBuffer.h"

void rbuffer_init(volatile ringbuffer_t *rb) {
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053e8:	b672      	cpsid	i
}
 80053ea:	bf00      	nop
	__disable_irq();
	rb->in = 0;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->out = 0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count = 0;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 8005404:	b662      	cpsie	i
}
 8005406:	bf00      	nop
	__enable_irq();
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <rbuffer_full>:

uint8_t rbuffer_count(volatile ringbuffer_t *rb) {
	return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t *rb) {
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	return (rb->count == (uint16_t) RingBufferSize);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005422:	b29b      	uxth	r3, r3
 8005424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <rbuffer_empty>:

bool rbuffer_empty(volatile ringbuffer_t *rb) {
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	return (rb->count == 0);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <rbuffer_insert>:

void rbuffer_insert(char data, volatile ringbuffer_t *rb) {
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	6039      	str	r1, [r7, #0]
 800546c:	71fb      	strb	r3, [r7, #7]
	*(rb->buffer + rb->in) = data;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 8005476:	b292      	uxth	r2, r2
 8005478:	4413      	add	r3, r2
 800547a:	79fa      	ldrb	r2, [r7, #7]
 800547c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800547e:	b672      	cpsid	i
}
 8005480:	bf00      	nop
	__disable_irq();
	rb->in = (rb->in + 1) & ((uint16_t) RingBufferSize - 1);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005488:	b29b      	uxth	r3, r3
 800548a:	3301      	adds	r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	b29a      	uxth	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->count++;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3301      	adds	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 80054aa:	b662      	cpsie	i
}
 80054ac:	bf00      	nop
	__enable_irq();
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <rbuffer_remove>:

char rbuffer_remove(volatile ringbuffer_t *rb) {
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
	char data = *(rb->buffer + rb->out);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 80054ca:	b292      	uxth	r2, r2
 80054cc:	4413      	add	r3, r2
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80054d2:	b672      	cpsid	i
}
 80054d4:	bf00      	nop
	__disable_irq();
	rb->out = (rb->out + 1) & ((uint16_t) RingBufferSize - 1);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	rb->count--;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  __ASM volatile ("cpsie i" : : : "memory");
 80054fe:	b662      	cpsie	i
}
 8005500:	bf00      	nop
	__enable_irq();
	return data;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b20      	cmp	r3, #32
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2db      	uxtb	r3, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b80      	cmp	r3, #128	@ 0x80
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80055dc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005600:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005608:	68fb      	ldr	r3, [r7, #12]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005624:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800563a:	b480      	push	{r7}
 800563c:	b089      	sub	sp, #36	@ 0x24
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	330c      	adds	r3, #12
 8005646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f043 0320 	orr.w	r3, r3, #32
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	330c      	adds	r3, #12
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	61ba      	str	r2, [r7, #24]
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6979      	ldr	r1, [r7, #20]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	613b      	str	r3, [r7, #16]
   return(result);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e7      	bne.n	8005642 <LL_USART_EnableIT_RXNE+0x8>
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	3724      	adds	r7, #36	@ 0x24
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	@ 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	330c      	adds	r3, #12
 800568c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	60bb      	str	r3, [r7, #8]
   return(result);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	330c      	adds	r3, #12
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	61ba      	str	r2, [r7, #24]
 80056a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e7      	bne.n	8005688 <LL_USART_EnableIT_TXE+0x8>
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	3724      	adds	r7, #36	@ 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b089      	sub	sp, #36	@ 0x24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	330c      	adds	r3, #12
 80056d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60bb      	str	r3, [r7, #8]
   return(result);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	330c      	adds	r3, #12
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	61ba      	str	r2, [r7, #24]
 80056ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6979      	ldr	r1, [r7, #20]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	613b      	str	r3, [r7, #16]
   return(result);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e7      	bne.n	80056ce <LL_USART_DisableIT_TXE+0x8>
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	3724      	adds	r7, #36	@ 0x24
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b20      	cmp	r3, #32
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b2db      	uxtb	r3, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <USART6_IRQ>:
usart_meta_t *p_USART6_meta = &USART6_meta;

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// USART FUNCTIONS

void USART6_IRQ(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
    uint8_t data;
    if (LL_USART_IsActiveFlag_TXE(USART6)) {
 8005772:	4834      	ldr	r0, [pc, #208]	@ (8005844 <USART6_IRQ+0xd8>)
 8005774:	f7ff ff18 	bl	80055a8 <LL_USART_IsActiveFlag_TXE>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01e      	beq.n	80057bc <USART6_IRQ+0x50>
        if (!rbuffer_empty(&p_USART6_meta->rb_tx)) {
 800577e:	4b32      	ldr	r3, [pc, #200]	@ (8005848 <USART6_IRQ+0xdc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fe58 	bl	800543c <rbuffer_empty>
 800578c:	4603      	mov	r3, r0
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <USART6_IRQ+0x4a>
            data = rbuffer_remove(&p_USART6_meta->rb_tx);
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <USART6_IRQ+0xdc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fe8a 	bl	80054ba <rbuffer_remove>
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
            LL_USART_TransmitData8(USART6, (uint8_t)data);
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4825      	ldr	r0, [pc, #148]	@ (8005844 <USART6_IRQ+0xd8>)
 80057b0:	f7ff ffcc 	bl	800574c <LL_USART_TransmitData8>
 80057b4:	e002      	b.n	80057bc <USART6_IRQ+0x50>
        } else {
            LL_USART_DisableIT_TXE(USART6);
 80057b6:	4823      	ldr	r0, [pc, #140]	@ (8005844 <USART6_IRQ+0xd8>)
 80057b8:	f7ff ff85 	bl	80056c6 <LL_USART_DisableIT_TXE>
        }
    }
    if ((LL_USART_IsActiveFlag_RXNE(USART6) != RESET) && (LL_USART_IsEnabledIT_RXNE(USART6) != RESET)) {
 80057bc:	4821      	ldr	r0, [pc, #132]	@ (8005844 <USART6_IRQ+0xd8>)
 80057be:	f7ff fee0 	bl	8005582 <LL_USART_IsActiveFlag_RXNE>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d03a      	beq.n	800583e <USART6_IRQ+0xd2>
 80057c8:	481e      	ldr	r0, [pc, #120]	@ (8005844 <USART6_IRQ+0xd8>)
 80057ca:	f7ff ff9f 	bl	800570c <LL_USART_IsEnabledIT_RXNE>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d034      	beq.n	800583e <USART6_IRQ+0xd2>
        unsigned char data = LL_USART_ReceiveData8(USART6);
 80057d4:	481b      	ldr	r0, [pc, #108]	@ (8005844 <USART6_IRQ+0xd8>)
 80057d6:	f7ff ffac 	bl	8005732 <LL_USART_ReceiveData8>
 80057da:	4603      	mov	r3, r0
 80057dc:	71bb      	strb	r3, [r7, #6]

        if ((LL_USART_IsActiveFlag_ORE(USART6) != RESET) ||
 80057de:	4819      	ldr	r0, [pc, #100]	@ (8005844 <USART6_IRQ+0xd8>)
 80057e0:	f7ff febc 	bl	800555c <LL_USART_IsActiveFlag_ORE>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <USART6_IRQ+0x96>
            (LL_USART_IsActiveFlag_FE(USART6) != RESET) ||
 80057ea:	4816      	ldr	r0, [pc, #88]	@ (8005844 <USART6_IRQ+0xd8>)
 80057ec:	f7ff fe90 	bl	8005510 <LL_USART_IsActiveFlag_FE>
 80057f0:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(USART6) != RESET) ||
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d105      	bne.n	8005802 <USART6_IRQ+0x96>
            (LL_USART_IsActiveFlag_NE(USART6) != RESET)) {
 80057f6:	4813      	ldr	r0, [pc, #76]	@ (8005844 <USART6_IRQ+0xd8>)
 80057f8:	f7ff fe9d 	bl	8005536 <LL_USART_IsActiveFlag_NE>
 80057fc:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(USART6) != RESET) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <USART6_IRQ+0xaa>
            LL_USART_ClearFlag_ORE(USART6);
 8005802:	4810      	ldr	r0, [pc, #64]	@ (8005844 <USART6_IRQ+0xd8>)
 8005804:	f7ff ff07 	bl	8005616 <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(USART6);
 8005808:	480e      	ldr	r0, [pc, #56]	@ (8005844 <USART6_IRQ+0xd8>)
 800580a:	f7ff fee0 	bl	80055ce <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(USART6);
 800580e:	480d      	ldr	r0, [pc, #52]	@ (8005844 <USART6_IRQ+0xd8>)
 8005810:	f7ff feef 	bl	80055f2 <LL_USART_ClearFlag_NE>
        } else {
            if (!rbuffer_full(&p_USART6_meta->rb_rx)) {
                rbuffer_insert(data, &p_USART6_meta->rb_rx);
            }
        }
        return;
 8005814:	e012      	b.n	800583c <USART6_IRQ+0xd0>
            if (!rbuffer_full(&p_USART6_meta->rb_rx)) {
 8005816:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <USART6_IRQ+0xdc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fdfa 	bl	8005414 <rbuffer_full>
 8005820:	4603      	mov	r3, r0
 8005822:	f083 0301 	eor.w	r3, r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <USART6_IRQ+0xd0>
                rbuffer_insert(data, &p_USART6_meta->rb_rx);
 800582c:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <USART6_IRQ+0xdc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	79bb      	ldrb	r3, [r7, #6]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fe13 	bl	8005462 <rbuffer_insert>
        return;
 800583c:	bf00      	nop
    }
}
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40011400 	.word	0x40011400
 8005848:	200000c4 	.word	0x200000c4

0800584c <USART6_init>:

void USART6_init(void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
    rbuffer_init(&p_USART6_meta->rb_tx); // Init Tx buffer
 8005850:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <USART6_init+0x28>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fdc1 	bl	80053e0 <rbuffer_init>
    rbuffer_init(&p_USART6_meta->rb_rx); // Init Rx buffer
 800585e:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <USART6_init+0x28>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fdbc 	bl	80053e0 <rbuffer_init>
    LL_USART_EnableIT_RXNE(USART6);
 8005868:	4803      	ldr	r0, [pc, #12]	@ (8005878 <USART6_init+0x2c>)
 800586a:	f7ff fee6 	bl	800563a <LL_USART_EnableIT_RXNE>
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200000c4 	.word	0x200000c4
 8005878:	40011400 	.word	0x40011400

0800587c <USART6_send_char>:

void USART6_send_char(char c) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
    while (rbuffer_full(&p_USART6_meta->rb_tx))
 8005886:	bf00      	nop
 8005888:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <USART6_send_char+0x40>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fdbf 	bl	8005414 <rbuffer_full>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f5      	bne.n	8005888 <USART6_send_char+0xc>
        ;
    rbuffer_insert(c, &p_USART6_meta->rb_tx);
 800589c:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <USART6_send_char+0x40>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f503 7283 	add.w	r2, r3, #262	@ 0x106
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fdda 	bl	8005462 <rbuffer_insert>
    LL_USART_EnableIT_TXE(USART6);
 80058ae:	4804      	ldr	r0, [pc, #16]	@ (80058c0 <USART6_send_char+0x44>)
 80058b0:	f7ff fee6 	bl	8005680 <LL_USART_EnableIT_TXE>
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200000c4 	.word	0x200000c4
 80058c0:	40011400 	.word	0x40011400

080058c4 <USART6_send_string>:

void USART6_send_string(const char *str) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
    while (*str) {
 80058cc:	e006      	b.n	80058dc <USART6_send_string+0x18>
        USART6_send_char(*str++);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff ffd0 	bl	800587c <USART6_send_char>
    while (*str) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f4      	bne.n	80058ce <USART6_send_string+0xa>
    }
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <USART6_send_array>:

void USART6_send_array(const char *str, uint8_t len) {
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
    uint8_t udx;
    for (udx = 0; udx < len; udx++) {
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
 80058fe:	e009      	b.n	8005914 <USART6_send_array+0x26>
        USART6_send_char(*str++);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ffb7 	bl	800587c <USART6_send_char>
    for (udx = 0; udx < len; udx++) {
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	3301      	adds	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	429a      	cmp	r2, r3
 800591a:	d3f1      	bcc.n	8005900 <USART6_send_array+0x12>
    }
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <uart_get_USART6_rx_buffer_address>:
    LL_USART_Init(USART6, &USART_InitStruct);
    LL_USART_ConfigAsyncMode(USART6);
    LL_USART_Enable(USART6);
}

volatile ringbuffer_t* uart_get_USART6_rx_buffer_address(void) {
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
    return &p_USART6_meta->rb_rx; // Trả về địa chỉ buffer Rx
 800592c:	4b03      	ldr	r3, [pc, #12]	@ (800593c <uart_get_USART6_rx_buffer_address+0x14>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	200000c4 	.word	0x200000c4

08005940 <UARTvprintf>:

static void UARTvprintf(const char *pcString, va_list vaArgP)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	@ 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 800594a:	e1e2      	b.n	8005d12 <UARTvprintf+0x3d2>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005950:	e002      	b.n	8005958 <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 8005952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005954:	3301      	adds	r3, #1
 8005956:	62fb      	str	r3, [r7, #44]	@ 0x2c
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 8005958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b25      	cmp	r3, #37	@ 0x25
 8005962:	d005      	beq.n	8005970 <UARTvprintf+0x30>
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        CONSOLE_UART_WRITE(pcString, ui32Idx);
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	b2db      	uxtb	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ffb9 	bl	80058ee <USART6_send_array>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b25      	cmp	r3, #37	@ 0x25
 800598a:	f040 81c2 	bne.w	8005d12 <UARTvprintf+0x3d2>
        {
            //
            // Skip the %.
            //
            pcString++;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3301      	adds	r3, #1
 8005992:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	623b      	str	r3, [r7, #32]
            cFill = ' ';
 8005998:	2320      	movs	r3, #32
 800599a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	3b25      	subs	r3, #37	@ 0x25
 80059a8:	2b53      	cmp	r3, #83	@ 0x53
 80059aa:	f200 81ac 	bhi.w	8005d06 <UARTvprintf+0x3c6>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <UARTvprintf+0x74>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	08005cf9 	.word	0x08005cf9
 80059b8:	08005d07 	.word	0x08005d07
 80059bc:	08005d07 	.word	0x08005d07
 80059c0:	08005d07 	.word	0x08005d07
 80059c4:	08005d07 	.word	0x08005d07
 80059c8:	08005d07 	.word	0x08005d07
 80059cc:	08005d07 	.word	0x08005d07
 80059d0:	08005d07 	.word	0x08005d07
 80059d4:	08005d07 	.word	0x08005d07
 80059d8:	08005d07 	.word	0x08005d07
 80059dc:	08005d07 	.word	0x08005d07
 80059e0:	08005b05 	.word	0x08005b05
 80059e4:	08005b05 	.word	0x08005b05
 80059e8:	08005b05 	.word	0x08005b05
 80059ec:	08005b05 	.word	0x08005b05
 80059f0:	08005b05 	.word	0x08005b05
 80059f4:	08005b05 	.word	0x08005b05
 80059f8:	08005b05 	.word	0x08005b05
 80059fc:	08005b05 	.word	0x08005b05
 8005a00:	08005b05 	.word	0x08005b05
 8005a04:	08005b05 	.word	0x08005b05
 8005a08:	08005d07 	.word	0x08005d07
 8005a0c:	08005d07 	.word	0x08005d07
 8005a10:	08005d07 	.word	0x08005d07
 8005a14:	08005d07 	.word	0x08005d07
 8005a18:	08005d07 	.word	0x08005d07
 8005a1c:	08005d07 	.word	0x08005d07
 8005a20:	08005d07 	.word	0x08005d07
 8005a24:	08005d07 	.word	0x08005d07
 8005a28:	08005d07 	.word	0x08005d07
 8005a2c:	08005d07 	.word	0x08005d07
 8005a30:	08005d07 	.word	0x08005d07
 8005a34:	08005d07 	.word	0x08005d07
 8005a38:	08005d07 	.word	0x08005d07
 8005a3c:	08005d07 	.word	0x08005d07
 8005a40:	08005d07 	.word	0x08005d07
 8005a44:	08005d07 	.word	0x08005d07
 8005a48:	08005d07 	.word	0x08005d07
 8005a4c:	08005d07 	.word	0x08005d07
 8005a50:	08005d07 	.word	0x08005d07
 8005a54:	08005d07 	.word	0x08005d07
 8005a58:	08005d07 	.word	0x08005d07
 8005a5c:	08005d07 	.word	0x08005d07
 8005a60:	08005d07 	.word	0x08005d07
 8005a64:	08005d07 	.word	0x08005d07
 8005a68:	08005d07 	.word	0x08005d07
 8005a6c:	08005d07 	.word	0x08005d07
 8005a70:	08005d07 	.word	0x08005d07
 8005a74:	08005d07 	.word	0x08005d07
 8005a78:	08005d07 	.word	0x08005d07
 8005a7c:	08005d07 	.word	0x08005d07
 8005a80:	08005be9 	.word	0x08005be9
 8005a84:	08005d07 	.word	0x08005d07
 8005a88:	08005d07 	.word	0x08005d07
 8005a8c:	08005d07 	.word	0x08005d07
 8005a90:	08005d07 	.word	0x08005d07
 8005a94:	08005d07 	.word	0x08005d07
 8005a98:	08005d07 	.word	0x08005d07
 8005a9c:	08005d07 	.word	0x08005d07
 8005aa0:	08005d07 	.word	0x08005d07
 8005aa4:	08005d07 	.word	0x08005d07
 8005aa8:	08005d07 	.word	0x08005d07
 8005aac:	08005b39 	.word	0x08005b39
 8005ab0:	08005b51 	.word	0x08005b51
 8005ab4:	08005d07 	.word	0x08005d07
 8005ab8:	08005d07 	.word	0x08005d07
 8005abc:	08005d07 	.word	0x08005d07
 8005ac0:	08005d07 	.word	0x08005d07
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005d07 	.word	0x08005d07
 8005acc:	08005d07 	.word	0x08005d07
 8005ad0:	08005d07 	.word	0x08005d07
 8005ad4:	08005d07 	.word	0x08005d07
 8005ad8:	08005d07 	.word	0x08005d07
 8005adc:	08005d07 	.word	0x08005d07
 8005ae0:	08005be9 	.word	0x08005be9
 8005ae4:	08005d07 	.word	0x08005d07
 8005ae8:	08005d07 	.word	0x08005d07
 8005aec:	08005b7b 	.word	0x08005b7b
 8005af0:	08005d07 	.word	0x08005d07
 8005af4:	08005bd1 	.word	0x08005bd1
 8005af8:	08005d07 	.word	0x08005d07
 8005afc:	08005d07 	.word	0x08005d07
 8005b00:	08005be9 	.word	0x08005be9
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d105      	bne.n	8005b1a <UARTvprintf+0x1da>
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <UARTvprintf+0x1da>
                    {
                        cFill = '0';
 8005b14:	2330      	movs	r3, #48	@ 0x30
 8005b16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 8005b1a:	6a3a      	ldr	r2, [r7, #32]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	623b      	str	r3, [r7, #32]
                    ui32Count += pcString[-1] - '0';
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	4413      	add	r3, r2
 8005b32:	3b30      	subs	r3, #48	@ 0x30
 8005b34:	623b      	str	r3, [r7, #32]

                    //
                    // Get the next character.
                    //
                    goto again;
 8005b36:	e732      	b.n	800599e <UARTvprintf+0x5e>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	603a      	str	r2, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Print out the character.
                    //
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);
 8005b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b46:	2101      	movs	r1, #1
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fed0 	bl	80058ee <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8005b4e:	e0e0      	b.n	8005d12 <UARTvprintf+0x3d2>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	603a      	str	r2, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da05      	bge.n	8005b70 <UARTvprintf+0x230>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	425b      	negs	r3, r3
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	e001      	b.n	8005b74 <UARTvprintf+0x234>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8005b74:	230a      	movs	r3, #10
 8005b76:	61fb      	str	r3, [r7, #28]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8005b78:	e041      	b.n	8005bfe <UARTvprintf+0x2be>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	1d1a      	adds	r2, r3, #4
 8005b7e:	603a      	str	r2, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b88:	e002      	b.n	8005b90 <UARTvprintf+0x250>
 8005b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b94:	4413      	add	r3, r2
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f6      	bne.n	8005b8a <UARTvprintf+0x24a>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcStr, ui32Idx);
 8005b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ba4:	f7ff fea3 	bl	80058ee <USART6_send_array>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	f240 80af 	bls.w	8005d10 <UARTvprintf+0x3d0>
                    {
                        ui32Count -= ui32Idx;
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	623b      	str	r3, [r7, #32]
                        while(ui32Count--)
 8005bba:	e003      	b.n	8005bc4 <UARTvprintf+0x284>
                        {
                            CONSOLE_UART_WRITE(" ", 1);
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	485a      	ldr	r0, [pc, #360]	@ (8005d28 <UARTvprintf+0x3e8>)
 8005bc0:	f7ff fe95 	bl	80058ee <USART6_send_array>
                        while(ui32Count--)
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	623a      	str	r2, [r7, #32]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f6      	bne.n	8005bbc <UARTvprintf+0x27c>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8005bce:	e09f      	b.n	8005d10 <UARTvprintf+0x3d0>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	603a      	str	r2, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8005bde:	230a      	movs	r3, #10
 8005be0:	61fb      	str	r3, [r7, #28]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8005be6:	e00a      	b.n	8005bfe <UARTvprintf+0x2be>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	603a      	str	r2, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	61fb      	str	r3, [r7, #28]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c02:	e007      	b.n	8005c14 <UARTvprintf+0x2d4>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	623b      	str	r3, [r7, #32]
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	fb03 f202 	mul.w	r2, r3, r2
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d809      	bhi.n	8005c36 <UARTvprintf+0x2f6>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	fb03 f202 	mul.w	r2, r3, r2
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d0e6      	beq.n	8005c04 <UARTvprintf+0x2c4>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <UARTvprintf+0x302>
                    {
                        ui32Count--;
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	623b      	str	r3, [r7, #32]

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <UARTvprintf+0x324>
 8005c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c4c:	2b30      	cmp	r3, #48	@ 0x30
 8005c4e:	d109      	bne.n	8005c64 <UARTvprintf+0x324>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c56:	3338      	adds	r3, #56	@ 0x38
 8005c58:	443b      	add	r3, r7
 8005c5a:	222d      	movs	r2, #45	@ 0x2d
 8005c5c:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d915      	bls.n	8005c96 <UARTvprintf+0x356>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	2b0f      	cmp	r3, #15
 8005c6e:	d812      	bhi.n	8005c96 <UARTvprintf+0x356>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	e00b      	b.n	8005c90 <UARTvprintf+0x350>
                        {
                            pcBuf[ui32Pos++] = cFill;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c7e:	3338      	adds	r3, #56	@ 0x38
 8005c80:	443b      	add	r3, r7
 8005c82:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005c86:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f0      	bne.n	8005c78 <UARTvprintf+0x338>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <UARTvprintf+0x3a0>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ca2:	3338      	adds	r3, #56	@ 0x38
 8005ca4:	443b      	add	r3, r7
 8005ca6:	222d      	movs	r2, #45	@ 0x2d
 8005ca8:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8005cac:	e018      	b.n	8005ce0 <UARTvprintf+0x3a0>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8005cae:	481f      	ldr	r0, [pc, #124]	@ (8005d2c <UARTvprintf+0x3ec>)
 8005cb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cbe:	fb01 f202 	mul.w	r2, r1, r2
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	6279      	str	r1, [r7, #36]	@ 0x24
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8005ccc:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 8005cce:	3338      	adds	r3, #56	@ 0x38
 8005cd0:	443b      	add	r3, r7
 8005cd2:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <UARTvprintf+0x36e>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcBuf, ui32Pos);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	f107 0308 	add.w	r3, r7, #8
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fdfc 	bl	80058ee <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8005cf6:	e00c      	b.n	8005d12 <UARTvprintf+0x3d2>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    CONSOLE_UART_WRITE(pcString - 1, 1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fdf5 	bl	80058ee <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8005d04:	e005      	b.n	8005d12 <UARTvprintf+0x3d2>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    CONSOLE_UART_WRITE("ERROR", 5);
 8005d06:	2105      	movs	r1, #5
 8005d08:	4809      	ldr	r0, [pc, #36]	@ (8005d30 <UARTvprintf+0x3f0>)
 8005d0a:	f7ff fdf0 	bl	80058ee <USART6_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
 8005d0e:	e000      	b.n	8005d12 <UARTvprintf+0x3d2>
                    break;
 8005d10:	bf00      	nop
    while(*pcString)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f47f ae18 	bne.w	800594c <UARTvprintf+0xc>
                }
            }
        }
    }
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	3738      	adds	r7, #56	@ 0x38
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	08008ee4 	.word	0x08008ee4
 8005d2c:	08008ed0 	.word	0x08008ed0
 8005d30:	08008ee8 	.word	0x08008ee8

08005d34 <UARTprintf>:

//*****************************************************************************

void UARTprintf(const char *pcString, ...)
{
 8005d34:	b40f      	push	{r0, r1, r2, r3}
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
    va_list vaArgP;
    va_start(vaArgP, pcString);
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	607b      	str	r3, [r7, #4]
    UARTvprintf(pcString, vaArgP);
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	6938      	ldr	r0, [r7, #16]
 8005d46:	f7ff fdfb 	bl	8005940 <UARTvprintf>
    va_end(vaArgP);
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d54:	b004      	add	sp, #16
 8005d56:	4770      	bx	lr

08005d58 <SchedulerSysTickIntHandler>:
//! \return None.
//
//*****************************************************************************
void
SchedulerSysTickIntHandler(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
    g_ui32SchedulerTickCount++;
 8005d5c:	4b04      	ldr	r3, [pc, #16]	@ (8005d70 <SchedulerSysTickIntHandler+0x18>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a03      	ldr	r2, [pc, #12]	@ (8005d70 <SchedulerSysTickIntHandler+0x18>)
 8005d64:	6013      	str	r3, [r2, #0]
}
 8005d66:	bf00      	nop
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	20018ca0 	.word	0x20018ca0

08005d74 <SchedulerInit>:
//!
//! \return None.
//
//*****************************************************************************
void SchedulerInit(uint32_t TicksPerSecond)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((SystemCoreClock / TicksPerSecond) - 1UL);  /* set reload register */
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <SchedulerInit+0x38>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	4a0a      	ldr	r2, [pc, #40]	@ (8005db0 <SchedulerInit+0x3c>)
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005d8c:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <SchedulerInit+0x3c>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d92:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <SchedulerInit+0x3c>)
 8005d94:	2207      	movs	r2, #7
 8005d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk	|
				   SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer interrupt */
  SchedulerTickPerSecond = TicksPerSecond;
 8005d98:	4a06      	ldr	r2, [pc, #24]	@ (8005db4 <SchedulerInit+0x40>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000030 	.word	0x20000030
 8005db0:	e000e010 	.word	0xe000e010
 8005db4:	200000c8 	.word	0x200000c8

08005db8 <SchedulerRun>:
//! \return None.
//
//*****************************************************************************
void
SchedulerRun(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
    tSchedulerTask *pi16Task;

    //
    // Loop through each task in the task table.
    //
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	e022      	b.n	8005e0a <SchedulerRun+0x52>
    {
        //
        // Get a pointer to the task information.
        //
        pi16Task = &g_psSchedulerTable[ui32Loop];
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a14      	ldr	r2, [pc, #80]	@ (8005e20 <SchedulerRun+0x68>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	603b      	str	r3, [r7, #0]

        //
        // Is this task active and, if so, is it time to call it's function?
        //
        if(pi16Task->bActive &&
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	7c1b      	ldrb	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <SchedulerRun+0x4c>
           (SchedulerElapsedTicksGet(pi16Task->ui32LastCall) >=
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f823 	bl	8005e2c <SchedulerElapsedTicksGet>
 8005de6:	4602      	mov	r2, r0
            pi16Task->ui32FrequencyTicks))
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
        if(pi16Task->bActive &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d309      	bcc.n	8005e04 <SchedulerRun+0x4c>
        {
            //
            // Remember the timestamp at which we make the function call.
            //
            pi16Task->ui32LastCall = g_ui32SchedulerTickCount;
 8005df0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <SchedulerRun+0x6c>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	60da      	str	r2, [r3, #12]

            //
            // Call the task function, passing the provided parameter.
            //
            pi16Task->pfnFunction(pi16Task->pvParam);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	6852      	ldr	r2, [r2, #4]
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
    for(ui32Loop = 0; ui32Loop < g_ui32SchedulerNumTasks; ui32Loop++)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3301      	adds	r3, #1
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	4b07      	ldr	r3, [pc, #28]	@ (8005e28 <SchedulerRun+0x70>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d3d7      	bcc.n	8005dc4 <SchedulerRun+0xc>
        }
    }
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000008 	.word	0x20000008
 8005e24:	20018ca0 	.word	0x20018ca0
 8005e28:	20000004 	.word	0x20000004

08005e2c <SchedulerElapsedTicksGet>:
//! \return The number of ticks elapsed since the provided tick count.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksGet(uint32_t ui32TickCount)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    //
    // Determine the calculation based upon whether the global tick count has
    // wrapped since the passed ui32TickCount.
    //
    return(SchedulerElapsedTicksCalc(ui32TickCount, g_ui32SchedulerTickCount));
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <SchedulerElapsedTicksGet+0x20>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f808 	bl	8005e50 <SchedulerElapsedTicksCalc>
 8005e40:	4603      	mov	r3, r0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20018ca0 	.word	0x20018ca0

08005e50 <SchedulerElapsedTicksCalc>:
//! counts.
//
//*****************************************************************************
uint32_t
SchedulerElapsedTicksCalc(uint32_t ui32TickStart, uint32_t ui32TickEnd)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
    return((ui32TickEnd > ui32TickStart) ? (ui32TickEnd - ui32TickStart) :
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad3      	subs	r3, r2, r3
           ((0xFFFFFFFF - ui32TickStart) + ui32TickEnd + 1));
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <atof>:
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f000 be07 	b.w	8006a80 <strtod>

08005e72 <atoi>:
 8005e72:	220a      	movs	r2, #10
 8005e74:	2100      	movs	r1, #0
 8005e76:	f000 be89 	b.w	8006b8c <strtol>

08005e7a <sulp>:
 8005e7a:	b570      	push	{r4, r5, r6, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	ec45 4b10 	vmov	d0, r4, r5
 8005e84:	4616      	mov	r6, r2
 8005e86:	f001 ffe7 	bl	8007e58 <__ulp>
 8005e8a:	ec51 0b10 	vmov	r0, r1, d0
 8005e8e:	b17e      	cbz	r6, 8005eb0 <sulp+0x36>
 8005e90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e94:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dd09      	ble.n	8005eb0 <sulp+0x36>
 8005e9c:	051b      	lsls	r3, r3, #20
 8005e9e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	462b      	mov	r3, r5
 8005eac:	f7fa fbac 	bl	8000608 <__aeabi_dmul>
 8005eb0:	ec41 0b10 	vmov	d0, r0, r1
 8005eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005eb8 <_strtod_l>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	b09f      	sub	sp, #124	@ 0x7c
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005ec6:	9005      	str	r0, [sp, #20]
 8005ec8:	f04f 0a00 	mov.w	sl, #0
 8005ecc:	f04f 0b00 	mov.w	fp, #0
 8005ed0:	460a      	mov	r2, r1
 8005ed2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ed4:	7811      	ldrb	r1, [r2, #0]
 8005ed6:	292b      	cmp	r1, #43	@ 0x2b
 8005ed8:	d04a      	beq.n	8005f70 <_strtod_l+0xb8>
 8005eda:	d838      	bhi.n	8005f4e <_strtod_l+0x96>
 8005edc:	290d      	cmp	r1, #13
 8005ede:	d832      	bhi.n	8005f46 <_strtod_l+0x8e>
 8005ee0:	2908      	cmp	r1, #8
 8005ee2:	d832      	bhi.n	8005f4a <_strtod_l+0x92>
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	d03b      	beq.n	8005f60 <_strtod_l+0xa8>
 8005ee8:	2200      	movs	r2, #0
 8005eea:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005eee:	782a      	ldrb	r2, [r5, #0]
 8005ef0:	2a30      	cmp	r2, #48	@ 0x30
 8005ef2:	f040 80b2 	bne.w	800605a <_strtod_l+0x1a2>
 8005ef6:	786a      	ldrb	r2, [r5, #1]
 8005ef8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005efc:	2a58      	cmp	r2, #88	@ 0x58
 8005efe:	d16e      	bne.n	8005fde <_strtod_l+0x126>
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	4a8f      	ldr	r2, [pc, #572]	@ (8006148 <_strtod_l+0x290>)
 8005f0c:	9805      	ldr	r0, [sp, #20]
 8005f0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f10:	a919      	add	r1, sp, #100	@ 0x64
 8005f12:	f001 f8a3 	bl	800705c <__gethex>
 8005f16:	f010 060f 	ands.w	r6, r0, #15
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	d005      	beq.n	8005f2a <_strtod_l+0x72>
 8005f1e:	2e06      	cmp	r6, #6
 8005f20:	d128      	bne.n	8005f74 <_strtod_l+0xbc>
 8005f22:	3501      	adds	r5, #1
 8005f24:	2300      	movs	r3, #0
 8005f26:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f28:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 858e 	bne.w	8006a4e <_strtod_l+0xb96>
 8005f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f34:	b1cb      	cbz	r3, 8005f6a <_strtod_l+0xb2>
 8005f36:	4652      	mov	r2, sl
 8005f38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005f3c:	ec43 2b10 	vmov	d0, r2, r3
 8005f40:	b01f      	add	sp, #124	@ 0x7c
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	2920      	cmp	r1, #32
 8005f48:	d1ce      	bne.n	8005ee8 <_strtod_l+0x30>
 8005f4a:	3201      	adds	r2, #1
 8005f4c:	e7c1      	b.n	8005ed2 <_strtod_l+0x1a>
 8005f4e:	292d      	cmp	r1, #45	@ 0x2d
 8005f50:	d1ca      	bne.n	8005ee8 <_strtod_l+0x30>
 8005f52:	2101      	movs	r1, #1
 8005f54:	910e      	str	r1, [sp, #56]	@ 0x38
 8005f56:	1c51      	adds	r1, r2, #1
 8005f58:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f5a:	7852      	ldrb	r2, [r2, #1]
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d1c5      	bne.n	8005eec <_strtod_l+0x34>
 8005f60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f62:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 8570 	bne.w	8006a4a <_strtod_l+0xb92>
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	465b      	mov	r3, fp
 8005f6e:	e7e5      	b.n	8005f3c <_strtod_l+0x84>
 8005f70:	2100      	movs	r1, #0
 8005f72:	e7ef      	b.n	8005f54 <_strtod_l+0x9c>
 8005f74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f76:	b13a      	cbz	r2, 8005f88 <_strtod_l+0xd0>
 8005f78:	2135      	movs	r1, #53	@ 0x35
 8005f7a:	a81c      	add	r0, sp, #112	@ 0x70
 8005f7c:	f002 f866 	bl	800804c <__copybits>
 8005f80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f82:	9805      	ldr	r0, [sp, #20]
 8005f84:	f001 fc3c 	bl	8007800 <_Bfree>
 8005f88:	3e01      	subs	r6, #1
 8005f8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f8c:	2e04      	cmp	r6, #4
 8005f8e:	d806      	bhi.n	8005f9e <_strtod_l+0xe6>
 8005f90:	e8df f006 	tbb	[pc, r6]
 8005f94:	201d0314 	.word	0x201d0314
 8005f98:	14          	.byte	0x14
 8005f99:	00          	.byte	0x00
 8005f9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005f9e:	05e1      	lsls	r1, r4, #23
 8005fa0:	bf48      	it	mi
 8005fa2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005faa:	0d1b      	lsrs	r3, r3, #20
 8005fac:	051b      	lsls	r3, r3, #20
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1bb      	bne.n	8005f2a <_strtod_l+0x72>
 8005fb2:	f000 ff5b 	bl	8006e6c <__errno>
 8005fb6:	2322      	movs	r3, #34	@ 0x22
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	e7b6      	b.n	8005f2a <_strtod_l+0x72>
 8005fbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005fc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005fc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fcc:	e7e7      	b.n	8005f9e <_strtod_l+0xe6>
 8005fce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006150 <_strtod_l+0x298>
 8005fd2:	e7e4      	b.n	8005f9e <_strtod_l+0xe6>
 8005fd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005fd8:	f04f 3aff 	mov.w	sl, #4294967295
 8005fdc:	e7df      	b.n	8005f9e <_strtod_l+0xe6>
 8005fde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b30      	cmp	r3, #48	@ 0x30
 8005fe8:	d0f9      	beq.n	8005fde <_strtod_l+0x126>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d09d      	beq.n	8005f2a <_strtod_l+0x72>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	2700      	movs	r7, #0
 8005ff2:	9308      	str	r3, [sp, #32]
 8005ff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ff6:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ff8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005ffa:	46b9      	mov	r9, r7
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006000:	7805      	ldrb	r5, [r0, #0]
 8006002:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006006:	b2d9      	uxtb	r1, r3
 8006008:	2909      	cmp	r1, #9
 800600a:	d928      	bls.n	800605e <_strtod_l+0x1a6>
 800600c:	494f      	ldr	r1, [pc, #316]	@ (800614c <_strtod_l+0x294>)
 800600e:	2201      	movs	r2, #1
 8006010:	f000 fed3 	bl	8006dba <strncmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	d032      	beq.n	800607e <_strtod_l+0x1c6>
 8006018:	2000      	movs	r0, #0
 800601a:	462a      	mov	r2, r5
 800601c:	900a      	str	r0, [sp, #40]	@ 0x28
 800601e:	464d      	mov	r5, r9
 8006020:	4603      	mov	r3, r0
 8006022:	2a65      	cmp	r2, #101	@ 0x65
 8006024:	d001      	beq.n	800602a <_strtod_l+0x172>
 8006026:	2a45      	cmp	r2, #69	@ 0x45
 8006028:	d114      	bne.n	8006054 <_strtod_l+0x19c>
 800602a:	b91d      	cbnz	r5, 8006034 <_strtod_l+0x17c>
 800602c:	9a08      	ldr	r2, [sp, #32]
 800602e:	4302      	orrs	r2, r0
 8006030:	d096      	beq.n	8005f60 <_strtod_l+0xa8>
 8006032:	2500      	movs	r5, #0
 8006034:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006036:	1c62      	adds	r2, r4, #1
 8006038:	9219      	str	r2, [sp, #100]	@ 0x64
 800603a:	7862      	ldrb	r2, [r4, #1]
 800603c:	2a2b      	cmp	r2, #43	@ 0x2b
 800603e:	d07a      	beq.n	8006136 <_strtod_l+0x27e>
 8006040:	2a2d      	cmp	r2, #45	@ 0x2d
 8006042:	d07e      	beq.n	8006142 <_strtod_l+0x28a>
 8006044:	f04f 0c00 	mov.w	ip, #0
 8006048:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800604c:	2909      	cmp	r1, #9
 800604e:	f240 8085 	bls.w	800615c <_strtod_l+0x2a4>
 8006052:	9419      	str	r4, [sp, #100]	@ 0x64
 8006054:	f04f 0800 	mov.w	r8, #0
 8006058:	e0a5      	b.n	80061a6 <_strtod_l+0x2ee>
 800605a:	2300      	movs	r3, #0
 800605c:	e7c8      	b.n	8005ff0 <_strtod_l+0x138>
 800605e:	f1b9 0f08 	cmp.w	r9, #8
 8006062:	bfd8      	it	le
 8006064:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006066:	f100 0001 	add.w	r0, r0, #1
 800606a:	bfda      	itte	le
 800606c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006070:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006072:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006076:	f109 0901 	add.w	r9, r9, #1
 800607a:	9019      	str	r0, [sp, #100]	@ 0x64
 800607c:	e7bf      	b.n	8005ffe <_strtod_l+0x146>
 800607e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	9219      	str	r2, [sp, #100]	@ 0x64
 8006084:	785a      	ldrb	r2, [r3, #1]
 8006086:	f1b9 0f00 	cmp.w	r9, #0
 800608a:	d03b      	beq.n	8006104 <_strtod_l+0x24c>
 800608c:	900a      	str	r0, [sp, #40]	@ 0x28
 800608e:	464d      	mov	r5, r9
 8006090:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006094:	2b09      	cmp	r3, #9
 8006096:	d912      	bls.n	80060be <_strtod_l+0x206>
 8006098:	2301      	movs	r3, #1
 800609a:	e7c2      	b.n	8006022 <_strtod_l+0x16a>
 800609c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80060a2:	785a      	ldrb	r2, [r3, #1]
 80060a4:	3001      	adds	r0, #1
 80060a6:	2a30      	cmp	r2, #48	@ 0x30
 80060a8:	d0f8      	beq.n	800609c <_strtod_l+0x1e4>
 80060aa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	f200 84d2 	bhi.w	8006a58 <_strtod_l+0xba0>
 80060b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80060b8:	2000      	movs	r0, #0
 80060ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80060bc:	4605      	mov	r5, r0
 80060be:	3a30      	subs	r2, #48	@ 0x30
 80060c0:	f100 0301 	add.w	r3, r0, #1
 80060c4:	d018      	beq.n	80060f8 <_strtod_l+0x240>
 80060c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060c8:	4419      	add	r1, r3
 80060ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80060cc:	462e      	mov	r6, r5
 80060ce:	f04f 0e0a 	mov.w	lr, #10
 80060d2:	1c71      	adds	r1, r6, #1
 80060d4:	eba1 0c05 	sub.w	ip, r1, r5
 80060d8:	4563      	cmp	r3, ip
 80060da:	dc15      	bgt.n	8006108 <_strtod_l+0x250>
 80060dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80060e0:	182b      	adds	r3, r5, r0
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	f105 0501 	add.w	r5, r5, #1
 80060e8:	4405      	add	r5, r0
 80060ea:	dc1a      	bgt.n	8006122 <_strtod_l+0x26a>
 80060ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060ee:	230a      	movs	r3, #10
 80060f0:	fb03 2301 	mla	r3, r3, r1, r2
 80060f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060f6:	2300      	movs	r3, #0
 80060f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060fa:	1c51      	adds	r1, r2, #1
 80060fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80060fe:	7852      	ldrb	r2, [r2, #1]
 8006100:	4618      	mov	r0, r3
 8006102:	e7c5      	b.n	8006090 <_strtod_l+0x1d8>
 8006104:	4648      	mov	r0, r9
 8006106:	e7ce      	b.n	80060a6 <_strtod_l+0x1ee>
 8006108:	2e08      	cmp	r6, #8
 800610a:	dc05      	bgt.n	8006118 <_strtod_l+0x260>
 800610c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800610e:	fb0e f606 	mul.w	r6, lr, r6
 8006112:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006114:	460e      	mov	r6, r1
 8006116:	e7dc      	b.n	80060d2 <_strtod_l+0x21a>
 8006118:	2910      	cmp	r1, #16
 800611a:	bfd8      	it	le
 800611c:	fb0e f707 	mulle.w	r7, lr, r7
 8006120:	e7f8      	b.n	8006114 <_strtod_l+0x25c>
 8006122:	2b0f      	cmp	r3, #15
 8006124:	bfdc      	itt	le
 8006126:	230a      	movle	r3, #10
 8006128:	fb03 2707 	mlale	r7, r3, r7, r2
 800612c:	e7e3      	b.n	80060f6 <_strtod_l+0x23e>
 800612e:	2300      	movs	r3, #0
 8006130:	930a      	str	r3, [sp, #40]	@ 0x28
 8006132:	2301      	movs	r3, #1
 8006134:	e77a      	b.n	800602c <_strtod_l+0x174>
 8006136:	f04f 0c00 	mov.w	ip, #0
 800613a:	1ca2      	adds	r2, r4, #2
 800613c:	9219      	str	r2, [sp, #100]	@ 0x64
 800613e:	78a2      	ldrb	r2, [r4, #2]
 8006140:	e782      	b.n	8006048 <_strtod_l+0x190>
 8006142:	f04f 0c01 	mov.w	ip, #1
 8006146:	e7f8      	b.n	800613a <_strtod_l+0x282>
 8006148:	080090ac 	.word	0x080090ac
 800614c:	08008f30 	.word	0x08008f30
 8006150:	7ff00000 	.word	0x7ff00000
 8006154:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006156:	1c51      	adds	r1, r2, #1
 8006158:	9119      	str	r1, [sp, #100]	@ 0x64
 800615a:	7852      	ldrb	r2, [r2, #1]
 800615c:	2a30      	cmp	r2, #48	@ 0x30
 800615e:	d0f9      	beq.n	8006154 <_strtod_l+0x29c>
 8006160:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006164:	2908      	cmp	r1, #8
 8006166:	f63f af75 	bhi.w	8006054 <_strtod_l+0x19c>
 800616a:	3a30      	subs	r2, #48	@ 0x30
 800616c:	9209      	str	r2, [sp, #36]	@ 0x24
 800616e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006170:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006172:	f04f 080a 	mov.w	r8, #10
 8006176:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006178:	1c56      	adds	r6, r2, #1
 800617a:	9619      	str	r6, [sp, #100]	@ 0x64
 800617c:	7852      	ldrb	r2, [r2, #1]
 800617e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006182:	f1be 0f09 	cmp.w	lr, #9
 8006186:	d939      	bls.n	80061fc <_strtod_l+0x344>
 8006188:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800618a:	1a76      	subs	r6, r6, r1
 800618c:	2e08      	cmp	r6, #8
 800618e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006192:	dc03      	bgt.n	800619c <_strtod_l+0x2e4>
 8006194:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006196:	4588      	cmp	r8, r1
 8006198:	bfa8      	it	ge
 800619a:	4688      	movge	r8, r1
 800619c:	f1bc 0f00 	cmp.w	ip, #0
 80061a0:	d001      	beq.n	80061a6 <_strtod_l+0x2ee>
 80061a2:	f1c8 0800 	rsb	r8, r8, #0
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	d14e      	bne.n	8006248 <_strtod_l+0x390>
 80061aa:	9908      	ldr	r1, [sp, #32]
 80061ac:	4308      	orrs	r0, r1
 80061ae:	f47f aebc 	bne.w	8005f2a <_strtod_l+0x72>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f47f aed4 	bne.w	8005f60 <_strtod_l+0xa8>
 80061b8:	2a69      	cmp	r2, #105	@ 0x69
 80061ba:	d028      	beq.n	800620e <_strtod_l+0x356>
 80061bc:	dc25      	bgt.n	800620a <_strtod_l+0x352>
 80061be:	2a49      	cmp	r2, #73	@ 0x49
 80061c0:	d025      	beq.n	800620e <_strtod_l+0x356>
 80061c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80061c4:	f47f aecc 	bne.w	8005f60 <_strtod_l+0xa8>
 80061c8:	499a      	ldr	r1, [pc, #616]	@ (8006434 <_strtod_l+0x57c>)
 80061ca:	a819      	add	r0, sp, #100	@ 0x64
 80061cc:	f001 f968 	bl	80074a0 <__match>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f43f aec5 	beq.w	8005f60 <_strtod_l+0xa8>
 80061d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b28      	cmp	r3, #40	@ 0x28
 80061dc:	d12e      	bne.n	800623c <_strtod_l+0x384>
 80061de:	4996      	ldr	r1, [pc, #600]	@ (8006438 <_strtod_l+0x580>)
 80061e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80061e2:	a819      	add	r0, sp, #100	@ 0x64
 80061e4:	f001 f970 	bl	80074c8 <__hexnan>
 80061e8:	2805      	cmp	r0, #5
 80061ea:	d127      	bne.n	800623c <_strtod_l+0x384>
 80061ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80061f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80061f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80061fa:	e696      	b.n	8005f2a <_strtod_l+0x72>
 80061fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061fe:	fb08 2101 	mla	r1, r8, r1, r2
 8006202:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006206:	9209      	str	r2, [sp, #36]	@ 0x24
 8006208:	e7b5      	b.n	8006176 <_strtod_l+0x2be>
 800620a:	2a6e      	cmp	r2, #110	@ 0x6e
 800620c:	e7da      	b.n	80061c4 <_strtod_l+0x30c>
 800620e:	498b      	ldr	r1, [pc, #556]	@ (800643c <_strtod_l+0x584>)
 8006210:	a819      	add	r0, sp, #100	@ 0x64
 8006212:	f001 f945 	bl	80074a0 <__match>
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f aea2 	beq.w	8005f60 <_strtod_l+0xa8>
 800621c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800621e:	4988      	ldr	r1, [pc, #544]	@ (8006440 <_strtod_l+0x588>)
 8006220:	3b01      	subs	r3, #1
 8006222:	a819      	add	r0, sp, #100	@ 0x64
 8006224:	9319      	str	r3, [sp, #100]	@ 0x64
 8006226:	f001 f93b 	bl	80074a0 <__match>
 800622a:	b910      	cbnz	r0, 8006232 <_strtod_l+0x37a>
 800622c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800622e:	3301      	adds	r3, #1
 8006230:	9319      	str	r3, [sp, #100]	@ 0x64
 8006232:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006450 <_strtod_l+0x598>
 8006236:	f04f 0a00 	mov.w	sl, #0
 800623a:	e676      	b.n	8005f2a <_strtod_l+0x72>
 800623c:	4881      	ldr	r0, [pc, #516]	@ (8006444 <_strtod_l+0x58c>)
 800623e:	f000 fe53 	bl	8006ee8 <nan>
 8006242:	ec5b ab10 	vmov	sl, fp, d0
 8006246:	e670      	b.n	8005f2a <_strtod_l+0x72>
 8006248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800624a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800624c:	eba8 0303 	sub.w	r3, r8, r3
 8006250:	f1b9 0f00 	cmp.w	r9, #0
 8006254:	bf08      	it	eq
 8006256:	46a9      	moveq	r9, r5
 8006258:	2d10      	cmp	r5, #16
 800625a:	9309      	str	r3, [sp, #36]	@ 0x24
 800625c:	462c      	mov	r4, r5
 800625e:	bfa8      	it	ge
 8006260:	2410      	movge	r4, #16
 8006262:	f7fa f957 	bl	8000514 <__aeabi_ui2d>
 8006266:	2d09      	cmp	r5, #9
 8006268:	4682      	mov	sl, r0
 800626a:	468b      	mov	fp, r1
 800626c:	dc13      	bgt.n	8006296 <_strtod_l+0x3de>
 800626e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006270:	2b00      	cmp	r3, #0
 8006272:	f43f ae5a 	beq.w	8005f2a <_strtod_l+0x72>
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	dd78      	ble.n	800636c <_strtod_l+0x4b4>
 800627a:	2b16      	cmp	r3, #22
 800627c:	dc5f      	bgt.n	800633e <_strtod_l+0x486>
 800627e:	4972      	ldr	r1, [pc, #456]	@ (8006448 <_strtod_l+0x590>)
 8006280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006288:	4652      	mov	r2, sl
 800628a:	465b      	mov	r3, fp
 800628c:	f7fa f9bc 	bl	8000608 <__aeabi_dmul>
 8006290:	4682      	mov	sl, r0
 8006292:	468b      	mov	fp, r1
 8006294:	e649      	b.n	8005f2a <_strtod_l+0x72>
 8006296:	4b6c      	ldr	r3, [pc, #432]	@ (8006448 <_strtod_l+0x590>)
 8006298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800629c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80062a0:	f7fa f9b2 	bl	8000608 <__aeabi_dmul>
 80062a4:	4682      	mov	sl, r0
 80062a6:	4638      	mov	r0, r7
 80062a8:	468b      	mov	fp, r1
 80062aa:	f7fa f933 	bl	8000514 <__aeabi_ui2d>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4650      	mov	r0, sl
 80062b4:	4659      	mov	r1, fp
 80062b6:	f7f9 fff1 	bl	800029c <__adddf3>
 80062ba:	2d0f      	cmp	r5, #15
 80062bc:	4682      	mov	sl, r0
 80062be:	468b      	mov	fp, r1
 80062c0:	ddd5      	ble.n	800626e <_strtod_l+0x3b6>
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	1b2c      	subs	r4, r5, r4
 80062c6:	441c      	add	r4, r3
 80062c8:	2c00      	cmp	r4, #0
 80062ca:	f340 8093 	ble.w	80063f4 <_strtod_l+0x53c>
 80062ce:	f014 030f 	ands.w	r3, r4, #15
 80062d2:	d00a      	beq.n	80062ea <_strtod_l+0x432>
 80062d4:	495c      	ldr	r1, [pc, #368]	@ (8006448 <_strtod_l+0x590>)
 80062d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062da:	4652      	mov	r2, sl
 80062dc:	465b      	mov	r3, fp
 80062de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062e2:	f7fa f991 	bl	8000608 <__aeabi_dmul>
 80062e6:	4682      	mov	sl, r0
 80062e8:	468b      	mov	fp, r1
 80062ea:	f034 040f 	bics.w	r4, r4, #15
 80062ee:	d073      	beq.n	80063d8 <_strtod_l+0x520>
 80062f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80062f4:	dd49      	ble.n	800638a <_strtod_l+0x4d2>
 80062f6:	2400      	movs	r4, #0
 80062f8:	46a0      	mov	r8, r4
 80062fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062fc:	46a1      	mov	r9, r4
 80062fe:	9a05      	ldr	r2, [sp, #20]
 8006300:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006450 <_strtod_l+0x598>
 8006304:	2322      	movs	r3, #34	@ 0x22
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	f04f 0a00 	mov.w	sl, #0
 800630c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	f43f ae0b 	beq.w	8005f2a <_strtod_l+0x72>
 8006314:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006316:	9805      	ldr	r0, [sp, #20]
 8006318:	f001 fa72 	bl	8007800 <_Bfree>
 800631c:	9805      	ldr	r0, [sp, #20]
 800631e:	4649      	mov	r1, r9
 8006320:	f001 fa6e 	bl	8007800 <_Bfree>
 8006324:	9805      	ldr	r0, [sp, #20]
 8006326:	4641      	mov	r1, r8
 8006328:	f001 fa6a 	bl	8007800 <_Bfree>
 800632c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800632e:	9805      	ldr	r0, [sp, #20]
 8006330:	f001 fa66 	bl	8007800 <_Bfree>
 8006334:	9805      	ldr	r0, [sp, #20]
 8006336:	4621      	mov	r1, r4
 8006338:	f001 fa62 	bl	8007800 <_Bfree>
 800633c:	e5f5      	b.n	8005f2a <_strtod_l+0x72>
 800633e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006340:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006344:	4293      	cmp	r3, r2
 8006346:	dbbc      	blt.n	80062c2 <_strtod_l+0x40a>
 8006348:	4c3f      	ldr	r4, [pc, #252]	@ (8006448 <_strtod_l+0x590>)
 800634a:	f1c5 050f 	rsb	r5, r5, #15
 800634e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006352:	4652      	mov	r2, sl
 8006354:	465b      	mov	r3, fp
 8006356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635a:	f7fa f955 	bl	8000608 <__aeabi_dmul>
 800635e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006360:	1b5d      	subs	r5, r3, r5
 8006362:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006366:	e9d4 2300 	ldrd	r2, r3, [r4]
 800636a:	e78f      	b.n	800628c <_strtod_l+0x3d4>
 800636c:	3316      	adds	r3, #22
 800636e:	dba8      	blt.n	80062c2 <_strtod_l+0x40a>
 8006370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006372:	eba3 0808 	sub.w	r8, r3, r8
 8006376:	4b34      	ldr	r3, [pc, #208]	@ (8006448 <_strtod_l+0x590>)
 8006378:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800637c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006380:	4650      	mov	r0, sl
 8006382:	4659      	mov	r1, fp
 8006384:	f7fa fa6a 	bl	800085c <__aeabi_ddiv>
 8006388:	e782      	b.n	8006290 <_strtod_l+0x3d8>
 800638a:	2300      	movs	r3, #0
 800638c:	4f2f      	ldr	r7, [pc, #188]	@ (800644c <_strtod_l+0x594>)
 800638e:	1124      	asrs	r4, r4, #4
 8006390:	4650      	mov	r0, sl
 8006392:	4659      	mov	r1, fp
 8006394:	461e      	mov	r6, r3
 8006396:	2c01      	cmp	r4, #1
 8006398:	dc21      	bgt.n	80063de <_strtod_l+0x526>
 800639a:	b10b      	cbz	r3, 80063a0 <_strtod_l+0x4e8>
 800639c:	4682      	mov	sl, r0
 800639e:	468b      	mov	fp, r1
 80063a0:	492a      	ldr	r1, [pc, #168]	@ (800644c <_strtod_l+0x594>)
 80063a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80063a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b2:	f7fa f929 	bl	8000608 <__aeabi_dmul>
 80063b6:	4b26      	ldr	r3, [pc, #152]	@ (8006450 <_strtod_l+0x598>)
 80063b8:	460a      	mov	r2, r1
 80063ba:	400b      	ands	r3, r1
 80063bc:	4925      	ldr	r1, [pc, #148]	@ (8006454 <_strtod_l+0x59c>)
 80063be:	428b      	cmp	r3, r1
 80063c0:	4682      	mov	sl, r0
 80063c2:	d898      	bhi.n	80062f6 <_strtod_l+0x43e>
 80063c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80063c8:	428b      	cmp	r3, r1
 80063ca:	bf86      	itte	hi
 80063cc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006458 <_strtod_l+0x5a0>
 80063d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80063d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80063d8:	2300      	movs	r3, #0
 80063da:	9308      	str	r3, [sp, #32]
 80063dc:	e076      	b.n	80064cc <_strtod_l+0x614>
 80063de:	07e2      	lsls	r2, r4, #31
 80063e0:	d504      	bpl.n	80063ec <_strtod_l+0x534>
 80063e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e6:	f7fa f90f 	bl	8000608 <__aeabi_dmul>
 80063ea:	2301      	movs	r3, #1
 80063ec:	3601      	adds	r6, #1
 80063ee:	1064      	asrs	r4, r4, #1
 80063f0:	3708      	adds	r7, #8
 80063f2:	e7d0      	b.n	8006396 <_strtod_l+0x4de>
 80063f4:	d0f0      	beq.n	80063d8 <_strtod_l+0x520>
 80063f6:	4264      	negs	r4, r4
 80063f8:	f014 020f 	ands.w	r2, r4, #15
 80063fc:	d00a      	beq.n	8006414 <_strtod_l+0x55c>
 80063fe:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <_strtod_l+0x590>)
 8006400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006404:	4650      	mov	r0, sl
 8006406:	4659      	mov	r1, fp
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa fa26 	bl	800085c <__aeabi_ddiv>
 8006410:	4682      	mov	sl, r0
 8006412:	468b      	mov	fp, r1
 8006414:	1124      	asrs	r4, r4, #4
 8006416:	d0df      	beq.n	80063d8 <_strtod_l+0x520>
 8006418:	2c1f      	cmp	r4, #31
 800641a:	dd1f      	ble.n	800645c <_strtod_l+0x5a4>
 800641c:	2400      	movs	r4, #0
 800641e:	46a0      	mov	r8, r4
 8006420:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006422:	46a1      	mov	r9, r4
 8006424:	9a05      	ldr	r2, [sp, #20]
 8006426:	2322      	movs	r3, #34	@ 0x22
 8006428:	f04f 0a00 	mov.w	sl, #0
 800642c:	f04f 0b00 	mov.w	fp, #0
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e76b      	b.n	800630c <_strtod_l+0x454>
 8006434:	08008f3b 	.word	0x08008f3b
 8006438:	08009098 	.word	0x08009098
 800643c:	08008f32 	.word	0x08008f32
 8006440:	08008f35 	.word	0x08008f35
 8006444:	08009062 	.word	0x08009062
 8006448:	08009220 	.word	0x08009220
 800644c:	080091f8 	.word	0x080091f8
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	7ca00000 	.word	0x7ca00000
 8006458:	7fefffff 	.word	0x7fefffff
 800645c:	f014 0310 	ands.w	r3, r4, #16
 8006460:	bf18      	it	ne
 8006462:	236a      	movne	r3, #106	@ 0x6a
 8006464:	4ea9      	ldr	r6, [pc, #676]	@ (800670c <_strtod_l+0x854>)
 8006466:	9308      	str	r3, [sp, #32]
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	2300      	movs	r3, #0
 800646e:	07e7      	lsls	r7, r4, #31
 8006470:	d504      	bpl.n	800647c <_strtod_l+0x5c4>
 8006472:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006476:	f7fa f8c7 	bl	8000608 <__aeabi_dmul>
 800647a:	2301      	movs	r3, #1
 800647c:	1064      	asrs	r4, r4, #1
 800647e:	f106 0608 	add.w	r6, r6, #8
 8006482:	d1f4      	bne.n	800646e <_strtod_l+0x5b6>
 8006484:	b10b      	cbz	r3, 800648a <_strtod_l+0x5d2>
 8006486:	4682      	mov	sl, r0
 8006488:	468b      	mov	fp, r1
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	b1b3      	cbz	r3, 80064bc <_strtod_l+0x604>
 800648e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006492:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006496:	2b00      	cmp	r3, #0
 8006498:	4659      	mov	r1, fp
 800649a:	dd0f      	ble.n	80064bc <_strtod_l+0x604>
 800649c:	2b1f      	cmp	r3, #31
 800649e:	dd56      	ble.n	800654e <_strtod_l+0x696>
 80064a0:	2b34      	cmp	r3, #52	@ 0x34
 80064a2:	bfde      	ittt	le
 80064a4:	f04f 33ff 	movle.w	r3, #4294967295
 80064a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80064ac:	4093      	lslle	r3, r2
 80064ae:	f04f 0a00 	mov.w	sl, #0
 80064b2:	bfcc      	ite	gt
 80064b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80064b8:	ea03 0b01 	andle.w	fp, r3, r1
 80064bc:	2200      	movs	r2, #0
 80064be:	2300      	movs	r3, #0
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	f7fa fb08 	bl	8000ad8 <__aeabi_dcmpeq>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1a7      	bne.n	800641c <_strtod_l+0x564>
 80064cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80064d2:	9805      	ldr	r0, [sp, #20]
 80064d4:	462b      	mov	r3, r5
 80064d6:	464a      	mov	r2, r9
 80064d8:	f001 f9fa 	bl	80078d0 <__s2b>
 80064dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f af09 	beq.w	80062f6 <_strtod_l+0x43e>
 80064e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	eba3 0308 	sub.w	r3, r3, r8
 80064ee:	bfa8      	it	ge
 80064f0:	2300      	movge	r3, #0
 80064f2:	9312      	str	r3, [sp, #72]	@ 0x48
 80064f4:	2400      	movs	r4, #0
 80064f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80064fa:	9316      	str	r3, [sp, #88]	@ 0x58
 80064fc:	46a0      	mov	r8, r4
 80064fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006500:	9805      	ldr	r0, [sp, #20]
 8006502:	6859      	ldr	r1, [r3, #4]
 8006504:	f001 f93c 	bl	8007780 <_Balloc>
 8006508:	4681      	mov	r9, r0
 800650a:	2800      	cmp	r0, #0
 800650c:	f43f aef7 	beq.w	80062fe <_strtod_l+0x446>
 8006510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	3202      	adds	r2, #2
 8006516:	f103 010c 	add.w	r1, r3, #12
 800651a:	0092      	lsls	r2, r2, #2
 800651c:	300c      	adds	r0, #12
 800651e:	f000 fcd2 	bl	8006ec6 <memcpy>
 8006522:	ec4b ab10 	vmov	d0, sl, fp
 8006526:	9805      	ldr	r0, [sp, #20]
 8006528:	aa1c      	add	r2, sp, #112	@ 0x70
 800652a:	a91b      	add	r1, sp, #108	@ 0x6c
 800652c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006530:	f001 fd02 	bl	8007f38 <__d2b>
 8006534:	901a      	str	r0, [sp, #104]	@ 0x68
 8006536:	2800      	cmp	r0, #0
 8006538:	f43f aee1 	beq.w	80062fe <_strtod_l+0x446>
 800653c:	9805      	ldr	r0, [sp, #20]
 800653e:	2101      	movs	r1, #1
 8006540:	f001 fa5c 	bl	80079fc <__i2b>
 8006544:	4680      	mov	r8, r0
 8006546:	b948      	cbnz	r0, 800655c <_strtod_l+0x6a4>
 8006548:	f04f 0800 	mov.w	r8, #0
 800654c:	e6d7      	b.n	80062fe <_strtod_l+0x446>
 800654e:	f04f 32ff 	mov.w	r2, #4294967295
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	ea03 0a0a 	and.w	sl, r3, sl
 800655a:	e7af      	b.n	80064bc <_strtod_l+0x604>
 800655c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800655e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006560:	2d00      	cmp	r5, #0
 8006562:	bfab      	itete	ge
 8006564:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006566:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006568:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800656a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800656c:	bfac      	ite	ge
 800656e:	18ef      	addge	r7, r5, r3
 8006570:	1b5e      	sublt	r6, r3, r5
 8006572:	9b08      	ldr	r3, [sp, #32]
 8006574:	1aed      	subs	r5, r5, r3
 8006576:	4415      	add	r5, r2
 8006578:	4b65      	ldr	r3, [pc, #404]	@ (8006710 <_strtod_l+0x858>)
 800657a:	3d01      	subs	r5, #1
 800657c:	429d      	cmp	r5, r3
 800657e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006582:	da50      	bge.n	8006626 <_strtod_l+0x76e>
 8006584:	1b5b      	subs	r3, r3, r5
 8006586:	2b1f      	cmp	r3, #31
 8006588:	eba2 0203 	sub.w	r2, r2, r3
 800658c:	f04f 0101 	mov.w	r1, #1
 8006590:	dc3d      	bgt.n	800660e <_strtod_l+0x756>
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006598:	2300      	movs	r3, #0
 800659a:	9310      	str	r3, [sp, #64]	@ 0x40
 800659c:	18bd      	adds	r5, r7, r2
 800659e:	9b08      	ldr	r3, [sp, #32]
 80065a0:	42af      	cmp	r7, r5
 80065a2:	4416      	add	r6, r2
 80065a4:	441e      	add	r6, r3
 80065a6:	463b      	mov	r3, r7
 80065a8:	bfa8      	it	ge
 80065aa:	462b      	movge	r3, r5
 80065ac:	42b3      	cmp	r3, r6
 80065ae:	bfa8      	it	ge
 80065b0:	4633      	movge	r3, r6
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfc2      	ittt	gt
 80065b6:	1aed      	subgt	r5, r5, r3
 80065b8:	1af6      	subgt	r6, r6, r3
 80065ba:	1aff      	subgt	r7, r7, r3
 80065bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd16      	ble.n	80065f0 <_strtod_l+0x738>
 80065c2:	4641      	mov	r1, r8
 80065c4:	9805      	ldr	r0, [sp, #20]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f001 fad0 	bl	8007b6c <__pow5mult>
 80065cc:	4680      	mov	r8, r0
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d0ba      	beq.n	8006548 <_strtod_l+0x690>
 80065d2:	4601      	mov	r1, r0
 80065d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065d6:	9805      	ldr	r0, [sp, #20]
 80065d8:	f001 fa26 	bl	8007a28 <__multiply>
 80065dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80065de:	2800      	cmp	r0, #0
 80065e0:	f43f ae8d 	beq.w	80062fe <_strtod_l+0x446>
 80065e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065e6:	9805      	ldr	r0, [sp, #20]
 80065e8:	f001 f90a 	bl	8007800 <_Bfree>
 80065ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	dc1d      	bgt.n	8006630 <_strtod_l+0x778>
 80065f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dd23      	ble.n	8006642 <_strtod_l+0x78a>
 80065fa:	4649      	mov	r1, r9
 80065fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80065fe:	9805      	ldr	r0, [sp, #20]
 8006600:	f001 fab4 	bl	8007b6c <__pow5mult>
 8006604:	4681      	mov	r9, r0
 8006606:	b9e0      	cbnz	r0, 8006642 <_strtod_l+0x78a>
 8006608:	f04f 0900 	mov.w	r9, #0
 800660c:	e677      	b.n	80062fe <_strtod_l+0x446>
 800660e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006612:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006616:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800661a:	35e2      	adds	r5, #226	@ 0xe2
 800661c:	fa01 f305 	lsl.w	r3, r1, r5
 8006620:	9310      	str	r3, [sp, #64]	@ 0x40
 8006622:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006624:	e7ba      	b.n	800659c <_strtod_l+0x6e4>
 8006626:	2300      	movs	r3, #0
 8006628:	9310      	str	r3, [sp, #64]	@ 0x40
 800662a:	2301      	movs	r3, #1
 800662c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800662e:	e7b5      	b.n	800659c <_strtod_l+0x6e4>
 8006630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006632:	9805      	ldr	r0, [sp, #20]
 8006634:	462a      	mov	r2, r5
 8006636:	f001 faf3 	bl	8007c20 <__lshift>
 800663a:	901a      	str	r0, [sp, #104]	@ 0x68
 800663c:	2800      	cmp	r0, #0
 800663e:	d1d9      	bne.n	80065f4 <_strtod_l+0x73c>
 8006640:	e65d      	b.n	80062fe <_strtod_l+0x446>
 8006642:	2e00      	cmp	r6, #0
 8006644:	dd07      	ble.n	8006656 <_strtod_l+0x79e>
 8006646:	4649      	mov	r1, r9
 8006648:	9805      	ldr	r0, [sp, #20]
 800664a:	4632      	mov	r2, r6
 800664c:	f001 fae8 	bl	8007c20 <__lshift>
 8006650:	4681      	mov	r9, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	d0d8      	beq.n	8006608 <_strtod_l+0x750>
 8006656:	2f00      	cmp	r7, #0
 8006658:	dd08      	ble.n	800666c <_strtod_l+0x7b4>
 800665a:	4641      	mov	r1, r8
 800665c:	9805      	ldr	r0, [sp, #20]
 800665e:	463a      	mov	r2, r7
 8006660:	f001 fade 	bl	8007c20 <__lshift>
 8006664:	4680      	mov	r8, r0
 8006666:	2800      	cmp	r0, #0
 8006668:	f43f ae49 	beq.w	80062fe <_strtod_l+0x446>
 800666c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800666e:	9805      	ldr	r0, [sp, #20]
 8006670:	464a      	mov	r2, r9
 8006672:	f001 fb5d 	bl	8007d30 <__mdiff>
 8006676:	4604      	mov	r4, r0
 8006678:	2800      	cmp	r0, #0
 800667a:	f43f ae40 	beq.w	80062fe <_strtod_l+0x446>
 800667e:	68c3      	ldr	r3, [r0, #12]
 8006680:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006682:	2300      	movs	r3, #0
 8006684:	60c3      	str	r3, [r0, #12]
 8006686:	4641      	mov	r1, r8
 8006688:	f001 fb36 	bl	8007cf8 <__mcmp>
 800668c:	2800      	cmp	r0, #0
 800668e:	da45      	bge.n	800671c <_strtod_l+0x864>
 8006690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006692:	ea53 030a 	orrs.w	r3, r3, sl
 8006696:	d16b      	bne.n	8006770 <_strtod_l+0x8b8>
 8006698:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800669c:	2b00      	cmp	r3, #0
 800669e:	d167      	bne.n	8006770 <_strtod_l+0x8b8>
 80066a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066a4:	0d1b      	lsrs	r3, r3, #20
 80066a6:	051b      	lsls	r3, r3, #20
 80066a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066ac:	d960      	bls.n	8006770 <_strtod_l+0x8b8>
 80066ae:	6963      	ldr	r3, [r4, #20]
 80066b0:	b913      	cbnz	r3, 80066b8 <_strtod_l+0x800>
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	dd5b      	ble.n	8006770 <_strtod_l+0x8b8>
 80066b8:	4621      	mov	r1, r4
 80066ba:	2201      	movs	r2, #1
 80066bc:	9805      	ldr	r0, [sp, #20]
 80066be:	f001 faaf 	bl	8007c20 <__lshift>
 80066c2:	4641      	mov	r1, r8
 80066c4:	4604      	mov	r4, r0
 80066c6:	f001 fb17 	bl	8007cf8 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	dd50      	ble.n	8006770 <_strtod_l+0x8b8>
 80066ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066d2:	9a08      	ldr	r2, [sp, #32]
 80066d4:	0d1b      	lsrs	r3, r3, #20
 80066d6:	051b      	lsls	r3, r3, #20
 80066d8:	2a00      	cmp	r2, #0
 80066da:	d06a      	beq.n	80067b2 <_strtod_l+0x8fa>
 80066dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066e0:	d867      	bhi.n	80067b2 <_strtod_l+0x8fa>
 80066e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80066e6:	f67f ae9d 	bls.w	8006424 <_strtod_l+0x56c>
 80066ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <_strtod_l+0x85c>)
 80066ec:	4650      	mov	r0, sl
 80066ee:	4659      	mov	r1, fp
 80066f0:	2200      	movs	r2, #0
 80066f2:	f7f9 ff89 	bl	8000608 <__aeabi_dmul>
 80066f6:	4b08      	ldr	r3, [pc, #32]	@ (8006718 <_strtod_l+0x860>)
 80066f8:	400b      	ands	r3, r1
 80066fa:	4682      	mov	sl, r0
 80066fc:	468b      	mov	fp, r1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f47f ae08 	bne.w	8006314 <_strtod_l+0x45c>
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	2322      	movs	r3, #34	@ 0x22
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e603      	b.n	8006314 <_strtod_l+0x45c>
 800670c:	080090c0 	.word	0x080090c0
 8006710:	fffffc02 	.word	0xfffffc02
 8006714:	39500000 	.word	0x39500000
 8006718:	7ff00000 	.word	0x7ff00000
 800671c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006720:	d165      	bne.n	80067ee <_strtod_l+0x936>
 8006722:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006728:	b35a      	cbz	r2, 8006782 <_strtod_l+0x8ca>
 800672a:	4a9f      	ldr	r2, [pc, #636]	@ (80069a8 <_strtod_l+0xaf0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d12b      	bne.n	8006788 <_strtod_l+0x8d0>
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	4651      	mov	r1, sl
 8006734:	b303      	cbz	r3, 8006778 <_strtod_l+0x8c0>
 8006736:	4b9d      	ldr	r3, [pc, #628]	@ (80069ac <_strtod_l+0xaf4>)
 8006738:	465a      	mov	r2, fp
 800673a:	4013      	ands	r3, r2
 800673c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006740:	f04f 32ff 	mov.w	r2, #4294967295
 8006744:	d81b      	bhi.n	800677e <_strtod_l+0x8c6>
 8006746:	0d1b      	lsrs	r3, r3, #20
 8006748:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	4299      	cmp	r1, r3
 8006752:	d119      	bne.n	8006788 <_strtod_l+0x8d0>
 8006754:	4b96      	ldr	r3, [pc, #600]	@ (80069b0 <_strtod_l+0xaf8>)
 8006756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006758:	429a      	cmp	r2, r3
 800675a:	d102      	bne.n	8006762 <_strtod_l+0x8aa>
 800675c:	3101      	adds	r1, #1
 800675e:	f43f adce 	beq.w	80062fe <_strtod_l+0x446>
 8006762:	4b92      	ldr	r3, [pc, #584]	@ (80069ac <_strtod_l+0xaf4>)
 8006764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006766:	401a      	ands	r2, r3
 8006768:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800676c:	f04f 0a00 	mov.w	sl, #0
 8006770:	9b08      	ldr	r3, [sp, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1b9      	bne.n	80066ea <_strtod_l+0x832>
 8006776:	e5cd      	b.n	8006314 <_strtod_l+0x45c>
 8006778:	f04f 33ff 	mov.w	r3, #4294967295
 800677c:	e7e8      	b.n	8006750 <_strtod_l+0x898>
 800677e:	4613      	mov	r3, r2
 8006780:	e7e6      	b.n	8006750 <_strtod_l+0x898>
 8006782:	ea53 030a 	orrs.w	r3, r3, sl
 8006786:	d0a2      	beq.n	80066ce <_strtod_l+0x816>
 8006788:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800678a:	b1db      	cbz	r3, 80067c4 <_strtod_l+0x90c>
 800678c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800678e:	4213      	tst	r3, r2
 8006790:	d0ee      	beq.n	8006770 <_strtod_l+0x8b8>
 8006792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006794:	9a08      	ldr	r2, [sp, #32]
 8006796:	4650      	mov	r0, sl
 8006798:	4659      	mov	r1, fp
 800679a:	b1bb      	cbz	r3, 80067cc <_strtod_l+0x914>
 800679c:	f7ff fb6d 	bl	8005e7a <sulp>
 80067a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067a4:	ec53 2b10 	vmov	r2, r3, d0
 80067a8:	f7f9 fd78 	bl	800029c <__adddf3>
 80067ac:	4682      	mov	sl, r0
 80067ae:	468b      	mov	fp, r1
 80067b0:	e7de      	b.n	8006770 <_strtod_l+0x8b8>
 80067b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80067b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067be:	f04f 3aff 	mov.w	sl, #4294967295
 80067c2:	e7d5      	b.n	8006770 <_strtod_l+0x8b8>
 80067c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067c6:	ea13 0f0a 	tst.w	r3, sl
 80067ca:	e7e1      	b.n	8006790 <_strtod_l+0x8d8>
 80067cc:	f7ff fb55 	bl	8005e7a <sulp>
 80067d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067d4:	ec53 2b10 	vmov	r2, r3, d0
 80067d8:	f7f9 fd5e 	bl	8000298 <__aeabi_dsub>
 80067dc:	2200      	movs	r2, #0
 80067de:	2300      	movs	r3, #0
 80067e0:	4682      	mov	sl, r0
 80067e2:	468b      	mov	fp, r1
 80067e4:	f7fa f978 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d0c1      	beq.n	8006770 <_strtod_l+0x8b8>
 80067ec:	e61a      	b.n	8006424 <_strtod_l+0x56c>
 80067ee:	4641      	mov	r1, r8
 80067f0:	4620      	mov	r0, r4
 80067f2:	f001 fbf9 	bl	8007fe8 <__ratio>
 80067f6:	ec57 6b10 	vmov	r6, r7, d0
 80067fa:	2200      	movs	r2, #0
 80067fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7fa f97c 	bl	8000b00 <__aeabi_dcmple>
 8006808:	2800      	cmp	r0, #0
 800680a:	d06f      	beq.n	80068ec <_strtod_l+0xa34>
 800680c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d17a      	bne.n	8006908 <_strtod_l+0xa50>
 8006812:	f1ba 0f00 	cmp.w	sl, #0
 8006816:	d158      	bne.n	80068ca <_strtod_l+0xa12>
 8006818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800681a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800681e:	2b00      	cmp	r3, #0
 8006820:	d15a      	bne.n	80068d8 <_strtod_l+0xa20>
 8006822:	4b64      	ldr	r3, [pc, #400]	@ (80069b4 <_strtod_l+0xafc>)
 8006824:	2200      	movs	r2, #0
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f95f 	bl	8000aec <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	d159      	bne.n	80068e6 <_strtod_l+0xa2e>
 8006832:	4630      	mov	r0, r6
 8006834:	4639      	mov	r1, r7
 8006836:	4b60      	ldr	r3, [pc, #384]	@ (80069b8 <_strtod_l+0xb00>)
 8006838:	2200      	movs	r2, #0
 800683a:	f7f9 fee5 	bl	8000608 <__aeabi_dmul>
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006846:	9606      	str	r6, [sp, #24]
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800684e:	4d57      	ldr	r5, [pc, #348]	@ (80069ac <_strtod_l+0xaf4>)
 8006850:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006856:	401d      	ands	r5, r3
 8006858:	4b58      	ldr	r3, [pc, #352]	@ (80069bc <_strtod_l+0xb04>)
 800685a:	429d      	cmp	r5, r3
 800685c:	f040 80b2 	bne.w	80069c4 <_strtod_l+0xb0c>
 8006860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006862:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006866:	ec4b ab10 	vmov	d0, sl, fp
 800686a:	f001 faf5 	bl	8007e58 <__ulp>
 800686e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006872:	ec51 0b10 	vmov	r0, r1, d0
 8006876:	f7f9 fec7 	bl	8000608 <__aeabi_dmul>
 800687a:	4652      	mov	r2, sl
 800687c:	465b      	mov	r3, fp
 800687e:	f7f9 fd0d 	bl	800029c <__adddf3>
 8006882:	460b      	mov	r3, r1
 8006884:	4949      	ldr	r1, [pc, #292]	@ (80069ac <_strtod_l+0xaf4>)
 8006886:	4a4e      	ldr	r2, [pc, #312]	@ (80069c0 <_strtod_l+0xb08>)
 8006888:	4019      	ands	r1, r3
 800688a:	4291      	cmp	r1, r2
 800688c:	4682      	mov	sl, r0
 800688e:	d942      	bls.n	8006916 <_strtod_l+0xa5e>
 8006890:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006892:	4b47      	ldr	r3, [pc, #284]	@ (80069b0 <_strtod_l+0xaf8>)
 8006894:	429a      	cmp	r2, r3
 8006896:	d103      	bne.n	80068a0 <_strtod_l+0x9e8>
 8006898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800689a:	3301      	adds	r3, #1
 800689c:	f43f ad2f 	beq.w	80062fe <_strtod_l+0x446>
 80068a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80069b0 <_strtod_l+0xaf8>
 80068a4:	f04f 3aff 	mov.w	sl, #4294967295
 80068a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068aa:	9805      	ldr	r0, [sp, #20]
 80068ac:	f000 ffa8 	bl	8007800 <_Bfree>
 80068b0:	9805      	ldr	r0, [sp, #20]
 80068b2:	4649      	mov	r1, r9
 80068b4:	f000 ffa4 	bl	8007800 <_Bfree>
 80068b8:	9805      	ldr	r0, [sp, #20]
 80068ba:	4641      	mov	r1, r8
 80068bc:	f000 ffa0 	bl	8007800 <_Bfree>
 80068c0:	9805      	ldr	r0, [sp, #20]
 80068c2:	4621      	mov	r1, r4
 80068c4:	f000 ff9c 	bl	8007800 <_Bfree>
 80068c8:	e619      	b.n	80064fe <_strtod_l+0x646>
 80068ca:	f1ba 0f01 	cmp.w	sl, #1
 80068ce:	d103      	bne.n	80068d8 <_strtod_l+0xa20>
 80068d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f43f ada6 	beq.w	8006424 <_strtod_l+0x56c>
 80068d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006988 <_strtod_l+0xad0>
 80068dc:	4f35      	ldr	r7, [pc, #212]	@ (80069b4 <_strtod_l+0xafc>)
 80068de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068e2:	2600      	movs	r6, #0
 80068e4:	e7b1      	b.n	800684a <_strtod_l+0x992>
 80068e6:	4f34      	ldr	r7, [pc, #208]	@ (80069b8 <_strtod_l+0xb00>)
 80068e8:	2600      	movs	r6, #0
 80068ea:	e7aa      	b.n	8006842 <_strtod_l+0x98a>
 80068ec:	4b32      	ldr	r3, [pc, #200]	@ (80069b8 <_strtod_l+0xb00>)
 80068ee:	4630      	mov	r0, r6
 80068f0:	4639      	mov	r1, r7
 80068f2:	2200      	movs	r2, #0
 80068f4:	f7f9 fe88 	bl	8000608 <__aeabi_dmul>
 80068f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068fa:	4606      	mov	r6, r0
 80068fc:	460f      	mov	r7, r1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d09f      	beq.n	8006842 <_strtod_l+0x98a>
 8006902:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006906:	e7a0      	b.n	800684a <_strtod_l+0x992>
 8006908:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006990 <_strtod_l+0xad8>
 800690c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006910:	ec57 6b17 	vmov	r6, r7, d7
 8006914:	e799      	b.n	800684a <_strtod_l+0x992>
 8006916:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1c1      	bne.n	80068a8 <_strtod_l+0x9f0>
 8006924:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006928:	0d1b      	lsrs	r3, r3, #20
 800692a:	051b      	lsls	r3, r3, #20
 800692c:	429d      	cmp	r5, r3
 800692e:	d1bb      	bne.n	80068a8 <_strtod_l+0x9f0>
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	f7fa f962 	bl	8000bfc <__aeabi_d2lz>
 8006938:	f7f9 fe38 	bl	80005ac <__aeabi_l2d>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	f7f9 fca8 	bl	8000298 <__aeabi_dsub>
 8006948:	460b      	mov	r3, r1
 800694a:	4602      	mov	r2, r0
 800694c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006950:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006956:	ea46 060a 	orr.w	r6, r6, sl
 800695a:	431e      	orrs	r6, r3
 800695c:	d06f      	beq.n	8006a3e <_strtod_l+0xb86>
 800695e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006998 <_strtod_l+0xae0>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7fa f8c2 	bl	8000aec <__aeabi_dcmplt>
 8006968:	2800      	cmp	r0, #0
 800696a:	f47f acd3 	bne.w	8006314 <_strtod_l+0x45c>
 800696e:	a30c      	add	r3, pc, #48	@ (adr r3, 80069a0 <_strtod_l+0xae8>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006978:	f7fa f8d6 	bl	8000b28 <__aeabi_dcmpgt>
 800697c:	2800      	cmp	r0, #0
 800697e:	d093      	beq.n	80068a8 <_strtod_l+0x9f0>
 8006980:	e4c8      	b.n	8006314 <_strtod_l+0x45c>
 8006982:	bf00      	nop
 8006984:	f3af 8000 	nop.w
 8006988:	00000000 	.word	0x00000000
 800698c:	bff00000 	.word	0xbff00000
 8006990:	00000000 	.word	0x00000000
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	94a03595 	.word	0x94a03595
 800699c:	3fdfffff 	.word	0x3fdfffff
 80069a0:	35afe535 	.word	0x35afe535
 80069a4:	3fe00000 	.word	0x3fe00000
 80069a8:	000fffff 	.word	0x000fffff
 80069ac:	7ff00000 	.word	0x7ff00000
 80069b0:	7fefffff 	.word	0x7fefffff
 80069b4:	3ff00000 	.word	0x3ff00000
 80069b8:	3fe00000 	.word	0x3fe00000
 80069bc:	7fe00000 	.word	0x7fe00000
 80069c0:	7c9fffff 	.word	0x7c9fffff
 80069c4:	9b08      	ldr	r3, [sp, #32]
 80069c6:	b323      	cbz	r3, 8006a12 <_strtod_l+0xb5a>
 80069c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80069cc:	d821      	bhi.n	8006a12 <_strtod_l+0xb5a>
 80069ce:	a328      	add	r3, pc, #160	@ (adr r3, 8006a70 <_strtod_l+0xbb8>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7fa f892 	bl	8000b00 <__aeabi_dcmple>
 80069dc:	b1a0      	cbz	r0, 8006a08 <_strtod_l+0xb50>
 80069de:	4639      	mov	r1, r7
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7fa f8d3 	bl	8000b8c <__aeabi_d2uiz>
 80069e6:	2801      	cmp	r0, #1
 80069e8:	bf38      	it	cc
 80069ea:	2001      	movcc	r0, #1
 80069ec:	f7f9 fd92 	bl	8000514 <__aeabi_ui2d>
 80069f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	b9fb      	cbnz	r3, 8006a38 <_strtod_l+0xb80>
 80069f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80069fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a0e:	1b5b      	subs	r3, r3, r5
 8006a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a1a:	f001 fa1d 	bl	8007e58 <__ulp>
 8006a1e:	4650      	mov	r0, sl
 8006a20:	ec53 2b10 	vmov	r2, r3, d0
 8006a24:	4659      	mov	r1, fp
 8006a26:	f7f9 fdef 	bl	8000608 <__aeabi_dmul>
 8006a2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a2e:	f7f9 fc35 	bl	800029c <__adddf3>
 8006a32:	4682      	mov	sl, r0
 8006a34:	468b      	mov	fp, r1
 8006a36:	e770      	b.n	800691a <_strtod_l+0xa62>
 8006a38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a3c:	e7e0      	b.n	8006a00 <_strtod_l+0xb48>
 8006a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a78 <_strtod_l+0xbc0>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7fa f852 	bl	8000aec <__aeabi_dcmplt>
 8006a48:	e798      	b.n	800697c <_strtod_l+0xac4>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	f7ff ba6d 	b.w	8005f32 <_strtod_l+0x7a>
 8006a58:	2a65      	cmp	r2, #101	@ 0x65
 8006a5a:	f43f ab68 	beq.w	800612e <_strtod_l+0x276>
 8006a5e:	2a45      	cmp	r2, #69	@ 0x45
 8006a60:	f43f ab65 	beq.w	800612e <_strtod_l+0x276>
 8006a64:	2301      	movs	r3, #1
 8006a66:	f7ff bba0 	b.w	80061aa <_strtod_l+0x2f2>
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w
 8006a70:	ffc00000 	.word	0xffc00000
 8006a74:	41dfffff 	.word	0x41dfffff
 8006a78:	94a03595 	.word	0x94a03595
 8006a7c:	3fcfffff 	.word	0x3fcfffff

08006a80 <strtod>:
 8006a80:	460a      	mov	r2, r1
 8006a82:	4601      	mov	r1, r0
 8006a84:	4802      	ldr	r0, [pc, #8]	@ (8006a90 <strtod+0x10>)
 8006a86:	4b03      	ldr	r3, [pc, #12]	@ (8006a94 <strtod+0x14>)
 8006a88:	6800      	ldr	r0, [r0, #0]
 8006a8a:	f7ff ba15 	b.w	8005eb8 <_strtod_l>
 8006a8e:	bf00      	nop
 8006a90:	20000244 	.word	0x20000244
 8006a94:	200000d8 	.word	0x200000d8

08006a98 <_strtol_l.isra.0>:
 8006a98:	2b24      	cmp	r3, #36	@ 0x24
 8006a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9e:	4686      	mov	lr, r0
 8006aa0:	4690      	mov	r8, r2
 8006aa2:	d801      	bhi.n	8006aa8 <_strtol_l.isra.0+0x10>
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d106      	bne.n	8006ab6 <_strtol_l.isra.0+0x1e>
 8006aa8:	f000 f9e0 	bl	8006e6c <__errno>
 8006aac:	2316      	movs	r3, #22
 8006aae:	6003      	str	r3, [r0, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	4834      	ldr	r0, [pc, #208]	@ (8006b88 <_strtol_l.isra.0+0xf0>)
 8006ab8:	460d      	mov	r5, r1
 8006aba:	462a      	mov	r2, r5
 8006abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac0:	5d06      	ldrb	r6, [r0, r4]
 8006ac2:	f016 0608 	ands.w	r6, r6, #8
 8006ac6:	d1f8      	bne.n	8006aba <_strtol_l.isra.0+0x22>
 8006ac8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006aca:	d110      	bne.n	8006aee <_strtol_l.isra.0+0x56>
 8006acc:	782c      	ldrb	r4, [r5, #0]
 8006ace:	2601      	movs	r6, #1
 8006ad0:	1c95      	adds	r5, r2, #2
 8006ad2:	f033 0210 	bics.w	r2, r3, #16
 8006ad6:	d115      	bne.n	8006b04 <_strtol_l.isra.0+0x6c>
 8006ad8:	2c30      	cmp	r4, #48	@ 0x30
 8006ada:	d10d      	bne.n	8006af8 <_strtol_l.isra.0+0x60>
 8006adc:	782a      	ldrb	r2, [r5, #0]
 8006ade:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ae2:	2a58      	cmp	r2, #88	@ 0x58
 8006ae4:	d108      	bne.n	8006af8 <_strtol_l.isra.0+0x60>
 8006ae6:	786c      	ldrb	r4, [r5, #1]
 8006ae8:	3502      	adds	r5, #2
 8006aea:	2310      	movs	r3, #16
 8006aec:	e00a      	b.n	8006b04 <_strtol_l.isra.0+0x6c>
 8006aee:	2c2b      	cmp	r4, #43	@ 0x2b
 8006af0:	bf04      	itt	eq
 8006af2:	782c      	ldrbeq	r4, [r5, #0]
 8006af4:	1c95      	addeq	r5, r2, #2
 8006af6:	e7ec      	b.n	8006ad2 <_strtol_l.isra.0+0x3a>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f6      	bne.n	8006aea <_strtol_l.isra.0+0x52>
 8006afc:	2c30      	cmp	r4, #48	@ 0x30
 8006afe:	bf14      	ite	ne
 8006b00:	230a      	movne	r3, #10
 8006b02:	2308      	moveq	r3, #8
 8006b04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	fbbc f9f3 	udiv	r9, ip, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b1c:	2f09      	cmp	r7, #9
 8006b1e:	d80f      	bhi.n	8006b40 <_strtol_l.isra.0+0xa8>
 8006b20:	463c      	mov	r4, r7
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	dd1b      	ble.n	8006b5e <_strtol_l.isra.0+0xc6>
 8006b26:	1c57      	adds	r7, r2, #1
 8006b28:	d007      	beq.n	8006b3a <_strtol_l.isra.0+0xa2>
 8006b2a:	4581      	cmp	r9, r0
 8006b2c:	d314      	bcc.n	8006b58 <_strtol_l.isra.0+0xc0>
 8006b2e:	d101      	bne.n	8006b34 <_strtol_l.isra.0+0x9c>
 8006b30:	45a2      	cmp	sl, r4
 8006b32:	db11      	blt.n	8006b58 <_strtol_l.isra.0+0xc0>
 8006b34:	fb00 4003 	mla	r0, r0, r3, r4
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b3e:	e7eb      	b.n	8006b18 <_strtol_l.isra.0+0x80>
 8006b40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b44:	2f19      	cmp	r7, #25
 8006b46:	d801      	bhi.n	8006b4c <_strtol_l.isra.0+0xb4>
 8006b48:	3c37      	subs	r4, #55	@ 0x37
 8006b4a:	e7ea      	b.n	8006b22 <_strtol_l.isra.0+0x8a>
 8006b4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b50:	2f19      	cmp	r7, #25
 8006b52:	d804      	bhi.n	8006b5e <_strtol_l.isra.0+0xc6>
 8006b54:	3c57      	subs	r4, #87	@ 0x57
 8006b56:	e7e4      	b.n	8006b22 <_strtol_l.isra.0+0x8a>
 8006b58:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5c:	e7ed      	b.n	8006b3a <_strtol_l.isra.0+0xa2>
 8006b5e:	1c53      	adds	r3, r2, #1
 8006b60:	d108      	bne.n	8006b74 <_strtol_l.isra.0+0xdc>
 8006b62:	2322      	movs	r3, #34	@ 0x22
 8006b64:	f8ce 3000 	str.w	r3, [lr]
 8006b68:	4660      	mov	r0, ip
 8006b6a:	f1b8 0f00 	cmp.w	r8, #0
 8006b6e:	d0a0      	beq.n	8006ab2 <_strtol_l.isra.0+0x1a>
 8006b70:	1e69      	subs	r1, r5, #1
 8006b72:	e006      	b.n	8006b82 <_strtol_l.isra.0+0xea>
 8006b74:	b106      	cbz	r6, 8006b78 <_strtol_l.isra.0+0xe0>
 8006b76:	4240      	negs	r0, r0
 8006b78:	f1b8 0f00 	cmp.w	r8, #0
 8006b7c:	d099      	beq.n	8006ab2 <_strtol_l.isra.0+0x1a>
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	d1f6      	bne.n	8006b70 <_strtol_l.isra.0+0xd8>
 8006b82:	f8c8 1000 	str.w	r1, [r8]
 8006b86:	e794      	b.n	8006ab2 <_strtol_l.isra.0+0x1a>
 8006b88:	080090e9 	.word	0x080090e9

08006b8c <strtol>:
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	460a      	mov	r2, r1
 8006b90:	4601      	mov	r1, r0
 8006b92:	4802      	ldr	r0, [pc, #8]	@ (8006b9c <strtol+0x10>)
 8006b94:	6800      	ldr	r0, [r0, #0]
 8006b96:	f7ff bf7f 	b.w	8006a98 <_strtol_l.isra.0>
 8006b9a:	bf00      	nop
 8006b9c:	20000244 	.word	0x20000244

08006ba0 <std>:
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8006baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bae:	6083      	str	r3, [r0, #8]
 8006bb0:	8181      	strh	r1, [r0, #12]
 8006bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb4:	81c2      	strh	r2, [r0, #14]
 8006bb6:	6183      	str	r3, [r0, #24]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	2208      	movs	r2, #8
 8006bbc:	305c      	adds	r0, #92	@ 0x5c
 8006bbe:	f000 f8f4 	bl	8006daa <memset>
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <std+0x58>)
 8006bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x5c>)
 8006bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x60>)
 8006bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x64>)
 8006bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x68>)
 8006bd4:	6224      	str	r4, [r4, #32]
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d006      	beq.n	8006be8 <std+0x48>
 8006bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bde:	4294      	cmp	r4, r2
 8006be0:	d002      	beq.n	8006be8 <std+0x48>
 8006be2:	33d0      	adds	r3, #208	@ 0xd0
 8006be4:	429c      	cmp	r4, r3
 8006be6:	d105      	bne.n	8006bf4 <std+0x54>
 8006be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf0:	f000 b966 	b.w	8006ec0 <__retarget_lock_init_recursive>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08006d25 	.word	0x08006d25
 8006bfc:	08006d47 	.word	0x08006d47
 8006c00:	08006d7f 	.word	0x08006d7f
 8006c04:	08006da3 	.word	0x08006da3
 8006c08:	20018ca4 	.word	0x20018ca4

08006c0c <stdio_exit_handler>:
 8006c0c:	4a02      	ldr	r2, [pc, #8]	@ (8006c18 <stdio_exit_handler+0xc>)
 8006c0e:	4903      	ldr	r1, [pc, #12]	@ (8006c1c <stdio_exit_handler+0x10>)
 8006c10:	4803      	ldr	r0, [pc, #12]	@ (8006c20 <stdio_exit_handler+0x14>)
 8006c12:	f000 b869 	b.w	8006ce8 <_fwalk_sglue>
 8006c16:	bf00      	nop
 8006c18:	200000cc 	.word	0x200000cc
 8006c1c:	080081f9 	.word	0x080081f9
 8006c20:	20000248 	.word	0x20000248

08006c24 <cleanup_stdio>:
 8006c24:	6841      	ldr	r1, [r0, #4]
 8006c26:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <cleanup_stdio+0x34>)
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	d001      	beq.n	8006c34 <cleanup_stdio+0x10>
 8006c30:	f001 fae2 	bl	80081f8 <_fflush_r>
 8006c34:	68a1      	ldr	r1, [r4, #8]
 8006c36:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <cleanup_stdio+0x38>)
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <cleanup_stdio+0x1e>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f001 fadb 	bl	80081f8 <_fflush_r>
 8006c42:	68e1      	ldr	r1, [r4, #12]
 8006c44:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <cleanup_stdio+0x3c>)
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d004      	beq.n	8006c54 <cleanup_stdio+0x30>
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c50:	f001 bad2 	b.w	80081f8 <_fflush_r>
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	bf00      	nop
 8006c58:	20018ca4 	.word	0x20018ca4
 8006c5c:	20018d0c 	.word	0x20018d0c
 8006c60:	20018d74 	.word	0x20018d74

08006c64 <global_stdio_init.part.0>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <global_stdio_init.part.0+0x30>)
 8006c68:	4c0b      	ldr	r4, [pc, #44]	@ (8006c98 <global_stdio_init.part.0+0x34>)
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c9c <global_stdio_init.part.0+0x38>)
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	2200      	movs	r2, #0
 8006c72:	2104      	movs	r1, #4
 8006c74:	f7ff ff94 	bl	8006ba0 <std>
 8006c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2109      	movs	r1, #9
 8006c80:	f7ff ff8e 	bl	8006ba0 <std>
 8006c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c88:	2202      	movs	r2, #2
 8006c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8e:	2112      	movs	r1, #18
 8006c90:	f7ff bf86 	b.w	8006ba0 <std>
 8006c94:	20018ddc 	.word	0x20018ddc
 8006c98:	20018ca4 	.word	0x20018ca4
 8006c9c:	08006c0d 	.word	0x08006c0d

08006ca0 <__sfp_lock_acquire>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	@ (8006ca8 <__sfp_lock_acquire+0x8>)
 8006ca2:	f000 b90e 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	20018de5 	.word	0x20018de5

08006cac <__sfp_lock_release>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__sfp_lock_release+0x8>)
 8006cae:	f000 b909 	b.w	8006ec4 <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20018de5 	.word	0x20018de5

08006cb8 <__sinit>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4604      	mov	r4, r0
 8006cbc:	f7ff fff0 	bl	8006ca0 <__sfp_lock_acquire>
 8006cc0:	6a23      	ldr	r3, [r4, #32]
 8006cc2:	b11b      	cbz	r3, 8006ccc <__sinit+0x14>
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f7ff bff0 	b.w	8006cac <__sfp_lock_release>
 8006ccc:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__sinit+0x28>)
 8006cce:	6223      	str	r3, [r4, #32]
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <__sinit+0x2c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f5      	bne.n	8006cc4 <__sinit+0xc>
 8006cd8:	f7ff ffc4 	bl	8006c64 <global_stdio_init.part.0>
 8006cdc:	e7f2      	b.n	8006cc4 <__sinit+0xc>
 8006cde:	bf00      	nop
 8006ce0:	08006c25 	.word	0x08006c25
 8006ce4:	20018ddc 	.word	0x20018ddc

08006ce8 <_fwalk_sglue>:
 8006ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4607      	mov	r7, r0
 8006cee:	4688      	mov	r8, r1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cfc:	d505      	bpl.n	8006d0a <_fwalk_sglue+0x22>
 8006cfe:	6824      	ldr	r4, [r4, #0]
 8006d00:	2c00      	cmp	r4, #0
 8006d02:	d1f7      	bne.n	8006cf4 <_fwalk_sglue+0xc>
 8006d04:	4630      	mov	r0, r6
 8006d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d907      	bls.n	8006d20 <_fwalk_sglue+0x38>
 8006d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d14:	3301      	adds	r3, #1
 8006d16:	d003      	beq.n	8006d20 <_fwalk_sglue+0x38>
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	47c0      	blx	r8
 8006d1e:	4306      	orrs	r6, r0
 8006d20:	3568      	adds	r5, #104	@ 0x68
 8006d22:	e7e9      	b.n	8006cf8 <_fwalk_sglue+0x10>

08006d24 <__sread>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	460c      	mov	r4, r1
 8006d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2c:	f000 f87a 	bl	8006e24 <_read_r>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	bfab      	itete	ge
 8006d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d36:	89a3      	ldrhlt	r3, [r4, #12]
 8006d38:	181b      	addge	r3, r3, r0
 8006d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d3e:	bfac      	ite	ge
 8006d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d42:	81a3      	strhlt	r3, [r4, #12]
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <__swrite>:
 8006d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4a:	461f      	mov	r7, r3
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	05db      	lsls	r3, r3, #23
 8006d50:	4605      	mov	r5, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	4616      	mov	r6, r2
 8006d56:	d505      	bpl.n	8006d64 <__swrite+0x1e>
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f000 f84e 	bl	8006e00 <_lseek_r>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	4632      	mov	r2, r6
 8006d72:	463b      	mov	r3, r7
 8006d74:	4628      	mov	r0, r5
 8006d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	f000 b865 	b.w	8006e48 <_write_r>

08006d7e <__sseek>:
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	460c      	mov	r4, r1
 8006d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d86:	f000 f83b 	bl	8006e00 <_lseek_r>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	bf15      	itete	ne
 8006d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d9a:	81a3      	strheq	r3, [r4, #12]
 8006d9c:	bf18      	it	ne
 8006d9e:	81a3      	strhne	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__sclose>:
 8006da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da6:	f000 b81b 	b.w	8006de0 <_close_r>

08006daa <memset>:
 8006daa:	4402      	add	r2, r0
 8006dac:	4603      	mov	r3, r0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d100      	bne.n	8006db4 <memset+0xa>
 8006db2:	4770      	bx	lr
 8006db4:	f803 1b01 	strb.w	r1, [r3], #1
 8006db8:	e7f9      	b.n	8006dae <memset+0x4>

08006dba <strncmp>:
 8006dba:	b510      	push	{r4, lr}
 8006dbc:	b16a      	cbz	r2, 8006dda <strncmp+0x20>
 8006dbe:	3901      	subs	r1, #1
 8006dc0:	1884      	adds	r4, r0, r2
 8006dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d103      	bne.n	8006dd6 <strncmp+0x1c>
 8006dce:	42a0      	cmp	r0, r4
 8006dd0:	d001      	beq.n	8006dd6 <strncmp+0x1c>
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d1f5      	bne.n	8006dc2 <strncmp+0x8>
 8006dd6:	1ad0      	subs	r0, r2, r3
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	4610      	mov	r0, r2
 8006ddc:	e7fc      	b.n	8006dd8 <strncmp+0x1e>
	...

08006de0 <_close_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d06      	ldr	r5, [pc, #24]	@ (8006dfc <_close_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fb fa47 	bl	800227e <_close>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_close_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_close_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20018de0 	.word	0x20018de0

08006e00 <_lseek_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d07      	ldr	r5, [pc, #28]	@ (8006e20 <_lseek_r+0x20>)
 8006e04:	4604      	mov	r4, r0
 8006e06:	4608      	mov	r0, r1
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f7fb fa5c 	bl	80022cc <_lseek>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_lseek_r+0x1e>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_lseek_r+0x1e>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	20018de0 	.word	0x20018de0

08006e24 <_read_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	@ (8006e44 <_read_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fb f9ea 	bl	800220c <_read>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_read_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_read_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20018de0 	.word	0x20018de0

08006e48 <_write_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d07      	ldr	r5, [pc, #28]	@ (8006e68 <_write_r+0x20>)
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fb f9f5 	bl	8002246 <_write>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_write_r+0x1e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_write_r+0x1e>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	20018de0 	.word	0x20018de0

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	@ (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000244 	.word	0x20000244

08006e78 <__libc_init_array>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006eb0 <__libc_init_array+0x38>)
 8006e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb4 <__libc_init_array+0x3c>)
 8006e7e:	1b64      	subs	r4, r4, r5
 8006e80:	10a4      	asrs	r4, r4, #2
 8006e82:	2600      	movs	r6, #0
 8006e84:	42a6      	cmp	r6, r4
 8006e86:	d109      	bne.n	8006e9c <__libc_init_array+0x24>
 8006e88:	4d0b      	ldr	r5, [pc, #44]	@ (8006eb8 <__libc_init_array+0x40>)
 8006e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006ebc <__libc_init_array+0x44>)
 8006e8c:	f001 fe68 	bl	8008b60 <_init>
 8006e90:	1b64      	subs	r4, r4, r5
 8006e92:	10a4      	asrs	r4, r4, #2
 8006e94:	2600      	movs	r6, #0
 8006e96:	42a6      	cmp	r6, r4
 8006e98:	d105      	bne.n	8006ea6 <__libc_init_array+0x2e>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea0:	4798      	blx	r3
 8006ea2:	3601      	adds	r6, #1
 8006ea4:	e7ee      	b.n	8006e84 <__libc_init_array+0xc>
 8006ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eaa:	4798      	blx	r3
 8006eac:	3601      	adds	r6, #1
 8006eae:	e7f2      	b.n	8006e96 <__libc_init_array+0x1e>
 8006eb0:	080092f0 	.word	0x080092f0
 8006eb4:	080092f0 	.word	0x080092f0
 8006eb8:	080092f0 	.word	0x080092f0
 8006ebc:	080092f4 	.word	0x080092f4

08006ec0 <__retarget_lock_init_recursive>:
 8006ec0:	4770      	bx	lr

08006ec2 <__retarget_lock_acquire_recursive>:
 8006ec2:	4770      	bx	lr

08006ec4 <__retarget_lock_release_recursive>:
 8006ec4:	4770      	bx	lr

08006ec6 <memcpy>:
 8006ec6:	440a      	add	r2, r1
 8006ec8:	4291      	cmp	r1, r2
 8006eca:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ece:	d100      	bne.n	8006ed2 <memcpy+0xc>
 8006ed0:	4770      	bx	lr
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006edc:	4291      	cmp	r1, r2
 8006ede:	d1f9      	bne.n	8006ed4 <memcpy+0xe>
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	0000      	movs	r0, r0
 8006ee4:	0000      	movs	r0, r0
	...

08006ee8 <nan>:
 8006ee8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ef0 <nan+0x8>
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	00000000 	.word	0x00000000
 8006ef4:	7ff80000 	.word	0x7ff80000

08006ef8 <_free_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4605      	mov	r5, r0
 8006efc:	2900      	cmp	r1, #0
 8006efe:	d041      	beq.n	8006f84 <_free_r+0x8c>
 8006f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f04:	1f0c      	subs	r4, r1, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bfb8      	it	lt
 8006f0a:	18e4      	addlt	r4, r4, r3
 8006f0c:	f000 fc2c 	bl	8007768 <__malloc_lock>
 8006f10:	4a1d      	ldr	r2, [pc, #116]	@ (8006f88 <_free_r+0x90>)
 8006f12:	6813      	ldr	r3, [r2, #0]
 8006f14:	b933      	cbnz	r3, 8006f24 <_free_r+0x2c>
 8006f16:	6063      	str	r3, [r4, #4]
 8006f18:	6014      	str	r4, [r2, #0]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f20:	f000 bc28 	b.w	8007774 <__malloc_unlock>
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d908      	bls.n	8006f3a <_free_r+0x42>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	1821      	adds	r1, r4, r0
 8006f2c:	428b      	cmp	r3, r1
 8006f2e:	bf01      	itttt	eq
 8006f30:	6819      	ldreq	r1, [r3, #0]
 8006f32:	685b      	ldreq	r3, [r3, #4]
 8006f34:	1809      	addeq	r1, r1, r0
 8006f36:	6021      	streq	r1, [r4, #0]
 8006f38:	e7ed      	b.n	8006f16 <_free_r+0x1e>
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	b10b      	cbz	r3, 8006f44 <_free_r+0x4c>
 8006f40:	42a3      	cmp	r3, r4
 8006f42:	d9fa      	bls.n	8006f3a <_free_r+0x42>
 8006f44:	6811      	ldr	r1, [r2, #0]
 8006f46:	1850      	adds	r0, r2, r1
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d10b      	bne.n	8006f64 <_free_r+0x6c>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	4401      	add	r1, r0
 8006f50:	1850      	adds	r0, r2, r1
 8006f52:	4283      	cmp	r3, r0
 8006f54:	6011      	str	r1, [r2, #0]
 8006f56:	d1e0      	bne.n	8006f1a <_free_r+0x22>
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	6053      	str	r3, [r2, #4]
 8006f5e:	4408      	add	r0, r1
 8006f60:	6010      	str	r0, [r2, #0]
 8006f62:	e7da      	b.n	8006f1a <_free_r+0x22>
 8006f64:	d902      	bls.n	8006f6c <_free_r+0x74>
 8006f66:	230c      	movs	r3, #12
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	e7d6      	b.n	8006f1a <_free_r+0x22>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	1821      	adds	r1, r4, r0
 8006f70:	428b      	cmp	r3, r1
 8006f72:	bf04      	itt	eq
 8006f74:	6819      	ldreq	r1, [r3, #0]
 8006f76:	685b      	ldreq	r3, [r3, #4]
 8006f78:	6063      	str	r3, [r4, #4]
 8006f7a:	bf04      	itt	eq
 8006f7c:	1809      	addeq	r1, r1, r0
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	6054      	str	r4, [r2, #4]
 8006f82:	e7ca      	b.n	8006f1a <_free_r+0x22>
 8006f84:	bd38      	pop	{r3, r4, r5, pc}
 8006f86:	bf00      	nop
 8006f88:	20018dec 	.word	0x20018dec

08006f8c <rshift>:
 8006f8c:	6903      	ldr	r3, [r0, #16]
 8006f8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f9a:	f100 0414 	add.w	r4, r0, #20
 8006f9e:	dd45      	ble.n	800702c <rshift+0xa0>
 8006fa0:	f011 011f 	ands.w	r1, r1, #31
 8006fa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006fa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006fac:	d10c      	bne.n	8006fc8 <rshift+0x3c>
 8006fae:	f100 0710 	add.w	r7, r0, #16
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	42b1      	cmp	r1, r6
 8006fb6:	d334      	bcc.n	8007022 <rshift+0x96>
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	1eea      	subs	r2, r5, #3
 8006fbe:	4296      	cmp	r6, r2
 8006fc0:	bf38      	it	cc
 8006fc2:	2300      	movcc	r3, #0
 8006fc4:	4423      	add	r3, r4
 8006fc6:	e015      	b.n	8006ff4 <rshift+0x68>
 8006fc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006fcc:	f1c1 0820 	rsb	r8, r1, #32
 8006fd0:	40cf      	lsrs	r7, r1
 8006fd2:	f105 0e04 	add.w	lr, r5, #4
 8006fd6:	46a1      	mov	r9, r4
 8006fd8:	4576      	cmp	r6, lr
 8006fda:	46f4      	mov	ip, lr
 8006fdc:	d815      	bhi.n	800700a <rshift+0x7e>
 8006fde:	1a9a      	subs	r2, r3, r2
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	3a04      	subs	r2, #4
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	42ae      	cmp	r6, r5
 8006fe8:	bf38      	it	cc
 8006fea:	2200      	movcc	r2, #0
 8006fec:	18a3      	adds	r3, r4, r2
 8006fee:	50a7      	str	r7, [r4, r2]
 8006ff0:	b107      	cbz	r7, 8006ff4 <rshift+0x68>
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	1b1a      	subs	r2, r3, r4
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ffc:	bf08      	it	eq
 8006ffe:	2300      	moveq	r3, #0
 8007000:	6102      	str	r2, [r0, #16]
 8007002:	bf08      	it	eq
 8007004:	6143      	streq	r3, [r0, #20]
 8007006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700a:	f8dc c000 	ldr.w	ip, [ip]
 800700e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007012:	ea4c 0707 	orr.w	r7, ip, r7
 8007016:	f849 7b04 	str.w	r7, [r9], #4
 800701a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800701e:	40cf      	lsrs	r7, r1
 8007020:	e7da      	b.n	8006fd8 <rshift+0x4c>
 8007022:	f851 cb04 	ldr.w	ip, [r1], #4
 8007026:	f847 cf04 	str.w	ip, [r7, #4]!
 800702a:	e7c3      	b.n	8006fb4 <rshift+0x28>
 800702c:	4623      	mov	r3, r4
 800702e:	e7e1      	b.n	8006ff4 <rshift+0x68>

08007030 <__hexdig_fun>:
 8007030:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007034:	2b09      	cmp	r3, #9
 8007036:	d802      	bhi.n	800703e <__hexdig_fun+0xe>
 8007038:	3820      	subs	r0, #32
 800703a:	b2c0      	uxtb	r0, r0
 800703c:	4770      	bx	lr
 800703e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007042:	2b05      	cmp	r3, #5
 8007044:	d801      	bhi.n	800704a <__hexdig_fun+0x1a>
 8007046:	3847      	subs	r0, #71	@ 0x47
 8007048:	e7f7      	b.n	800703a <__hexdig_fun+0xa>
 800704a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800704e:	2b05      	cmp	r3, #5
 8007050:	d801      	bhi.n	8007056 <__hexdig_fun+0x26>
 8007052:	3827      	subs	r0, #39	@ 0x27
 8007054:	e7f1      	b.n	800703a <__hexdig_fun+0xa>
 8007056:	2000      	movs	r0, #0
 8007058:	4770      	bx	lr
	...

0800705c <__gethex>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	b085      	sub	sp, #20
 8007062:	468a      	mov	sl, r1
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	680b      	ldr	r3, [r1, #0]
 8007068:	9001      	str	r0, [sp, #4]
 800706a:	4690      	mov	r8, r2
 800706c:	1c9c      	adds	r4, r3, #2
 800706e:	46a1      	mov	r9, r4
 8007070:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007074:	2830      	cmp	r0, #48	@ 0x30
 8007076:	d0fa      	beq.n	800706e <__gethex+0x12>
 8007078:	eba9 0303 	sub.w	r3, r9, r3
 800707c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007080:	f7ff ffd6 	bl	8007030 <__hexdig_fun>
 8007084:	4605      	mov	r5, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d168      	bne.n	800715c <__gethex+0x100>
 800708a:	49a0      	ldr	r1, [pc, #640]	@ (800730c <__gethex+0x2b0>)
 800708c:	2201      	movs	r2, #1
 800708e:	4648      	mov	r0, r9
 8007090:	f7ff fe93 	bl	8006dba <strncmp>
 8007094:	4607      	mov	r7, r0
 8007096:	2800      	cmp	r0, #0
 8007098:	d167      	bne.n	800716a <__gethex+0x10e>
 800709a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800709e:	4626      	mov	r6, r4
 80070a0:	f7ff ffc6 	bl	8007030 <__hexdig_fun>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d062      	beq.n	800716e <__gethex+0x112>
 80070a8:	4623      	mov	r3, r4
 80070aa:	7818      	ldrb	r0, [r3, #0]
 80070ac:	2830      	cmp	r0, #48	@ 0x30
 80070ae:	4699      	mov	r9, r3
 80070b0:	f103 0301 	add.w	r3, r3, #1
 80070b4:	d0f9      	beq.n	80070aa <__gethex+0x4e>
 80070b6:	f7ff ffbb 	bl	8007030 <__hexdig_fun>
 80070ba:	fab0 f580 	clz	r5, r0
 80070be:	096d      	lsrs	r5, r5, #5
 80070c0:	f04f 0b01 	mov.w	fp, #1
 80070c4:	464a      	mov	r2, r9
 80070c6:	4616      	mov	r6, r2
 80070c8:	3201      	adds	r2, #1
 80070ca:	7830      	ldrb	r0, [r6, #0]
 80070cc:	f7ff ffb0 	bl	8007030 <__hexdig_fun>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1f8      	bne.n	80070c6 <__gethex+0x6a>
 80070d4:	498d      	ldr	r1, [pc, #564]	@ (800730c <__gethex+0x2b0>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff fe6e 	bl	8006dba <strncmp>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d13f      	bne.n	8007162 <__gethex+0x106>
 80070e2:	b944      	cbnz	r4, 80070f6 <__gethex+0x9a>
 80070e4:	1c74      	adds	r4, r6, #1
 80070e6:	4622      	mov	r2, r4
 80070e8:	4616      	mov	r6, r2
 80070ea:	3201      	adds	r2, #1
 80070ec:	7830      	ldrb	r0, [r6, #0]
 80070ee:	f7ff ff9f 	bl	8007030 <__hexdig_fun>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1f8      	bne.n	80070e8 <__gethex+0x8c>
 80070f6:	1ba4      	subs	r4, r4, r6
 80070f8:	00a7      	lsls	r7, r4, #2
 80070fa:	7833      	ldrb	r3, [r6, #0]
 80070fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007100:	2b50      	cmp	r3, #80	@ 0x50
 8007102:	d13e      	bne.n	8007182 <__gethex+0x126>
 8007104:	7873      	ldrb	r3, [r6, #1]
 8007106:	2b2b      	cmp	r3, #43	@ 0x2b
 8007108:	d033      	beq.n	8007172 <__gethex+0x116>
 800710a:	2b2d      	cmp	r3, #45	@ 0x2d
 800710c:	d034      	beq.n	8007178 <__gethex+0x11c>
 800710e:	1c71      	adds	r1, r6, #1
 8007110:	2400      	movs	r4, #0
 8007112:	7808      	ldrb	r0, [r1, #0]
 8007114:	f7ff ff8c 	bl	8007030 <__hexdig_fun>
 8007118:	1e43      	subs	r3, r0, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b18      	cmp	r3, #24
 800711e:	d830      	bhi.n	8007182 <__gethex+0x126>
 8007120:	f1a0 0210 	sub.w	r2, r0, #16
 8007124:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007128:	f7ff ff82 	bl	8007030 <__hexdig_fun>
 800712c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007130:	fa5f fc8c 	uxtb.w	ip, ip
 8007134:	f1bc 0f18 	cmp.w	ip, #24
 8007138:	f04f 030a 	mov.w	r3, #10
 800713c:	d91e      	bls.n	800717c <__gethex+0x120>
 800713e:	b104      	cbz	r4, 8007142 <__gethex+0xe6>
 8007140:	4252      	negs	r2, r2
 8007142:	4417      	add	r7, r2
 8007144:	f8ca 1000 	str.w	r1, [sl]
 8007148:	b1ed      	cbz	r5, 8007186 <__gethex+0x12a>
 800714a:	f1bb 0f00 	cmp.w	fp, #0
 800714e:	bf0c      	ite	eq
 8007150:	2506      	moveq	r5, #6
 8007152:	2500      	movne	r5, #0
 8007154:	4628      	mov	r0, r5
 8007156:	b005      	add	sp, #20
 8007158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	2500      	movs	r5, #0
 800715e:	462c      	mov	r4, r5
 8007160:	e7b0      	b.n	80070c4 <__gethex+0x68>
 8007162:	2c00      	cmp	r4, #0
 8007164:	d1c7      	bne.n	80070f6 <__gethex+0x9a>
 8007166:	4627      	mov	r7, r4
 8007168:	e7c7      	b.n	80070fa <__gethex+0x9e>
 800716a:	464e      	mov	r6, r9
 800716c:	462f      	mov	r7, r5
 800716e:	2501      	movs	r5, #1
 8007170:	e7c3      	b.n	80070fa <__gethex+0x9e>
 8007172:	2400      	movs	r4, #0
 8007174:	1cb1      	adds	r1, r6, #2
 8007176:	e7cc      	b.n	8007112 <__gethex+0xb6>
 8007178:	2401      	movs	r4, #1
 800717a:	e7fb      	b.n	8007174 <__gethex+0x118>
 800717c:	fb03 0002 	mla	r0, r3, r2, r0
 8007180:	e7ce      	b.n	8007120 <__gethex+0xc4>
 8007182:	4631      	mov	r1, r6
 8007184:	e7de      	b.n	8007144 <__gethex+0xe8>
 8007186:	eba6 0309 	sub.w	r3, r6, r9
 800718a:	3b01      	subs	r3, #1
 800718c:	4629      	mov	r1, r5
 800718e:	2b07      	cmp	r3, #7
 8007190:	dc0a      	bgt.n	80071a8 <__gethex+0x14c>
 8007192:	9801      	ldr	r0, [sp, #4]
 8007194:	f000 faf4 	bl	8007780 <_Balloc>
 8007198:	4604      	mov	r4, r0
 800719a:	b940      	cbnz	r0, 80071ae <__gethex+0x152>
 800719c:	4b5c      	ldr	r3, [pc, #368]	@ (8007310 <__gethex+0x2b4>)
 800719e:	4602      	mov	r2, r0
 80071a0:	21e4      	movs	r1, #228	@ 0xe4
 80071a2:	485c      	ldr	r0, [pc, #368]	@ (8007314 <__gethex+0x2b8>)
 80071a4:	f001 f860 	bl	8008268 <__assert_func>
 80071a8:	3101      	adds	r1, #1
 80071aa:	105b      	asrs	r3, r3, #1
 80071ac:	e7ef      	b.n	800718e <__gethex+0x132>
 80071ae:	f100 0a14 	add.w	sl, r0, #20
 80071b2:	2300      	movs	r3, #0
 80071b4:	4655      	mov	r5, sl
 80071b6:	469b      	mov	fp, r3
 80071b8:	45b1      	cmp	r9, r6
 80071ba:	d337      	bcc.n	800722c <__gethex+0x1d0>
 80071bc:	f845 bb04 	str.w	fp, [r5], #4
 80071c0:	eba5 050a 	sub.w	r5, r5, sl
 80071c4:	10ad      	asrs	r5, r5, #2
 80071c6:	6125      	str	r5, [r4, #16]
 80071c8:	4658      	mov	r0, fp
 80071ca:	f000 fbcb 	bl	8007964 <__hi0bits>
 80071ce:	016d      	lsls	r5, r5, #5
 80071d0:	f8d8 6000 	ldr.w	r6, [r8]
 80071d4:	1a2d      	subs	r5, r5, r0
 80071d6:	42b5      	cmp	r5, r6
 80071d8:	dd54      	ble.n	8007284 <__gethex+0x228>
 80071da:	1bad      	subs	r5, r5, r6
 80071dc:	4629      	mov	r1, r5
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 ff57 	bl	8008092 <__any_on>
 80071e4:	4681      	mov	r9, r0
 80071e6:	b178      	cbz	r0, 8007208 <__gethex+0x1ac>
 80071e8:	1e6b      	subs	r3, r5, #1
 80071ea:	1159      	asrs	r1, r3, #5
 80071ec:	f003 021f 	and.w	r2, r3, #31
 80071f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80071f4:	f04f 0901 	mov.w	r9, #1
 80071f8:	fa09 f202 	lsl.w	r2, r9, r2
 80071fc:	420a      	tst	r2, r1
 80071fe:	d003      	beq.n	8007208 <__gethex+0x1ac>
 8007200:	454b      	cmp	r3, r9
 8007202:	dc36      	bgt.n	8007272 <__gethex+0x216>
 8007204:	f04f 0902 	mov.w	r9, #2
 8007208:	4629      	mov	r1, r5
 800720a:	4620      	mov	r0, r4
 800720c:	f7ff febe 	bl	8006f8c <rshift>
 8007210:	442f      	add	r7, r5
 8007212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007216:	42bb      	cmp	r3, r7
 8007218:	da42      	bge.n	80072a0 <__gethex+0x244>
 800721a:	9801      	ldr	r0, [sp, #4]
 800721c:	4621      	mov	r1, r4
 800721e:	f000 faef 	bl	8007800 <_Bfree>
 8007222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007224:	2300      	movs	r3, #0
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	25a3      	movs	r5, #163	@ 0xa3
 800722a:	e793      	b.n	8007154 <__gethex+0xf8>
 800722c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007230:	2a2e      	cmp	r2, #46	@ 0x2e
 8007232:	d012      	beq.n	800725a <__gethex+0x1fe>
 8007234:	2b20      	cmp	r3, #32
 8007236:	d104      	bne.n	8007242 <__gethex+0x1e6>
 8007238:	f845 bb04 	str.w	fp, [r5], #4
 800723c:	f04f 0b00 	mov.w	fp, #0
 8007240:	465b      	mov	r3, fp
 8007242:	7830      	ldrb	r0, [r6, #0]
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	f7ff fef3 	bl	8007030 <__hexdig_fun>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	f000 000f 	and.w	r0, r0, #15
 8007250:	4098      	lsls	r0, r3
 8007252:	ea4b 0b00 	orr.w	fp, fp, r0
 8007256:	3304      	adds	r3, #4
 8007258:	e7ae      	b.n	80071b8 <__gethex+0x15c>
 800725a:	45b1      	cmp	r9, r6
 800725c:	d8ea      	bhi.n	8007234 <__gethex+0x1d8>
 800725e:	492b      	ldr	r1, [pc, #172]	@ (800730c <__gethex+0x2b0>)
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	4630      	mov	r0, r6
 8007266:	f7ff fda8 	bl	8006dba <strncmp>
 800726a:	9b03      	ldr	r3, [sp, #12]
 800726c:	2800      	cmp	r0, #0
 800726e:	d1e1      	bne.n	8007234 <__gethex+0x1d8>
 8007270:	e7a2      	b.n	80071b8 <__gethex+0x15c>
 8007272:	1ea9      	subs	r1, r5, #2
 8007274:	4620      	mov	r0, r4
 8007276:	f000 ff0c 	bl	8008092 <__any_on>
 800727a:	2800      	cmp	r0, #0
 800727c:	d0c2      	beq.n	8007204 <__gethex+0x1a8>
 800727e:	f04f 0903 	mov.w	r9, #3
 8007282:	e7c1      	b.n	8007208 <__gethex+0x1ac>
 8007284:	da09      	bge.n	800729a <__gethex+0x23e>
 8007286:	1b75      	subs	r5, r6, r5
 8007288:	4621      	mov	r1, r4
 800728a:	9801      	ldr	r0, [sp, #4]
 800728c:	462a      	mov	r2, r5
 800728e:	f000 fcc7 	bl	8007c20 <__lshift>
 8007292:	1b7f      	subs	r7, r7, r5
 8007294:	4604      	mov	r4, r0
 8007296:	f100 0a14 	add.w	sl, r0, #20
 800729a:	f04f 0900 	mov.w	r9, #0
 800729e:	e7b8      	b.n	8007212 <__gethex+0x1b6>
 80072a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80072a4:	42bd      	cmp	r5, r7
 80072a6:	dd6f      	ble.n	8007388 <__gethex+0x32c>
 80072a8:	1bed      	subs	r5, r5, r7
 80072aa:	42ae      	cmp	r6, r5
 80072ac:	dc34      	bgt.n	8007318 <__gethex+0x2bc>
 80072ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d022      	beq.n	80072fc <__gethex+0x2a0>
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d024      	beq.n	8007304 <__gethex+0x2a8>
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d115      	bne.n	80072ea <__gethex+0x28e>
 80072be:	42ae      	cmp	r6, r5
 80072c0:	d113      	bne.n	80072ea <__gethex+0x28e>
 80072c2:	2e01      	cmp	r6, #1
 80072c4:	d10b      	bne.n	80072de <__gethex+0x282>
 80072c6:	9a02      	ldr	r2, [sp, #8]
 80072c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	2301      	movs	r3, #1
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	f8ca 3000 	str.w	r3, [sl]
 80072d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d8:	2562      	movs	r5, #98	@ 0x62
 80072da:	601c      	str	r4, [r3, #0]
 80072dc:	e73a      	b.n	8007154 <__gethex+0xf8>
 80072de:	1e71      	subs	r1, r6, #1
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fed6 	bl	8008092 <__any_on>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d1ed      	bne.n	80072c6 <__gethex+0x26a>
 80072ea:	9801      	ldr	r0, [sp, #4]
 80072ec:	4621      	mov	r1, r4
 80072ee:	f000 fa87 	bl	8007800 <_Bfree>
 80072f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072f4:	2300      	movs	r3, #0
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	2550      	movs	r5, #80	@ 0x50
 80072fa:	e72b      	b.n	8007154 <__gethex+0xf8>
 80072fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f3      	bne.n	80072ea <__gethex+0x28e>
 8007302:	e7e0      	b.n	80072c6 <__gethex+0x26a>
 8007304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1dd      	bne.n	80072c6 <__gethex+0x26a>
 800730a:	e7ee      	b.n	80072ea <__gethex+0x28e>
 800730c:	08008f30 	.word	0x08008f30
 8007310:	08008f46 	.word	0x08008f46
 8007314:	08008f57 	.word	0x08008f57
 8007318:	1e6f      	subs	r7, r5, #1
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	d130      	bne.n	8007382 <__gethex+0x326>
 8007320:	b127      	cbz	r7, 800732c <__gethex+0x2d0>
 8007322:	4639      	mov	r1, r7
 8007324:	4620      	mov	r0, r4
 8007326:	f000 feb4 	bl	8008092 <__any_on>
 800732a:	4681      	mov	r9, r0
 800732c:	117a      	asrs	r2, r7, #5
 800732e:	2301      	movs	r3, #1
 8007330:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007334:	f007 071f 	and.w	r7, r7, #31
 8007338:	40bb      	lsls	r3, r7
 800733a:	4213      	tst	r3, r2
 800733c:	4629      	mov	r1, r5
 800733e:	4620      	mov	r0, r4
 8007340:	bf18      	it	ne
 8007342:	f049 0902 	orrne.w	r9, r9, #2
 8007346:	f7ff fe21 	bl	8006f8c <rshift>
 800734a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800734e:	1b76      	subs	r6, r6, r5
 8007350:	2502      	movs	r5, #2
 8007352:	f1b9 0f00 	cmp.w	r9, #0
 8007356:	d047      	beq.n	80073e8 <__gethex+0x38c>
 8007358:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d015      	beq.n	800738c <__gethex+0x330>
 8007360:	2b03      	cmp	r3, #3
 8007362:	d017      	beq.n	8007394 <__gethex+0x338>
 8007364:	2b01      	cmp	r3, #1
 8007366:	d109      	bne.n	800737c <__gethex+0x320>
 8007368:	f019 0f02 	tst.w	r9, #2
 800736c:	d006      	beq.n	800737c <__gethex+0x320>
 800736e:	f8da 3000 	ldr.w	r3, [sl]
 8007372:	ea49 0903 	orr.w	r9, r9, r3
 8007376:	f019 0f01 	tst.w	r9, #1
 800737a:	d10e      	bne.n	800739a <__gethex+0x33e>
 800737c:	f045 0510 	orr.w	r5, r5, #16
 8007380:	e032      	b.n	80073e8 <__gethex+0x38c>
 8007382:	f04f 0901 	mov.w	r9, #1
 8007386:	e7d1      	b.n	800732c <__gethex+0x2d0>
 8007388:	2501      	movs	r5, #1
 800738a:	e7e2      	b.n	8007352 <__gethex+0x2f6>
 800738c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800738e:	f1c3 0301 	rsb	r3, r3, #1
 8007392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <__gethex+0x320>
 800739a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800739e:	f104 0314 	add.w	r3, r4, #20
 80073a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80073a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80073aa:	f04f 0c00 	mov.w	ip, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80073b8:	d01b      	beq.n	80073f2 <__gethex+0x396>
 80073ba:	3201      	adds	r2, #1
 80073bc:	6002      	str	r2, [r0, #0]
 80073be:	2d02      	cmp	r5, #2
 80073c0:	f104 0314 	add.w	r3, r4, #20
 80073c4:	d13c      	bne.n	8007440 <__gethex+0x3e4>
 80073c6:	f8d8 2000 	ldr.w	r2, [r8]
 80073ca:	3a01      	subs	r2, #1
 80073cc:	42b2      	cmp	r2, r6
 80073ce:	d109      	bne.n	80073e4 <__gethex+0x388>
 80073d0:	1171      	asrs	r1, r6, #5
 80073d2:	2201      	movs	r2, #1
 80073d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073d8:	f006 061f 	and.w	r6, r6, #31
 80073dc:	fa02 f606 	lsl.w	r6, r2, r6
 80073e0:	421e      	tst	r6, r3
 80073e2:	d13a      	bne.n	800745a <__gethex+0x3fe>
 80073e4:	f045 0520 	orr.w	r5, r5, #32
 80073e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ea:	601c      	str	r4, [r3, #0]
 80073ec:	9b02      	ldr	r3, [sp, #8]
 80073ee:	601f      	str	r7, [r3, #0]
 80073f0:	e6b0      	b.n	8007154 <__gethex+0xf8>
 80073f2:	4299      	cmp	r1, r3
 80073f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80073f8:	d8d9      	bhi.n	80073ae <__gethex+0x352>
 80073fa:	68a3      	ldr	r3, [r4, #8]
 80073fc:	459b      	cmp	fp, r3
 80073fe:	db17      	blt.n	8007430 <__gethex+0x3d4>
 8007400:	6861      	ldr	r1, [r4, #4]
 8007402:	9801      	ldr	r0, [sp, #4]
 8007404:	3101      	adds	r1, #1
 8007406:	f000 f9bb 	bl	8007780 <_Balloc>
 800740a:	4681      	mov	r9, r0
 800740c:	b918      	cbnz	r0, 8007416 <__gethex+0x3ba>
 800740e:	4b1a      	ldr	r3, [pc, #104]	@ (8007478 <__gethex+0x41c>)
 8007410:	4602      	mov	r2, r0
 8007412:	2184      	movs	r1, #132	@ 0x84
 8007414:	e6c5      	b.n	80071a2 <__gethex+0x146>
 8007416:	6922      	ldr	r2, [r4, #16]
 8007418:	3202      	adds	r2, #2
 800741a:	f104 010c 	add.w	r1, r4, #12
 800741e:	0092      	lsls	r2, r2, #2
 8007420:	300c      	adds	r0, #12
 8007422:	f7ff fd50 	bl	8006ec6 <memcpy>
 8007426:	4621      	mov	r1, r4
 8007428:	9801      	ldr	r0, [sp, #4]
 800742a:	f000 f9e9 	bl	8007800 <_Bfree>
 800742e:	464c      	mov	r4, r9
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007438:	6122      	str	r2, [r4, #16]
 800743a:	2201      	movs	r2, #1
 800743c:	615a      	str	r2, [r3, #20]
 800743e:	e7be      	b.n	80073be <__gethex+0x362>
 8007440:	6922      	ldr	r2, [r4, #16]
 8007442:	455a      	cmp	r2, fp
 8007444:	dd0b      	ble.n	800745e <__gethex+0x402>
 8007446:	2101      	movs	r1, #1
 8007448:	4620      	mov	r0, r4
 800744a:	f7ff fd9f 	bl	8006f8c <rshift>
 800744e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007452:	3701      	adds	r7, #1
 8007454:	42bb      	cmp	r3, r7
 8007456:	f6ff aee0 	blt.w	800721a <__gethex+0x1be>
 800745a:	2501      	movs	r5, #1
 800745c:	e7c2      	b.n	80073e4 <__gethex+0x388>
 800745e:	f016 061f 	ands.w	r6, r6, #31
 8007462:	d0fa      	beq.n	800745a <__gethex+0x3fe>
 8007464:	4453      	add	r3, sl
 8007466:	f1c6 0620 	rsb	r6, r6, #32
 800746a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800746e:	f000 fa79 	bl	8007964 <__hi0bits>
 8007472:	42b0      	cmp	r0, r6
 8007474:	dbe7      	blt.n	8007446 <__gethex+0x3ea>
 8007476:	e7f0      	b.n	800745a <__gethex+0x3fe>
 8007478:	08008f46 	.word	0x08008f46

0800747c <L_shift>:
 800747c:	f1c2 0208 	rsb	r2, r2, #8
 8007480:	0092      	lsls	r2, r2, #2
 8007482:	b570      	push	{r4, r5, r6, lr}
 8007484:	f1c2 0620 	rsb	r6, r2, #32
 8007488:	6843      	ldr	r3, [r0, #4]
 800748a:	6804      	ldr	r4, [r0, #0]
 800748c:	fa03 f506 	lsl.w	r5, r3, r6
 8007490:	432c      	orrs	r4, r5
 8007492:	40d3      	lsrs	r3, r2
 8007494:	6004      	str	r4, [r0, #0]
 8007496:	f840 3f04 	str.w	r3, [r0, #4]!
 800749a:	4288      	cmp	r0, r1
 800749c:	d3f4      	bcc.n	8007488 <L_shift+0xc>
 800749e:	bd70      	pop	{r4, r5, r6, pc}

080074a0 <__match>:
 80074a0:	b530      	push	{r4, r5, lr}
 80074a2:	6803      	ldr	r3, [r0, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074aa:	b914      	cbnz	r4, 80074b2 <__match+0x12>
 80074ac:	6003      	str	r3, [r0, #0]
 80074ae:	2001      	movs	r0, #1
 80074b0:	bd30      	pop	{r4, r5, pc}
 80074b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80074ba:	2d19      	cmp	r5, #25
 80074bc:	bf98      	it	ls
 80074be:	3220      	addls	r2, #32
 80074c0:	42a2      	cmp	r2, r4
 80074c2:	d0f0      	beq.n	80074a6 <__match+0x6>
 80074c4:	2000      	movs	r0, #0
 80074c6:	e7f3      	b.n	80074b0 <__match+0x10>

080074c8 <__hexnan>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	680b      	ldr	r3, [r1, #0]
 80074ce:	6801      	ldr	r1, [r0, #0]
 80074d0:	115e      	asrs	r6, r3, #5
 80074d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074d6:	f013 031f 	ands.w	r3, r3, #31
 80074da:	b087      	sub	sp, #28
 80074dc:	bf18      	it	ne
 80074de:	3604      	addne	r6, #4
 80074e0:	2500      	movs	r5, #0
 80074e2:	1f37      	subs	r7, r6, #4
 80074e4:	4682      	mov	sl, r0
 80074e6:	4690      	mov	r8, r2
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80074ee:	46b9      	mov	r9, r7
 80074f0:	463c      	mov	r4, r7
 80074f2:	9502      	str	r5, [sp, #8]
 80074f4:	46ab      	mov	fp, r5
 80074f6:	784a      	ldrb	r2, [r1, #1]
 80074f8:	1c4b      	adds	r3, r1, #1
 80074fa:	9303      	str	r3, [sp, #12]
 80074fc:	b342      	cbz	r2, 8007550 <__hexnan+0x88>
 80074fe:	4610      	mov	r0, r2
 8007500:	9105      	str	r1, [sp, #20]
 8007502:	9204      	str	r2, [sp, #16]
 8007504:	f7ff fd94 	bl	8007030 <__hexdig_fun>
 8007508:	2800      	cmp	r0, #0
 800750a:	d151      	bne.n	80075b0 <__hexnan+0xe8>
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	9905      	ldr	r1, [sp, #20]
 8007510:	2a20      	cmp	r2, #32
 8007512:	d818      	bhi.n	8007546 <__hexnan+0x7e>
 8007514:	9b02      	ldr	r3, [sp, #8]
 8007516:	459b      	cmp	fp, r3
 8007518:	dd13      	ble.n	8007542 <__hexnan+0x7a>
 800751a:	454c      	cmp	r4, r9
 800751c:	d206      	bcs.n	800752c <__hexnan+0x64>
 800751e:	2d07      	cmp	r5, #7
 8007520:	dc04      	bgt.n	800752c <__hexnan+0x64>
 8007522:	462a      	mov	r2, r5
 8007524:	4649      	mov	r1, r9
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff ffa8 	bl	800747c <L_shift>
 800752c:	4544      	cmp	r4, r8
 800752e:	d952      	bls.n	80075d6 <__hexnan+0x10e>
 8007530:	2300      	movs	r3, #0
 8007532:	f1a4 0904 	sub.w	r9, r4, #4
 8007536:	f844 3c04 	str.w	r3, [r4, #-4]
 800753a:	f8cd b008 	str.w	fp, [sp, #8]
 800753e:	464c      	mov	r4, r9
 8007540:	461d      	mov	r5, r3
 8007542:	9903      	ldr	r1, [sp, #12]
 8007544:	e7d7      	b.n	80074f6 <__hexnan+0x2e>
 8007546:	2a29      	cmp	r2, #41	@ 0x29
 8007548:	d157      	bne.n	80075fa <__hexnan+0x132>
 800754a:	3102      	adds	r1, #2
 800754c:	f8ca 1000 	str.w	r1, [sl]
 8007550:	f1bb 0f00 	cmp.w	fp, #0
 8007554:	d051      	beq.n	80075fa <__hexnan+0x132>
 8007556:	454c      	cmp	r4, r9
 8007558:	d206      	bcs.n	8007568 <__hexnan+0xa0>
 800755a:	2d07      	cmp	r5, #7
 800755c:	dc04      	bgt.n	8007568 <__hexnan+0xa0>
 800755e:	462a      	mov	r2, r5
 8007560:	4649      	mov	r1, r9
 8007562:	4620      	mov	r0, r4
 8007564:	f7ff ff8a 	bl	800747c <L_shift>
 8007568:	4544      	cmp	r4, r8
 800756a:	d936      	bls.n	80075da <__hexnan+0x112>
 800756c:	f1a8 0204 	sub.w	r2, r8, #4
 8007570:	4623      	mov	r3, r4
 8007572:	f853 1b04 	ldr.w	r1, [r3], #4
 8007576:	f842 1f04 	str.w	r1, [r2, #4]!
 800757a:	429f      	cmp	r7, r3
 800757c:	d2f9      	bcs.n	8007572 <__hexnan+0xaa>
 800757e:	1b3b      	subs	r3, r7, r4
 8007580:	f023 0303 	bic.w	r3, r3, #3
 8007584:	3304      	adds	r3, #4
 8007586:	3401      	adds	r4, #1
 8007588:	3e03      	subs	r6, #3
 800758a:	42b4      	cmp	r4, r6
 800758c:	bf88      	it	hi
 800758e:	2304      	movhi	r3, #4
 8007590:	4443      	add	r3, r8
 8007592:	2200      	movs	r2, #0
 8007594:	f843 2b04 	str.w	r2, [r3], #4
 8007598:	429f      	cmp	r7, r3
 800759a:	d2fb      	bcs.n	8007594 <__hexnan+0xcc>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	b91b      	cbnz	r3, 80075a8 <__hexnan+0xe0>
 80075a0:	4547      	cmp	r7, r8
 80075a2:	d128      	bne.n	80075f6 <__hexnan+0x12e>
 80075a4:	2301      	movs	r3, #1
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	2005      	movs	r0, #5
 80075aa:	b007      	add	sp, #28
 80075ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	3501      	adds	r5, #1
 80075b2:	2d08      	cmp	r5, #8
 80075b4:	f10b 0b01 	add.w	fp, fp, #1
 80075b8:	dd06      	ble.n	80075c8 <__hexnan+0x100>
 80075ba:	4544      	cmp	r4, r8
 80075bc:	d9c1      	bls.n	8007542 <__hexnan+0x7a>
 80075be:	2300      	movs	r3, #0
 80075c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80075c4:	2501      	movs	r5, #1
 80075c6:	3c04      	subs	r4, #4
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	f000 000f 	and.w	r0, r0, #15
 80075ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075d2:	6020      	str	r0, [r4, #0]
 80075d4:	e7b5      	b.n	8007542 <__hexnan+0x7a>
 80075d6:	2508      	movs	r5, #8
 80075d8:	e7b3      	b.n	8007542 <__hexnan+0x7a>
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0dd      	beq.n	800759c <__hexnan+0xd4>
 80075e0:	f1c3 0320 	rsb	r3, r3, #32
 80075e4:	f04f 32ff 	mov.w	r2, #4294967295
 80075e8:	40da      	lsrs	r2, r3
 80075ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80075ee:	4013      	ands	r3, r2
 80075f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80075f4:	e7d2      	b.n	800759c <__hexnan+0xd4>
 80075f6:	3f04      	subs	r7, #4
 80075f8:	e7d0      	b.n	800759c <__hexnan+0xd4>
 80075fa:	2004      	movs	r0, #4
 80075fc:	e7d5      	b.n	80075aa <__hexnan+0xe2>
	...

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0f      	ldr	r6, [pc, #60]	@ (8007640 <sbrk_aligned+0x40>)
 8007604:	460c      	mov	r4, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	b911      	cbnz	r1, 8007612 <sbrk_aligned+0x12>
 800760c:	f000 fe1c 	bl	8008248 <_sbrk_r>
 8007610:	6030      	str	r0, [r6, #0]
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fe17 	bl	8008248 <_sbrk_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d103      	bne.n	8007626 <sbrk_aligned+0x26>
 800761e:	f04f 34ff 	mov.w	r4, #4294967295
 8007622:	4620      	mov	r0, r4
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	1cc4      	adds	r4, r0, #3
 8007628:	f024 0403 	bic.w	r4, r4, #3
 800762c:	42a0      	cmp	r0, r4
 800762e:	d0f8      	beq.n	8007622 <sbrk_aligned+0x22>
 8007630:	1a21      	subs	r1, r4, r0
 8007632:	4628      	mov	r0, r5
 8007634:	f000 fe08 	bl	8008248 <_sbrk_r>
 8007638:	3001      	adds	r0, #1
 800763a:	d1f2      	bne.n	8007622 <sbrk_aligned+0x22>
 800763c:	e7ef      	b.n	800761e <sbrk_aligned+0x1e>
 800763e:	bf00      	nop
 8007640:	20018de8 	.word	0x20018de8

08007644 <_malloc_r>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	1ccd      	adds	r5, r1, #3
 800764a:	f025 0503 	bic.w	r5, r5, #3
 800764e:	3508      	adds	r5, #8
 8007650:	2d0c      	cmp	r5, #12
 8007652:	bf38      	it	cc
 8007654:	250c      	movcc	r5, #12
 8007656:	2d00      	cmp	r5, #0
 8007658:	4606      	mov	r6, r0
 800765a:	db01      	blt.n	8007660 <_malloc_r+0x1c>
 800765c:	42a9      	cmp	r1, r5
 800765e:	d904      	bls.n	800766a <_malloc_r+0x26>
 8007660:	230c      	movs	r3, #12
 8007662:	6033      	str	r3, [r6, #0]
 8007664:	2000      	movs	r0, #0
 8007666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007740 <_malloc_r+0xfc>
 800766e:	f000 f87b 	bl	8007768 <__malloc_lock>
 8007672:	f8d8 3000 	ldr.w	r3, [r8]
 8007676:	461c      	mov	r4, r3
 8007678:	bb44      	cbnz	r4, 80076cc <_malloc_r+0x88>
 800767a:	4629      	mov	r1, r5
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff ffbf 	bl	8007600 <sbrk_aligned>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	4604      	mov	r4, r0
 8007686:	d158      	bne.n	800773a <_malloc_r+0xf6>
 8007688:	f8d8 4000 	ldr.w	r4, [r8]
 800768c:	4627      	mov	r7, r4
 800768e:	2f00      	cmp	r7, #0
 8007690:	d143      	bne.n	800771a <_malloc_r+0xd6>
 8007692:	2c00      	cmp	r4, #0
 8007694:	d04b      	beq.n	800772e <_malloc_r+0xea>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	4639      	mov	r1, r7
 800769a:	4630      	mov	r0, r6
 800769c:	eb04 0903 	add.w	r9, r4, r3
 80076a0:	f000 fdd2 	bl	8008248 <_sbrk_r>
 80076a4:	4581      	cmp	r9, r0
 80076a6:	d142      	bne.n	800772e <_malloc_r+0xea>
 80076a8:	6821      	ldr	r1, [r4, #0]
 80076aa:	1a6d      	subs	r5, r5, r1
 80076ac:	4629      	mov	r1, r5
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ffa6 	bl	8007600 <sbrk_aligned>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d03a      	beq.n	800772e <_malloc_r+0xea>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	442b      	add	r3, r5
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	f8d8 3000 	ldr.w	r3, [r8]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	bb62      	cbnz	r2, 8007720 <_malloc_r+0xdc>
 80076c6:	f8c8 7000 	str.w	r7, [r8]
 80076ca:	e00f      	b.n	80076ec <_malloc_r+0xa8>
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	1b52      	subs	r2, r2, r5
 80076d0:	d420      	bmi.n	8007714 <_malloc_r+0xd0>
 80076d2:	2a0b      	cmp	r2, #11
 80076d4:	d917      	bls.n	8007706 <_malloc_r+0xc2>
 80076d6:	1961      	adds	r1, r4, r5
 80076d8:	42a3      	cmp	r3, r4
 80076da:	6025      	str	r5, [r4, #0]
 80076dc:	bf18      	it	ne
 80076de:	6059      	strne	r1, [r3, #4]
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	bf08      	it	eq
 80076e4:	f8c8 1000 	streq.w	r1, [r8]
 80076e8:	5162      	str	r2, [r4, r5]
 80076ea:	604b      	str	r3, [r1, #4]
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f841 	bl	8007774 <__malloc_unlock>
 80076f2:	f104 000b 	add.w	r0, r4, #11
 80076f6:	1d23      	adds	r3, r4, #4
 80076f8:	f020 0007 	bic.w	r0, r0, #7
 80076fc:	1ac2      	subs	r2, r0, r3
 80076fe:	bf1c      	itt	ne
 8007700:	1a1b      	subne	r3, r3, r0
 8007702:	50a3      	strne	r3, [r4, r2]
 8007704:	e7af      	b.n	8007666 <_malloc_r+0x22>
 8007706:	6862      	ldr	r2, [r4, #4]
 8007708:	42a3      	cmp	r3, r4
 800770a:	bf0c      	ite	eq
 800770c:	f8c8 2000 	streq.w	r2, [r8]
 8007710:	605a      	strne	r2, [r3, #4]
 8007712:	e7eb      	b.n	80076ec <_malloc_r+0xa8>
 8007714:	4623      	mov	r3, r4
 8007716:	6864      	ldr	r4, [r4, #4]
 8007718:	e7ae      	b.n	8007678 <_malloc_r+0x34>
 800771a:	463c      	mov	r4, r7
 800771c:	687f      	ldr	r7, [r7, #4]
 800771e:	e7b6      	b.n	800768e <_malloc_r+0x4a>
 8007720:	461a      	mov	r2, r3
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	42a3      	cmp	r3, r4
 8007726:	d1fb      	bne.n	8007720 <_malloc_r+0xdc>
 8007728:	2300      	movs	r3, #0
 800772a:	6053      	str	r3, [r2, #4]
 800772c:	e7de      	b.n	80076ec <_malloc_r+0xa8>
 800772e:	230c      	movs	r3, #12
 8007730:	6033      	str	r3, [r6, #0]
 8007732:	4630      	mov	r0, r6
 8007734:	f000 f81e 	bl	8007774 <__malloc_unlock>
 8007738:	e794      	b.n	8007664 <_malloc_r+0x20>
 800773a:	6005      	str	r5, [r0, #0]
 800773c:	e7d6      	b.n	80076ec <_malloc_r+0xa8>
 800773e:	bf00      	nop
 8007740:	20018dec 	.word	0x20018dec

08007744 <__ascii_mbtowc>:
 8007744:	b082      	sub	sp, #8
 8007746:	b901      	cbnz	r1, 800774a <__ascii_mbtowc+0x6>
 8007748:	a901      	add	r1, sp, #4
 800774a:	b142      	cbz	r2, 800775e <__ascii_mbtowc+0x1a>
 800774c:	b14b      	cbz	r3, 8007762 <__ascii_mbtowc+0x1e>
 800774e:	7813      	ldrb	r3, [r2, #0]
 8007750:	600b      	str	r3, [r1, #0]
 8007752:	7812      	ldrb	r2, [r2, #0]
 8007754:	1e10      	subs	r0, r2, #0
 8007756:	bf18      	it	ne
 8007758:	2001      	movne	r0, #1
 800775a:	b002      	add	sp, #8
 800775c:	4770      	bx	lr
 800775e:	4610      	mov	r0, r2
 8007760:	e7fb      	b.n	800775a <__ascii_mbtowc+0x16>
 8007762:	f06f 0001 	mvn.w	r0, #1
 8007766:	e7f8      	b.n	800775a <__ascii_mbtowc+0x16>

08007768 <__malloc_lock>:
 8007768:	4801      	ldr	r0, [pc, #4]	@ (8007770 <__malloc_lock+0x8>)
 800776a:	f7ff bbaa 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 800776e:	bf00      	nop
 8007770:	20018de4 	.word	0x20018de4

08007774 <__malloc_unlock>:
 8007774:	4801      	ldr	r0, [pc, #4]	@ (800777c <__malloc_unlock+0x8>)
 8007776:	f7ff bba5 	b.w	8006ec4 <__retarget_lock_release_recursive>
 800777a:	bf00      	nop
 800777c:	20018de4 	.word	0x20018de4

08007780 <_Balloc>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	69c6      	ldr	r6, [r0, #28]
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	b976      	cbnz	r6, 80077a8 <_Balloc+0x28>
 800778a:	2010      	movs	r0, #16
 800778c:	f000 fd9e 	bl	80082cc <malloc>
 8007790:	4602      	mov	r2, r0
 8007792:	61e0      	str	r0, [r4, #28]
 8007794:	b920      	cbnz	r0, 80077a0 <_Balloc+0x20>
 8007796:	4b18      	ldr	r3, [pc, #96]	@ (80077f8 <_Balloc+0x78>)
 8007798:	4818      	ldr	r0, [pc, #96]	@ (80077fc <_Balloc+0x7c>)
 800779a:	216b      	movs	r1, #107	@ 0x6b
 800779c:	f000 fd64 	bl	8008268 <__assert_func>
 80077a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a4:	6006      	str	r6, [r0, #0]
 80077a6:	60c6      	str	r6, [r0, #12]
 80077a8:	69e6      	ldr	r6, [r4, #28]
 80077aa:	68f3      	ldr	r3, [r6, #12]
 80077ac:	b183      	cbz	r3, 80077d0 <_Balloc+0x50>
 80077ae:	69e3      	ldr	r3, [r4, #28]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b6:	b9b8      	cbnz	r0, 80077e8 <_Balloc+0x68>
 80077b8:	2101      	movs	r1, #1
 80077ba:	fa01 f605 	lsl.w	r6, r1, r5
 80077be:	1d72      	adds	r2, r6, #5
 80077c0:	0092      	lsls	r2, r2, #2
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fd6e 	bl	80082a4 <_calloc_r>
 80077c8:	b160      	cbz	r0, 80077e4 <_Balloc+0x64>
 80077ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ce:	e00e      	b.n	80077ee <_Balloc+0x6e>
 80077d0:	2221      	movs	r2, #33	@ 0x21
 80077d2:	2104      	movs	r1, #4
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fd65 	bl	80082a4 <_calloc_r>
 80077da:	69e3      	ldr	r3, [r4, #28]
 80077dc:	60f0      	str	r0, [r6, #12]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e4      	bne.n	80077ae <_Balloc+0x2e>
 80077e4:	2000      	movs	r0, #0
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	6802      	ldr	r2, [r0, #0]
 80077ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ee:	2300      	movs	r3, #0
 80077f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f4:	e7f7      	b.n	80077e6 <_Balloc+0x66>
 80077f6:	bf00      	nop
 80077f8:	08008fb7 	.word	0x08008fb7
 80077fc:	08008fce 	.word	0x08008fce

08007800 <_Bfree>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	69c6      	ldr	r6, [r0, #28]
 8007804:	4605      	mov	r5, r0
 8007806:	460c      	mov	r4, r1
 8007808:	b976      	cbnz	r6, 8007828 <_Bfree+0x28>
 800780a:	2010      	movs	r0, #16
 800780c:	f000 fd5e 	bl	80082cc <malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	61e8      	str	r0, [r5, #28]
 8007814:	b920      	cbnz	r0, 8007820 <_Bfree+0x20>
 8007816:	4b09      	ldr	r3, [pc, #36]	@ (800783c <_Bfree+0x3c>)
 8007818:	4809      	ldr	r0, [pc, #36]	@ (8007840 <_Bfree+0x40>)
 800781a:	218f      	movs	r1, #143	@ 0x8f
 800781c:	f000 fd24 	bl	8008268 <__assert_func>
 8007820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007824:	6006      	str	r6, [r0, #0]
 8007826:	60c6      	str	r6, [r0, #12]
 8007828:	b13c      	cbz	r4, 800783a <_Bfree+0x3a>
 800782a:	69eb      	ldr	r3, [r5, #28]
 800782c:	6862      	ldr	r2, [r4, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007834:	6021      	str	r1, [r4, #0]
 8007836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	08008fb7 	.word	0x08008fb7
 8007840:	08008fce 	.word	0x08008fce

08007844 <__multadd>:
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	690d      	ldr	r5, [r1, #16]
 800784a:	4607      	mov	r7, r0
 800784c:	460c      	mov	r4, r1
 800784e:	461e      	mov	r6, r3
 8007850:	f101 0c14 	add.w	ip, r1, #20
 8007854:	2000      	movs	r0, #0
 8007856:	f8dc 3000 	ldr.w	r3, [ip]
 800785a:	b299      	uxth	r1, r3
 800785c:	fb02 6101 	mla	r1, r2, r1, r6
 8007860:	0c1e      	lsrs	r6, r3, #16
 8007862:	0c0b      	lsrs	r3, r1, #16
 8007864:	fb02 3306 	mla	r3, r2, r6, r3
 8007868:	b289      	uxth	r1, r1
 800786a:	3001      	adds	r0, #1
 800786c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007870:	4285      	cmp	r5, r0
 8007872:	f84c 1b04 	str.w	r1, [ip], #4
 8007876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800787a:	dcec      	bgt.n	8007856 <__multadd+0x12>
 800787c:	b30e      	cbz	r6, 80078c2 <__multadd+0x7e>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	42ab      	cmp	r3, r5
 8007882:	dc19      	bgt.n	80078b8 <__multadd+0x74>
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	4638      	mov	r0, r7
 8007888:	3101      	adds	r1, #1
 800788a:	f7ff ff79 	bl	8007780 <_Balloc>
 800788e:	4680      	mov	r8, r0
 8007890:	b928      	cbnz	r0, 800789e <__multadd+0x5a>
 8007892:	4602      	mov	r2, r0
 8007894:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <__multadd+0x84>)
 8007896:	480d      	ldr	r0, [pc, #52]	@ (80078cc <__multadd+0x88>)
 8007898:	21ba      	movs	r1, #186	@ 0xba
 800789a:	f000 fce5 	bl	8008268 <__assert_func>
 800789e:	6922      	ldr	r2, [r4, #16]
 80078a0:	3202      	adds	r2, #2
 80078a2:	f104 010c 	add.w	r1, r4, #12
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	300c      	adds	r0, #12
 80078aa:	f7ff fb0c 	bl	8006ec6 <memcpy>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ffa5 	bl	8007800 <_Bfree>
 80078b6:	4644      	mov	r4, r8
 80078b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078bc:	3501      	adds	r5, #1
 80078be:	615e      	str	r6, [r3, #20]
 80078c0:	6125      	str	r5, [r4, #16]
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c8:	08008f46 	.word	0x08008f46
 80078cc:	08008fce 	.word	0x08008fce

080078d0 <__s2b>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	460c      	mov	r4, r1
 80078d6:	4615      	mov	r5, r2
 80078d8:	461f      	mov	r7, r3
 80078da:	2209      	movs	r2, #9
 80078dc:	3308      	adds	r3, #8
 80078de:	4606      	mov	r6, r0
 80078e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078e4:	2100      	movs	r1, #0
 80078e6:	2201      	movs	r2, #1
 80078e8:	429a      	cmp	r2, r3
 80078ea:	db09      	blt.n	8007900 <__s2b+0x30>
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff ff47 	bl	8007780 <_Balloc>
 80078f2:	b940      	cbnz	r0, 8007906 <__s2b+0x36>
 80078f4:	4602      	mov	r2, r0
 80078f6:	4b19      	ldr	r3, [pc, #100]	@ (800795c <__s2b+0x8c>)
 80078f8:	4819      	ldr	r0, [pc, #100]	@ (8007960 <__s2b+0x90>)
 80078fa:	21d3      	movs	r1, #211	@ 0xd3
 80078fc:	f000 fcb4 	bl	8008268 <__assert_func>
 8007900:	0052      	lsls	r2, r2, #1
 8007902:	3101      	adds	r1, #1
 8007904:	e7f0      	b.n	80078e8 <__s2b+0x18>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	6143      	str	r3, [r0, #20]
 800790a:	2d09      	cmp	r5, #9
 800790c:	f04f 0301 	mov.w	r3, #1
 8007910:	6103      	str	r3, [r0, #16]
 8007912:	dd16      	ble.n	8007942 <__s2b+0x72>
 8007914:	f104 0909 	add.w	r9, r4, #9
 8007918:	46c8      	mov	r8, r9
 800791a:	442c      	add	r4, r5
 800791c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007920:	4601      	mov	r1, r0
 8007922:	3b30      	subs	r3, #48	@ 0x30
 8007924:	220a      	movs	r2, #10
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ff8c 	bl	8007844 <__multadd>
 800792c:	45a0      	cmp	r8, r4
 800792e:	d1f5      	bne.n	800791c <__s2b+0x4c>
 8007930:	f1a5 0408 	sub.w	r4, r5, #8
 8007934:	444c      	add	r4, r9
 8007936:	1b2d      	subs	r5, r5, r4
 8007938:	1963      	adds	r3, r4, r5
 800793a:	42bb      	cmp	r3, r7
 800793c:	db04      	blt.n	8007948 <__s2b+0x78>
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	340a      	adds	r4, #10
 8007944:	2509      	movs	r5, #9
 8007946:	e7f6      	b.n	8007936 <__s2b+0x66>
 8007948:	f814 3b01 	ldrb.w	r3, [r4], #1
 800794c:	4601      	mov	r1, r0
 800794e:	3b30      	subs	r3, #48	@ 0x30
 8007950:	220a      	movs	r2, #10
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff ff76 	bl	8007844 <__multadd>
 8007958:	e7ee      	b.n	8007938 <__s2b+0x68>
 800795a:	bf00      	nop
 800795c:	08008f46 	.word	0x08008f46
 8007960:	08008fce 	.word	0x08008fce

08007964 <__hi0bits>:
 8007964:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007968:	4603      	mov	r3, r0
 800796a:	bf36      	itet	cc
 800796c:	0403      	lslcc	r3, r0, #16
 800796e:	2000      	movcs	r0, #0
 8007970:	2010      	movcc	r0, #16
 8007972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007976:	bf3c      	itt	cc
 8007978:	021b      	lslcc	r3, r3, #8
 800797a:	3008      	addcc	r0, #8
 800797c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007980:	bf3c      	itt	cc
 8007982:	011b      	lslcc	r3, r3, #4
 8007984:	3004      	addcc	r0, #4
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798a:	bf3c      	itt	cc
 800798c:	009b      	lslcc	r3, r3, #2
 800798e:	3002      	addcc	r0, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	db05      	blt.n	80079a0 <__hi0bits+0x3c>
 8007994:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007998:	f100 0001 	add.w	r0, r0, #1
 800799c:	bf08      	it	eq
 800799e:	2020      	moveq	r0, #32
 80079a0:	4770      	bx	lr

080079a2 <__lo0bits>:
 80079a2:	6803      	ldr	r3, [r0, #0]
 80079a4:	4602      	mov	r2, r0
 80079a6:	f013 0007 	ands.w	r0, r3, #7
 80079aa:	d00b      	beq.n	80079c4 <__lo0bits+0x22>
 80079ac:	07d9      	lsls	r1, r3, #31
 80079ae:	d421      	bmi.n	80079f4 <__lo0bits+0x52>
 80079b0:	0798      	lsls	r0, r3, #30
 80079b2:	bf49      	itett	mi
 80079b4:	085b      	lsrmi	r3, r3, #1
 80079b6:	089b      	lsrpl	r3, r3, #2
 80079b8:	2001      	movmi	r0, #1
 80079ba:	6013      	strmi	r3, [r2, #0]
 80079bc:	bf5c      	itt	pl
 80079be:	6013      	strpl	r3, [r2, #0]
 80079c0:	2002      	movpl	r0, #2
 80079c2:	4770      	bx	lr
 80079c4:	b299      	uxth	r1, r3
 80079c6:	b909      	cbnz	r1, 80079cc <__lo0bits+0x2a>
 80079c8:	0c1b      	lsrs	r3, r3, #16
 80079ca:	2010      	movs	r0, #16
 80079cc:	b2d9      	uxtb	r1, r3
 80079ce:	b909      	cbnz	r1, 80079d4 <__lo0bits+0x32>
 80079d0:	3008      	adds	r0, #8
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	0719      	lsls	r1, r3, #28
 80079d6:	bf04      	itt	eq
 80079d8:	091b      	lsreq	r3, r3, #4
 80079da:	3004      	addeq	r0, #4
 80079dc:	0799      	lsls	r1, r3, #30
 80079de:	bf04      	itt	eq
 80079e0:	089b      	lsreq	r3, r3, #2
 80079e2:	3002      	addeq	r0, #2
 80079e4:	07d9      	lsls	r1, r3, #31
 80079e6:	d403      	bmi.n	80079f0 <__lo0bits+0x4e>
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f100 0001 	add.w	r0, r0, #1
 80079ee:	d003      	beq.n	80079f8 <__lo0bits+0x56>
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	4770      	bx	lr
 80079f4:	2000      	movs	r0, #0
 80079f6:	4770      	bx	lr
 80079f8:	2020      	movs	r0, #32
 80079fa:	4770      	bx	lr

080079fc <__i2b>:
 80079fc:	b510      	push	{r4, lr}
 80079fe:	460c      	mov	r4, r1
 8007a00:	2101      	movs	r1, #1
 8007a02:	f7ff febd 	bl	8007780 <_Balloc>
 8007a06:	4602      	mov	r2, r0
 8007a08:	b928      	cbnz	r0, 8007a16 <__i2b+0x1a>
 8007a0a:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <__i2b+0x24>)
 8007a0c:	4805      	ldr	r0, [pc, #20]	@ (8007a24 <__i2b+0x28>)
 8007a0e:	f240 1145 	movw	r1, #325	@ 0x145
 8007a12:	f000 fc29 	bl	8008268 <__assert_func>
 8007a16:	2301      	movs	r3, #1
 8007a18:	6144      	str	r4, [r0, #20]
 8007a1a:	6103      	str	r3, [r0, #16]
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	bf00      	nop
 8007a20:	08008f46 	.word	0x08008f46
 8007a24:	08008fce 	.word	0x08008fce

08007a28 <__multiply>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	4617      	mov	r7, r2
 8007a2e:	690a      	ldr	r2, [r1, #16]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	bfa8      	it	ge
 8007a36:	463b      	movge	r3, r7
 8007a38:	4689      	mov	r9, r1
 8007a3a:	bfa4      	itt	ge
 8007a3c:	460f      	movge	r7, r1
 8007a3e:	4699      	movge	r9, r3
 8007a40:	693d      	ldr	r5, [r7, #16]
 8007a42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	eb05 060a 	add.w	r6, r5, sl
 8007a4e:	42b3      	cmp	r3, r6
 8007a50:	b085      	sub	sp, #20
 8007a52:	bfb8      	it	lt
 8007a54:	3101      	addlt	r1, #1
 8007a56:	f7ff fe93 	bl	8007780 <_Balloc>
 8007a5a:	b930      	cbnz	r0, 8007a6a <__multiply+0x42>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b41      	ldr	r3, [pc, #260]	@ (8007b64 <__multiply+0x13c>)
 8007a60:	4841      	ldr	r0, [pc, #260]	@ (8007b68 <__multiply+0x140>)
 8007a62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a66:	f000 fbff 	bl	8008268 <__assert_func>
 8007a6a:	f100 0414 	add.w	r4, r0, #20
 8007a6e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a72:	4623      	mov	r3, r4
 8007a74:	2200      	movs	r2, #0
 8007a76:	4573      	cmp	r3, lr
 8007a78:	d320      	bcc.n	8007abc <__multiply+0x94>
 8007a7a:	f107 0814 	add.w	r8, r7, #20
 8007a7e:	f109 0114 	add.w	r1, r9, #20
 8007a82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a86:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a8a:	9302      	str	r3, [sp, #8]
 8007a8c:	1beb      	subs	r3, r5, r7
 8007a8e:	3b15      	subs	r3, #21
 8007a90:	f023 0303 	bic.w	r3, r3, #3
 8007a94:	3304      	adds	r3, #4
 8007a96:	3715      	adds	r7, #21
 8007a98:	42bd      	cmp	r5, r7
 8007a9a:	bf38      	it	cc
 8007a9c:	2304      	movcc	r3, #4
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	9103      	str	r1, [sp, #12]
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	d80c      	bhi.n	8007ac2 <__multiply+0x9a>
 8007aa8:	2e00      	cmp	r6, #0
 8007aaa:	dd03      	ble.n	8007ab4 <__multiply+0x8c>
 8007aac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d055      	beq.n	8007b60 <__multiply+0x138>
 8007ab4:	6106      	str	r6, [r0, #16]
 8007ab6:	b005      	add	sp, #20
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	f843 2b04 	str.w	r2, [r3], #4
 8007ac0:	e7d9      	b.n	8007a76 <__multiply+0x4e>
 8007ac2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ac6:	f1ba 0f00 	cmp.w	sl, #0
 8007aca:	d01f      	beq.n	8007b0c <__multiply+0xe4>
 8007acc:	46c4      	mov	ip, r8
 8007ace:	46a1      	mov	r9, r4
 8007ad0:	2700      	movs	r7, #0
 8007ad2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ad6:	f8d9 3000 	ldr.w	r3, [r9]
 8007ada:	fa1f fb82 	uxth.w	fp, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ae4:	443b      	add	r3, r7
 8007ae6:	f8d9 7000 	ldr.w	r7, [r9]
 8007aea:	0c12      	lsrs	r2, r2, #16
 8007aec:	0c3f      	lsrs	r7, r7, #16
 8007aee:	fb0a 7202 	mla	r2, sl, r2, r7
 8007af2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afc:	4565      	cmp	r5, ip
 8007afe:	f849 3b04 	str.w	r3, [r9], #4
 8007b02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007b06:	d8e4      	bhi.n	8007ad2 <__multiply+0xaa>
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	50e7      	str	r7, [r4, r3]
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b12:	3104      	adds	r1, #4
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	d020      	beq.n	8007b5c <__multiply+0x134>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	4647      	mov	r7, r8
 8007b1e:	46a4      	mov	ip, r4
 8007b20:	f04f 0a00 	mov.w	sl, #0
 8007b24:	f8b7 b000 	ldrh.w	fp, [r7]
 8007b28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007b2c:	fb09 220b 	mla	r2, r9, fp, r2
 8007b30:	4452      	add	r2, sl
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b38:	f84c 3b04 	str.w	r3, [ip], #4
 8007b3c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007b40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b44:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b48:	fb09 330a 	mla	r3, r9, sl, r3
 8007b4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b50:	42bd      	cmp	r5, r7
 8007b52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b56:	d8e5      	bhi.n	8007b24 <__multiply+0xfc>
 8007b58:	9a01      	ldr	r2, [sp, #4]
 8007b5a:	50a3      	str	r3, [r4, r2]
 8007b5c:	3404      	adds	r4, #4
 8007b5e:	e79f      	b.n	8007aa0 <__multiply+0x78>
 8007b60:	3e01      	subs	r6, #1
 8007b62:	e7a1      	b.n	8007aa8 <__multiply+0x80>
 8007b64:	08008f46 	.word	0x08008f46
 8007b68:	08008fce 	.word	0x08008fce

08007b6c <__pow5mult>:
 8007b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b70:	4615      	mov	r5, r2
 8007b72:	f012 0203 	ands.w	r2, r2, #3
 8007b76:	4607      	mov	r7, r0
 8007b78:	460e      	mov	r6, r1
 8007b7a:	d007      	beq.n	8007b8c <__pow5mult+0x20>
 8007b7c:	4c25      	ldr	r4, [pc, #148]	@ (8007c14 <__pow5mult+0xa8>)
 8007b7e:	3a01      	subs	r2, #1
 8007b80:	2300      	movs	r3, #0
 8007b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b86:	f7ff fe5d 	bl	8007844 <__multadd>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	10ad      	asrs	r5, r5, #2
 8007b8e:	d03d      	beq.n	8007c0c <__pow5mult+0xa0>
 8007b90:	69fc      	ldr	r4, [r7, #28]
 8007b92:	b97c      	cbnz	r4, 8007bb4 <__pow5mult+0x48>
 8007b94:	2010      	movs	r0, #16
 8007b96:	f000 fb99 	bl	80082cc <malloc>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	61f8      	str	r0, [r7, #28]
 8007b9e:	b928      	cbnz	r0, 8007bac <__pow5mult+0x40>
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c18 <__pow5mult+0xac>)
 8007ba2:	481e      	ldr	r0, [pc, #120]	@ (8007c1c <__pow5mult+0xb0>)
 8007ba4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ba8:	f000 fb5e 	bl	8008268 <__assert_func>
 8007bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb0:	6004      	str	r4, [r0, #0]
 8007bb2:	60c4      	str	r4, [r0, #12]
 8007bb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bbc:	b94c      	cbnz	r4, 8007bd2 <__pow5mult+0x66>
 8007bbe:	f240 2171 	movw	r1, #625	@ 0x271
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff ff1a 	bl	80079fc <__i2b>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bce:	4604      	mov	r4, r0
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	f04f 0900 	mov.w	r9, #0
 8007bd6:	07eb      	lsls	r3, r5, #31
 8007bd8:	d50a      	bpl.n	8007bf0 <__pow5mult+0x84>
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7ff ff22 	bl	8007a28 <__multiply>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4680      	mov	r8, r0
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff fe09 	bl	8007800 <_Bfree>
 8007bee:	4646      	mov	r6, r8
 8007bf0:	106d      	asrs	r5, r5, #1
 8007bf2:	d00b      	beq.n	8007c0c <__pow5mult+0xa0>
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	b938      	cbnz	r0, 8007c08 <__pow5mult+0x9c>
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	f7ff ff13 	bl	8007a28 <__multiply>
 8007c02:	6020      	str	r0, [r4, #0]
 8007c04:	f8c0 9000 	str.w	r9, [r0]
 8007c08:	4604      	mov	r4, r0
 8007c0a:	e7e4      	b.n	8007bd6 <__pow5mult+0x6a>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c12:	bf00      	nop
 8007c14:	080091ec 	.word	0x080091ec
 8007c18:	08008fb7 	.word	0x08008fb7
 8007c1c:	08008fce 	.word	0x08008fce

08007c20 <__lshift>:
 8007c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c24:	460c      	mov	r4, r1
 8007c26:	6849      	ldr	r1, [r1, #4]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	4607      	mov	r7, r0
 8007c32:	4691      	mov	r9, r2
 8007c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c38:	f108 0601 	add.w	r6, r8, #1
 8007c3c:	42b3      	cmp	r3, r6
 8007c3e:	db0b      	blt.n	8007c58 <__lshift+0x38>
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff fd9d 	bl	8007780 <_Balloc>
 8007c46:	4605      	mov	r5, r0
 8007c48:	b948      	cbnz	r0, 8007c5e <__lshift+0x3e>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	4b28      	ldr	r3, [pc, #160]	@ (8007cf0 <__lshift+0xd0>)
 8007c4e:	4829      	ldr	r0, [pc, #164]	@ (8007cf4 <__lshift+0xd4>)
 8007c50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c54:	f000 fb08 	bl	8008268 <__assert_func>
 8007c58:	3101      	adds	r1, #1
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	e7ee      	b.n	8007c3c <__lshift+0x1c>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f100 0114 	add.w	r1, r0, #20
 8007c64:	f100 0210 	add.w	r2, r0, #16
 8007c68:	4618      	mov	r0, r3
 8007c6a:	4553      	cmp	r3, sl
 8007c6c:	db33      	blt.n	8007cd6 <__lshift+0xb6>
 8007c6e:	6920      	ldr	r0, [r4, #16]
 8007c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c74:	f104 0314 	add.w	r3, r4, #20
 8007c78:	f019 091f 	ands.w	r9, r9, #31
 8007c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c84:	d02b      	beq.n	8007cde <__lshift+0xbe>
 8007c86:	f1c9 0e20 	rsb	lr, r9, #32
 8007c8a:	468a      	mov	sl, r1
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	fa00 f009 	lsl.w	r0, r0, r9
 8007c94:	4310      	orrs	r0, r2
 8007c96:	f84a 0b04 	str.w	r0, [sl], #4
 8007c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9e:	459c      	cmp	ip, r3
 8007ca0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ca4:	d8f3      	bhi.n	8007c8e <__lshift+0x6e>
 8007ca6:	ebac 0304 	sub.w	r3, ip, r4
 8007caa:	3b15      	subs	r3, #21
 8007cac:	f023 0303 	bic.w	r3, r3, #3
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	f104 0015 	add.w	r0, r4, #21
 8007cb6:	4560      	cmp	r0, ip
 8007cb8:	bf88      	it	hi
 8007cba:	2304      	movhi	r3, #4
 8007cbc:	50ca      	str	r2, [r1, r3]
 8007cbe:	b10a      	cbz	r2, 8007cc4 <__lshift+0xa4>
 8007cc0:	f108 0602 	add.w	r6, r8, #2
 8007cc4:	3e01      	subs	r6, #1
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	612e      	str	r6, [r5, #16]
 8007cca:	4621      	mov	r1, r4
 8007ccc:	f7ff fd98 	bl	8007800 <_Bfree>
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cda:	3301      	adds	r3, #1
 8007cdc:	e7c5      	b.n	8007c6a <__lshift+0x4a>
 8007cde:	3904      	subs	r1, #4
 8007ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ce8:	459c      	cmp	ip, r3
 8007cea:	d8f9      	bhi.n	8007ce0 <__lshift+0xc0>
 8007cec:	e7ea      	b.n	8007cc4 <__lshift+0xa4>
 8007cee:	bf00      	nop
 8007cf0:	08008f46 	.word	0x08008f46
 8007cf4:	08008fce 	.word	0x08008fce

08007cf8 <__mcmp>:
 8007cf8:	690a      	ldr	r2, [r1, #16]
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6900      	ldr	r0, [r0, #16]
 8007cfe:	1a80      	subs	r0, r0, r2
 8007d00:	b530      	push	{r4, r5, lr}
 8007d02:	d10e      	bne.n	8007d22 <__mcmp+0x2a>
 8007d04:	3314      	adds	r3, #20
 8007d06:	3114      	adds	r1, #20
 8007d08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d18:	4295      	cmp	r5, r2
 8007d1a:	d003      	beq.n	8007d24 <__mcmp+0x2c>
 8007d1c:	d205      	bcs.n	8007d2a <__mcmp+0x32>
 8007d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d22:	bd30      	pop	{r4, r5, pc}
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	d3f3      	bcc.n	8007d10 <__mcmp+0x18>
 8007d28:	e7fb      	b.n	8007d22 <__mcmp+0x2a>
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	e7f9      	b.n	8007d22 <__mcmp+0x2a>
	...

08007d30 <__mdiff>:
 8007d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	4689      	mov	r9, r1
 8007d36:	4606      	mov	r6, r0
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4648      	mov	r0, r9
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	f7ff ffdb 	bl	8007cf8 <__mcmp>
 8007d42:	1e05      	subs	r5, r0, #0
 8007d44:	d112      	bne.n	8007d6c <__mdiff+0x3c>
 8007d46:	4629      	mov	r1, r5
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7ff fd19 	bl	8007780 <_Balloc>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	b928      	cbnz	r0, 8007d5e <__mdiff+0x2e>
 8007d52:	4b3f      	ldr	r3, [pc, #252]	@ (8007e50 <__mdiff+0x120>)
 8007d54:	f240 2137 	movw	r1, #567	@ 0x237
 8007d58:	483e      	ldr	r0, [pc, #248]	@ (8007e54 <__mdiff+0x124>)
 8007d5a:	f000 fa85 	bl	8008268 <__assert_func>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d64:	4610      	mov	r0, r2
 8007d66:	b003      	add	sp, #12
 8007d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	bfbc      	itt	lt
 8007d6e:	464b      	movlt	r3, r9
 8007d70:	46a1      	movlt	r9, r4
 8007d72:	4630      	mov	r0, r6
 8007d74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d78:	bfba      	itte	lt
 8007d7a:	461c      	movlt	r4, r3
 8007d7c:	2501      	movlt	r5, #1
 8007d7e:	2500      	movge	r5, #0
 8007d80:	f7ff fcfe 	bl	8007780 <_Balloc>
 8007d84:	4602      	mov	r2, r0
 8007d86:	b918      	cbnz	r0, 8007d90 <__mdiff+0x60>
 8007d88:	4b31      	ldr	r3, [pc, #196]	@ (8007e50 <__mdiff+0x120>)
 8007d8a:	f240 2145 	movw	r1, #581	@ 0x245
 8007d8e:	e7e3      	b.n	8007d58 <__mdiff+0x28>
 8007d90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d94:	6926      	ldr	r6, [r4, #16]
 8007d96:	60c5      	str	r5, [r0, #12]
 8007d98:	f109 0310 	add.w	r3, r9, #16
 8007d9c:	f109 0514 	add.w	r5, r9, #20
 8007da0:	f104 0e14 	add.w	lr, r4, #20
 8007da4:	f100 0b14 	add.w	fp, r0, #20
 8007da8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007dac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	46d9      	mov	r9, fp
 8007db4:	f04f 0c00 	mov.w	ip, #0
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	fa1f f38a 	uxth.w	r3, sl
 8007dc8:	4619      	mov	r1, r3
 8007dca:	b283      	uxth	r3, r0
 8007dcc:	1acb      	subs	r3, r1, r3
 8007dce:	0c00      	lsrs	r0, r0, #16
 8007dd0:	4463      	add	r3, ip
 8007dd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007de0:	4576      	cmp	r6, lr
 8007de2:	f849 3b04 	str.w	r3, [r9], #4
 8007de6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dea:	d8e5      	bhi.n	8007db8 <__mdiff+0x88>
 8007dec:	1b33      	subs	r3, r6, r4
 8007dee:	3b15      	subs	r3, #21
 8007df0:	f023 0303 	bic.w	r3, r3, #3
 8007df4:	3415      	adds	r4, #21
 8007df6:	3304      	adds	r3, #4
 8007df8:	42a6      	cmp	r6, r4
 8007dfa:	bf38      	it	cc
 8007dfc:	2304      	movcc	r3, #4
 8007dfe:	441d      	add	r5, r3
 8007e00:	445b      	add	r3, fp
 8007e02:	461e      	mov	r6, r3
 8007e04:	462c      	mov	r4, r5
 8007e06:	4544      	cmp	r4, r8
 8007e08:	d30e      	bcc.n	8007e28 <__mdiff+0xf8>
 8007e0a:	f108 0103 	add.w	r1, r8, #3
 8007e0e:	1b49      	subs	r1, r1, r5
 8007e10:	f021 0103 	bic.w	r1, r1, #3
 8007e14:	3d03      	subs	r5, #3
 8007e16:	45a8      	cmp	r8, r5
 8007e18:	bf38      	it	cc
 8007e1a:	2100      	movcc	r1, #0
 8007e1c:	440b      	add	r3, r1
 8007e1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e22:	b191      	cbz	r1, 8007e4a <__mdiff+0x11a>
 8007e24:	6117      	str	r7, [r2, #16]
 8007e26:	e79d      	b.n	8007d64 <__mdiff+0x34>
 8007e28:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e2c:	46e6      	mov	lr, ip
 8007e2e:	0c08      	lsrs	r0, r1, #16
 8007e30:	fa1c fc81 	uxtah	ip, ip, r1
 8007e34:	4471      	add	r1, lr
 8007e36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e3a:	b289      	uxth	r1, r1
 8007e3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e40:	f846 1b04 	str.w	r1, [r6], #4
 8007e44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e48:	e7dd      	b.n	8007e06 <__mdiff+0xd6>
 8007e4a:	3f01      	subs	r7, #1
 8007e4c:	e7e7      	b.n	8007e1e <__mdiff+0xee>
 8007e4e:	bf00      	nop
 8007e50:	08008f46 	.word	0x08008f46
 8007e54:	08008fce 	.word	0x08008fce

08007e58 <__ulp>:
 8007e58:	b082      	sub	sp, #8
 8007e5a:	ed8d 0b00 	vstr	d0, [sp]
 8007e5e:	9a01      	ldr	r2, [sp, #4]
 8007e60:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea0 <__ulp+0x48>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dc08      	bgt.n	8007e7e <__ulp+0x26>
 8007e6c:	425b      	negs	r3, r3
 8007e6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e76:	da04      	bge.n	8007e82 <__ulp+0x2a>
 8007e78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e7c:	4113      	asrs	r3, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	e008      	b.n	8007e94 <__ulp+0x3c>
 8007e82:	f1a2 0314 	sub.w	r3, r2, #20
 8007e86:	2b1e      	cmp	r3, #30
 8007e88:	bfda      	itte	le
 8007e8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e8e:	40da      	lsrle	r2, r3
 8007e90:	2201      	movgt	r2, #1
 8007e92:	2300      	movs	r3, #0
 8007e94:	4619      	mov	r1, r3
 8007e96:	4610      	mov	r0, r2
 8007e98:	ec41 0b10 	vmov	d0, r0, r1
 8007e9c:	b002      	add	sp, #8
 8007e9e:	4770      	bx	lr
 8007ea0:	7ff00000 	.word	0x7ff00000

08007ea4 <__b2d>:
 8007ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea8:	6906      	ldr	r6, [r0, #16]
 8007eaa:	f100 0814 	add.w	r8, r0, #20
 8007eae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007eb2:	1f37      	subs	r7, r6, #4
 8007eb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7ff fd53 	bl	8007964 <__hi0bits>
 8007ebe:	f1c0 0320 	rsb	r3, r0, #32
 8007ec2:	280a      	cmp	r0, #10
 8007ec4:	600b      	str	r3, [r1, #0]
 8007ec6:	491b      	ldr	r1, [pc, #108]	@ (8007f34 <__b2d+0x90>)
 8007ec8:	dc15      	bgt.n	8007ef6 <__b2d+0x52>
 8007eca:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ece:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ed2:	45b8      	cmp	r8, r7
 8007ed4:	ea43 0501 	orr.w	r5, r3, r1
 8007ed8:	bf34      	ite	cc
 8007eda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ede:	2300      	movcs	r3, #0
 8007ee0:	3015      	adds	r0, #21
 8007ee2:	fa02 f000 	lsl.w	r0, r2, r0
 8007ee6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007eea:	4303      	orrs	r3, r0
 8007eec:	461c      	mov	r4, r3
 8007eee:	ec45 4b10 	vmov	d0, r4, r5
 8007ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef6:	45b8      	cmp	r8, r7
 8007ef8:	bf3a      	itte	cc
 8007efa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007efe:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f02:	2300      	movcs	r3, #0
 8007f04:	380b      	subs	r0, #11
 8007f06:	d012      	beq.n	8007f2e <__b2d+0x8a>
 8007f08:	f1c0 0120 	rsb	r1, r0, #32
 8007f0c:	fa23 f401 	lsr.w	r4, r3, r1
 8007f10:	4082      	lsls	r2, r0
 8007f12:	4322      	orrs	r2, r4
 8007f14:	4547      	cmp	r7, r8
 8007f16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f1a:	bf8c      	ite	hi
 8007f1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f20:	2200      	movls	r2, #0
 8007f22:	4083      	lsls	r3, r0
 8007f24:	40ca      	lsrs	r2, r1
 8007f26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	e7de      	b.n	8007eec <__b2d+0x48>
 8007f2e:	ea42 0501 	orr.w	r5, r2, r1
 8007f32:	e7db      	b.n	8007eec <__b2d+0x48>
 8007f34:	3ff00000 	.word	0x3ff00000

08007f38 <__d2b>:
 8007f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	460f      	mov	r7, r1
 8007f3e:	2101      	movs	r1, #1
 8007f40:	ec59 8b10 	vmov	r8, r9, d0
 8007f44:	4616      	mov	r6, r2
 8007f46:	f7ff fc1b 	bl	8007780 <_Balloc>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	b930      	cbnz	r0, 8007f5c <__d2b+0x24>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	4b23      	ldr	r3, [pc, #140]	@ (8007fe0 <__d2b+0xa8>)
 8007f52:	4824      	ldr	r0, [pc, #144]	@ (8007fe4 <__d2b+0xac>)
 8007f54:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f58:	f000 f986 	bl	8008268 <__assert_func>
 8007f5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f64:	b10d      	cbz	r5, 8007f6a <__d2b+0x32>
 8007f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f70:	d023      	beq.n	8007fba <__d2b+0x82>
 8007f72:	4668      	mov	r0, sp
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	f7ff fd14 	bl	80079a2 <__lo0bits>
 8007f7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f7e:	b1d0      	cbz	r0, 8007fb6 <__d2b+0x7e>
 8007f80:	f1c0 0320 	rsb	r3, r0, #32
 8007f84:	fa02 f303 	lsl.w	r3, r2, r3
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	40c2      	lsrs	r2, r0
 8007f8c:	6163      	str	r3, [r4, #20]
 8007f8e:	9201      	str	r2, [sp, #4]
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	61a3      	str	r3, [r4, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf0c      	ite	eq
 8007f98:	2201      	moveq	r2, #1
 8007f9a:	2202      	movne	r2, #2
 8007f9c:	6122      	str	r2, [r4, #16]
 8007f9e:	b1a5      	cbz	r5, 8007fca <__d2b+0x92>
 8007fa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fa4:	4405      	add	r5, r0
 8007fa6:	603d      	str	r5, [r7, #0]
 8007fa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fac:	6030      	str	r0, [r6, #0]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	b003      	add	sp, #12
 8007fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb6:	6161      	str	r1, [r4, #20]
 8007fb8:	e7ea      	b.n	8007f90 <__d2b+0x58>
 8007fba:	a801      	add	r0, sp, #4
 8007fbc:	f7ff fcf1 	bl	80079a2 <__lo0bits>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	6163      	str	r3, [r4, #20]
 8007fc4:	3020      	adds	r0, #32
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	e7e8      	b.n	8007f9c <__d2b+0x64>
 8007fca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fd2:	6038      	str	r0, [r7, #0]
 8007fd4:	6918      	ldr	r0, [r3, #16]
 8007fd6:	f7ff fcc5 	bl	8007964 <__hi0bits>
 8007fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fde:	e7e5      	b.n	8007fac <__d2b+0x74>
 8007fe0:	08008f46 	.word	0x08008f46
 8007fe4:	08008fce 	.word	0x08008fce

08007fe8 <__ratio>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	b085      	sub	sp, #20
 8007fee:	e9cd 1000 	strd	r1, r0, [sp]
 8007ff2:	a902      	add	r1, sp, #8
 8007ff4:	f7ff ff56 	bl	8007ea4 <__b2d>
 8007ff8:	9800      	ldr	r0, [sp, #0]
 8007ffa:	a903      	add	r1, sp, #12
 8007ffc:	ec55 4b10 	vmov	r4, r5, d0
 8008000:	f7ff ff50 	bl	8007ea4 <__b2d>
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	6919      	ldr	r1, [r3, #16]
 8008008:	9b00      	ldr	r3, [sp, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	1ac9      	subs	r1, r1, r3
 800800e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008012:	1a9b      	subs	r3, r3, r2
 8008014:	ec5b ab10 	vmov	sl, fp, d0
 8008018:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfce      	itee	gt
 8008020:	462a      	movgt	r2, r5
 8008022:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008026:	465a      	movle	r2, fp
 8008028:	462f      	mov	r7, r5
 800802a:	46d9      	mov	r9, fp
 800802c:	bfcc      	ite	gt
 800802e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008032:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008036:	464b      	mov	r3, r9
 8008038:	4652      	mov	r2, sl
 800803a:	4620      	mov	r0, r4
 800803c:	4639      	mov	r1, r7
 800803e:	f7f8 fc0d 	bl	800085c <__aeabi_ddiv>
 8008042:	ec41 0b10 	vmov	d0, r0, r1
 8008046:	b005      	add	sp, #20
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800804c <__copybits>:
 800804c:	3901      	subs	r1, #1
 800804e:	b570      	push	{r4, r5, r6, lr}
 8008050:	1149      	asrs	r1, r1, #5
 8008052:	6914      	ldr	r4, [r2, #16]
 8008054:	3101      	adds	r1, #1
 8008056:	f102 0314 	add.w	r3, r2, #20
 800805a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800805e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008062:	1f05      	subs	r5, r0, #4
 8008064:	42a3      	cmp	r3, r4
 8008066:	d30c      	bcc.n	8008082 <__copybits+0x36>
 8008068:	1aa3      	subs	r3, r4, r2
 800806a:	3b11      	subs	r3, #17
 800806c:	f023 0303 	bic.w	r3, r3, #3
 8008070:	3211      	adds	r2, #17
 8008072:	42a2      	cmp	r2, r4
 8008074:	bf88      	it	hi
 8008076:	2300      	movhi	r3, #0
 8008078:	4418      	add	r0, r3
 800807a:	2300      	movs	r3, #0
 800807c:	4288      	cmp	r0, r1
 800807e:	d305      	bcc.n	800808c <__copybits+0x40>
 8008080:	bd70      	pop	{r4, r5, r6, pc}
 8008082:	f853 6b04 	ldr.w	r6, [r3], #4
 8008086:	f845 6f04 	str.w	r6, [r5, #4]!
 800808a:	e7eb      	b.n	8008064 <__copybits+0x18>
 800808c:	f840 3b04 	str.w	r3, [r0], #4
 8008090:	e7f4      	b.n	800807c <__copybits+0x30>

08008092 <__any_on>:
 8008092:	f100 0214 	add.w	r2, r0, #20
 8008096:	6900      	ldr	r0, [r0, #16]
 8008098:	114b      	asrs	r3, r1, #5
 800809a:	4298      	cmp	r0, r3
 800809c:	b510      	push	{r4, lr}
 800809e:	db11      	blt.n	80080c4 <__any_on+0x32>
 80080a0:	dd0a      	ble.n	80080b8 <__any_on+0x26>
 80080a2:	f011 011f 	ands.w	r1, r1, #31
 80080a6:	d007      	beq.n	80080b8 <__any_on+0x26>
 80080a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080ac:	fa24 f001 	lsr.w	r0, r4, r1
 80080b0:	fa00 f101 	lsl.w	r1, r0, r1
 80080b4:	428c      	cmp	r4, r1
 80080b6:	d10b      	bne.n	80080d0 <__any_on+0x3e>
 80080b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080bc:	4293      	cmp	r3, r2
 80080be:	d803      	bhi.n	80080c8 <__any_on+0x36>
 80080c0:	2000      	movs	r0, #0
 80080c2:	bd10      	pop	{r4, pc}
 80080c4:	4603      	mov	r3, r0
 80080c6:	e7f7      	b.n	80080b8 <__any_on+0x26>
 80080c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d0f5      	beq.n	80080bc <__any_on+0x2a>
 80080d0:	2001      	movs	r0, #1
 80080d2:	e7f6      	b.n	80080c2 <__any_on+0x30>

080080d4 <__ascii_wctomb>:
 80080d4:	4603      	mov	r3, r0
 80080d6:	4608      	mov	r0, r1
 80080d8:	b141      	cbz	r1, 80080ec <__ascii_wctomb+0x18>
 80080da:	2aff      	cmp	r2, #255	@ 0xff
 80080dc:	d904      	bls.n	80080e8 <__ascii_wctomb+0x14>
 80080de:	228a      	movs	r2, #138	@ 0x8a
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	4770      	bx	lr
 80080e8:	700a      	strb	r2, [r1, #0]
 80080ea:	2001      	movs	r0, #1
 80080ec:	4770      	bx	lr
	...

080080f0 <__sflush_r>:
 80080f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	0716      	lsls	r6, r2, #28
 80080fa:	4605      	mov	r5, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	d454      	bmi.n	80081aa <__sflush_r+0xba>
 8008100:	684b      	ldr	r3, [r1, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dc02      	bgt.n	800810c <__sflush_r+0x1c>
 8008106:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	dd48      	ble.n	800819e <__sflush_r+0xae>
 800810c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800810e:	2e00      	cmp	r6, #0
 8008110:	d045      	beq.n	800819e <__sflush_r+0xae>
 8008112:	2300      	movs	r3, #0
 8008114:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008118:	682f      	ldr	r7, [r5, #0]
 800811a:	6a21      	ldr	r1, [r4, #32]
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	d030      	beq.n	8008182 <__sflush_r+0x92>
 8008120:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	0759      	lsls	r1, r3, #29
 8008126:	d505      	bpl.n	8008134 <__sflush_r+0x44>
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800812e:	b10b      	cbz	r3, 8008134 <__sflush_r+0x44>
 8008130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	2300      	movs	r3, #0
 8008136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008138:	6a21      	ldr	r1, [r4, #32]
 800813a:	4628      	mov	r0, r5
 800813c:	47b0      	blx	r6
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	d106      	bne.n	8008152 <__sflush_r+0x62>
 8008144:	6829      	ldr	r1, [r5, #0]
 8008146:	291d      	cmp	r1, #29
 8008148:	d82b      	bhi.n	80081a2 <__sflush_r+0xb2>
 800814a:	4a2a      	ldr	r2, [pc, #168]	@ (80081f4 <__sflush_r+0x104>)
 800814c:	40ca      	lsrs	r2, r1
 800814e:	07d6      	lsls	r6, r2, #31
 8008150:	d527      	bpl.n	80081a2 <__sflush_r+0xb2>
 8008152:	2200      	movs	r2, #0
 8008154:	6062      	str	r2, [r4, #4]
 8008156:	04d9      	lsls	r1, r3, #19
 8008158:	6922      	ldr	r2, [r4, #16]
 800815a:	6022      	str	r2, [r4, #0]
 800815c:	d504      	bpl.n	8008168 <__sflush_r+0x78>
 800815e:	1c42      	adds	r2, r0, #1
 8008160:	d101      	bne.n	8008166 <__sflush_r+0x76>
 8008162:	682b      	ldr	r3, [r5, #0]
 8008164:	b903      	cbnz	r3, 8008168 <__sflush_r+0x78>
 8008166:	6560      	str	r0, [r4, #84]	@ 0x54
 8008168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800816a:	602f      	str	r7, [r5, #0]
 800816c:	b1b9      	cbz	r1, 800819e <__sflush_r+0xae>
 800816e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008172:	4299      	cmp	r1, r3
 8008174:	d002      	beq.n	800817c <__sflush_r+0x8c>
 8008176:	4628      	mov	r0, r5
 8008178:	f7fe febe 	bl	8006ef8 <_free_r>
 800817c:	2300      	movs	r3, #0
 800817e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008180:	e00d      	b.n	800819e <__sflush_r+0xae>
 8008182:	2301      	movs	r3, #1
 8008184:	4628      	mov	r0, r5
 8008186:	47b0      	blx	r6
 8008188:	4602      	mov	r2, r0
 800818a:	1c50      	adds	r0, r2, #1
 800818c:	d1c9      	bne.n	8008122 <__sflush_r+0x32>
 800818e:	682b      	ldr	r3, [r5, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0c6      	beq.n	8008122 <__sflush_r+0x32>
 8008194:	2b1d      	cmp	r3, #29
 8008196:	d001      	beq.n	800819c <__sflush_r+0xac>
 8008198:	2b16      	cmp	r3, #22
 800819a:	d11e      	bne.n	80081da <__sflush_r+0xea>
 800819c:	602f      	str	r7, [r5, #0]
 800819e:	2000      	movs	r0, #0
 80081a0:	e022      	b.n	80081e8 <__sflush_r+0xf8>
 80081a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a6:	b21b      	sxth	r3, r3
 80081a8:	e01b      	b.n	80081e2 <__sflush_r+0xf2>
 80081aa:	690f      	ldr	r7, [r1, #16]
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d0f6      	beq.n	800819e <__sflush_r+0xae>
 80081b0:	0793      	lsls	r3, r2, #30
 80081b2:	680e      	ldr	r6, [r1, #0]
 80081b4:	bf08      	it	eq
 80081b6:	694b      	ldreq	r3, [r1, #20]
 80081b8:	600f      	str	r7, [r1, #0]
 80081ba:	bf18      	it	ne
 80081bc:	2300      	movne	r3, #0
 80081be:	eba6 0807 	sub.w	r8, r6, r7
 80081c2:	608b      	str	r3, [r1, #8]
 80081c4:	f1b8 0f00 	cmp.w	r8, #0
 80081c8:	dde9      	ble.n	800819e <__sflush_r+0xae>
 80081ca:	6a21      	ldr	r1, [r4, #32]
 80081cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081ce:	4643      	mov	r3, r8
 80081d0:	463a      	mov	r2, r7
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b0      	blx	r6
 80081d6:	2800      	cmp	r0, #0
 80081d8:	dc08      	bgt.n	80081ec <__sflush_r+0xfc>
 80081da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	4407      	add	r7, r0
 80081ee:	eba8 0800 	sub.w	r8, r8, r0
 80081f2:	e7e7      	b.n	80081c4 <__sflush_r+0xd4>
 80081f4:	20400001 	.word	0x20400001

080081f8 <_fflush_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	690b      	ldr	r3, [r1, #16]
 80081fc:	4605      	mov	r5, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	b913      	cbnz	r3, 8008208 <_fflush_r+0x10>
 8008202:	2500      	movs	r5, #0
 8008204:	4628      	mov	r0, r5
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	b118      	cbz	r0, 8008212 <_fflush_r+0x1a>
 800820a:	6a03      	ldr	r3, [r0, #32]
 800820c:	b90b      	cbnz	r3, 8008212 <_fflush_r+0x1a>
 800820e:	f7fe fd53 	bl	8006cb8 <__sinit>
 8008212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0f3      	beq.n	8008202 <_fflush_r+0xa>
 800821a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800821c:	07d0      	lsls	r0, r2, #31
 800821e:	d404      	bmi.n	800822a <_fflush_r+0x32>
 8008220:	0599      	lsls	r1, r3, #22
 8008222:	d402      	bmi.n	800822a <_fflush_r+0x32>
 8008224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008226:	f7fe fe4c 	bl	8006ec2 <__retarget_lock_acquire_recursive>
 800822a:	4628      	mov	r0, r5
 800822c:	4621      	mov	r1, r4
 800822e:	f7ff ff5f 	bl	80080f0 <__sflush_r>
 8008232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008234:	07da      	lsls	r2, r3, #31
 8008236:	4605      	mov	r5, r0
 8008238:	d4e4      	bmi.n	8008204 <_fflush_r+0xc>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	059b      	lsls	r3, r3, #22
 800823e:	d4e1      	bmi.n	8008204 <_fflush_r+0xc>
 8008240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008242:	f7fe fe3f 	bl	8006ec4 <__retarget_lock_release_recursive>
 8008246:	e7dd      	b.n	8008204 <_fflush_r+0xc>

08008248 <_sbrk_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	@ (8008264 <_sbrk_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7fa f848 	bl	80022e8 <_sbrk>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_sbrk_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_sbrk_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20018de0 	.word	0x20018de0

08008268 <__assert_func>:
 8008268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800826a:	4614      	mov	r4, r2
 800826c:	461a      	mov	r2, r3
 800826e:	4b09      	ldr	r3, [pc, #36]	@ (8008294 <__assert_func+0x2c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4605      	mov	r5, r0
 8008274:	68d8      	ldr	r0, [r3, #12]
 8008276:	b14c      	cbz	r4, 800828c <__assert_func+0x24>
 8008278:	4b07      	ldr	r3, [pc, #28]	@ (8008298 <__assert_func+0x30>)
 800827a:	9100      	str	r1, [sp, #0]
 800827c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008280:	4906      	ldr	r1, [pc, #24]	@ (800829c <__assert_func+0x34>)
 8008282:	462b      	mov	r3, r5
 8008284:	f000 f82a 	bl	80082dc <fiprintf>
 8008288:	f000 f83a 	bl	8008300 <abort>
 800828c:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <__assert_func+0x38>)
 800828e:	461c      	mov	r4, r3
 8008290:	e7f3      	b.n	800827a <__assert_func+0x12>
 8008292:	bf00      	nop
 8008294:	20000244 	.word	0x20000244
 8008298:	08009027 	.word	0x08009027
 800829c:	08009034 	.word	0x08009034
 80082a0:	08009062 	.word	0x08009062

080082a4 <_calloc_r>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	fba1 5402 	umull	r5, r4, r1, r2
 80082aa:	b934      	cbnz	r4, 80082ba <_calloc_r+0x16>
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7ff f9c9 	bl	8007644 <_malloc_r>
 80082b2:	4606      	mov	r6, r0
 80082b4:	b928      	cbnz	r0, 80082c2 <_calloc_r+0x1e>
 80082b6:	4630      	mov	r0, r6
 80082b8:	bd70      	pop	{r4, r5, r6, pc}
 80082ba:	220c      	movs	r2, #12
 80082bc:	6002      	str	r2, [r0, #0]
 80082be:	2600      	movs	r6, #0
 80082c0:	e7f9      	b.n	80082b6 <_calloc_r+0x12>
 80082c2:	462a      	mov	r2, r5
 80082c4:	4621      	mov	r1, r4
 80082c6:	f7fe fd70 	bl	8006daa <memset>
 80082ca:	e7f4      	b.n	80082b6 <_calloc_r+0x12>

080082cc <malloc>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	@ (80082d8 <malloc+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f7ff b9b7 	b.w	8007644 <_malloc_r>
 80082d6:	bf00      	nop
 80082d8:	20000244 	.word	0x20000244

080082dc <fiprintf>:
 80082dc:	b40e      	push	{r1, r2, r3}
 80082de:	b503      	push	{r0, r1, lr}
 80082e0:	4601      	mov	r1, r0
 80082e2:	ab03      	add	r3, sp, #12
 80082e4:	4805      	ldr	r0, [pc, #20]	@ (80082fc <fiprintf+0x20>)
 80082e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	f000 f837 	bl	8008360 <_vfiprintf_r>
 80082f2:	b002      	add	sp, #8
 80082f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082f8:	b003      	add	sp, #12
 80082fa:	4770      	bx	lr
 80082fc:	20000244 	.word	0x20000244

08008300 <abort>:
 8008300:	b508      	push	{r3, lr}
 8008302:	2006      	movs	r0, #6
 8008304:	f000 fb8c 	bl	8008a20 <raise>
 8008308:	2001      	movs	r0, #1
 800830a:	f7f9 ff74 	bl	80021f6 <_exit>

0800830e <__sfputc_r>:
 800830e:	6893      	ldr	r3, [r2, #8]
 8008310:	3b01      	subs	r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	b410      	push	{r4}
 8008316:	6093      	str	r3, [r2, #8]
 8008318:	da08      	bge.n	800832c <__sfputc_r+0x1e>
 800831a:	6994      	ldr	r4, [r2, #24]
 800831c:	42a3      	cmp	r3, r4
 800831e:	db01      	blt.n	8008324 <__sfputc_r+0x16>
 8008320:	290a      	cmp	r1, #10
 8008322:	d103      	bne.n	800832c <__sfputc_r+0x1e>
 8008324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008328:	f000 babe 	b.w	80088a8 <__swbuf_r>
 800832c:	6813      	ldr	r3, [r2, #0]
 800832e:	1c58      	adds	r0, r3, #1
 8008330:	6010      	str	r0, [r2, #0]
 8008332:	7019      	strb	r1, [r3, #0]
 8008334:	4608      	mov	r0, r1
 8008336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800833a:	4770      	bx	lr

0800833c <__sfputs_r>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	4614      	mov	r4, r2
 8008344:	18d5      	adds	r5, r2, r3
 8008346:	42ac      	cmp	r4, r5
 8008348:	d101      	bne.n	800834e <__sfputs_r+0x12>
 800834a:	2000      	movs	r0, #0
 800834c:	e007      	b.n	800835e <__sfputs_r+0x22>
 800834e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008352:	463a      	mov	r2, r7
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff ffda 	bl	800830e <__sfputc_r>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	d1f3      	bne.n	8008346 <__sfputs_r+0xa>
 800835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008360 <_vfiprintf_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	460d      	mov	r5, r1
 8008366:	b09d      	sub	sp, #116	@ 0x74
 8008368:	4614      	mov	r4, r2
 800836a:	4698      	mov	r8, r3
 800836c:	4606      	mov	r6, r0
 800836e:	b118      	cbz	r0, 8008378 <_vfiprintf_r+0x18>
 8008370:	6a03      	ldr	r3, [r0, #32]
 8008372:	b90b      	cbnz	r3, 8008378 <_vfiprintf_r+0x18>
 8008374:	f7fe fca0 	bl	8006cb8 <__sinit>
 8008378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800837a:	07d9      	lsls	r1, r3, #31
 800837c:	d405      	bmi.n	800838a <_vfiprintf_r+0x2a>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	059a      	lsls	r2, r3, #22
 8008382:	d402      	bmi.n	800838a <_vfiprintf_r+0x2a>
 8008384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008386:	f7fe fd9c 	bl	8006ec2 <__retarget_lock_acquire_recursive>
 800838a:	89ab      	ldrh	r3, [r5, #12]
 800838c:	071b      	lsls	r3, r3, #28
 800838e:	d501      	bpl.n	8008394 <_vfiprintf_r+0x34>
 8008390:	692b      	ldr	r3, [r5, #16]
 8008392:	b99b      	cbnz	r3, 80083bc <_vfiprintf_r+0x5c>
 8008394:	4629      	mov	r1, r5
 8008396:	4630      	mov	r0, r6
 8008398:	f000 fac4 	bl	8008924 <__swsetup_r>
 800839c:	b170      	cbz	r0, 80083bc <_vfiprintf_r+0x5c>
 800839e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083a0:	07dc      	lsls	r4, r3, #31
 80083a2:	d504      	bpl.n	80083ae <_vfiprintf_r+0x4e>
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	b01d      	add	sp, #116	@ 0x74
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	0598      	lsls	r0, r3, #22
 80083b2:	d4f7      	bmi.n	80083a4 <_vfiprintf_r+0x44>
 80083b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083b6:	f7fe fd85 	bl	8006ec4 <__retarget_lock_release_recursive>
 80083ba:	e7f3      	b.n	80083a4 <_vfiprintf_r+0x44>
 80083bc:	2300      	movs	r3, #0
 80083be:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c0:	2320      	movs	r3, #32
 80083c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ca:	2330      	movs	r3, #48	@ 0x30
 80083cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800857c <_vfiprintf_r+0x21c>
 80083d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083d4:	f04f 0901 	mov.w	r9, #1
 80083d8:	4623      	mov	r3, r4
 80083da:	469a      	mov	sl, r3
 80083dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e0:	b10a      	cbz	r2, 80083e6 <_vfiprintf_r+0x86>
 80083e2:	2a25      	cmp	r2, #37	@ 0x25
 80083e4:	d1f9      	bne.n	80083da <_vfiprintf_r+0x7a>
 80083e6:	ebba 0b04 	subs.w	fp, sl, r4
 80083ea:	d00b      	beq.n	8008404 <_vfiprintf_r+0xa4>
 80083ec:	465b      	mov	r3, fp
 80083ee:	4622      	mov	r2, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ffa2 	bl	800833c <__sfputs_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f000 80a7 	beq.w	800854c <_vfiprintf_r+0x1ec>
 80083fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008400:	445a      	add	r2, fp
 8008402:	9209      	str	r2, [sp, #36]	@ 0x24
 8008404:	f89a 3000 	ldrb.w	r3, [sl]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 809f 	beq.w	800854c <_vfiprintf_r+0x1ec>
 800840e:	2300      	movs	r3, #0
 8008410:	f04f 32ff 	mov.w	r2, #4294967295
 8008414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008418:	f10a 0a01 	add.w	sl, sl, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008424:	931a      	str	r3, [sp, #104]	@ 0x68
 8008426:	4654      	mov	r4, sl
 8008428:	2205      	movs	r2, #5
 800842a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842e:	4853      	ldr	r0, [pc, #332]	@ (800857c <_vfiprintf_r+0x21c>)
 8008430:	f7f7 fede 	bl	80001f0 <memchr>
 8008434:	9a04      	ldr	r2, [sp, #16]
 8008436:	b9d8      	cbnz	r0, 8008470 <_vfiprintf_r+0x110>
 8008438:	06d1      	lsls	r1, r2, #27
 800843a:	bf44      	itt	mi
 800843c:	2320      	movmi	r3, #32
 800843e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008442:	0713      	lsls	r3, r2, #28
 8008444:	bf44      	itt	mi
 8008446:	232b      	movmi	r3, #43	@ 0x2b
 8008448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800844c:	f89a 3000 	ldrb.w	r3, [sl]
 8008450:	2b2a      	cmp	r3, #42	@ 0x2a
 8008452:	d015      	beq.n	8008480 <_vfiprintf_r+0x120>
 8008454:	9a07      	ldr	r2, [sp, #28]
 8008456:	4654      	mov	r4, sl
 8008458:	2000      	movs	r0, #0
 800845a:	f04f 0c0a 	mov.w	ip, #10
 800845e:	4621      	mov	r1, r4
 8008460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008464:	3b30      	subs	r3, #48	@ 0x30
 8008466:	2b09      	cmp	r3, #9
 8008468:	d94b      	bls.n	8008502 <_vfiprintf_r+0x1a2>
 800846a:	b1b0      	cbz	r0, 800849a <_vfiprintf_r+0x13a>
 800846c:	9207      	str	r2, [sp, #28]
 800846e:	e014      	b.n	800849a <_vfiprintf_r+0x13a>
 8008470:	eba0 0308 	sub.w	r3, r0, r8
 8008474:	fa09 f303 	lsl.w	r3, r9, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	46a2      	mov	sl, r4
 800847e:	e7d2      	b.n	8008426 <_vfiprintf_r+0xc6>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	1d19      	adds	r1, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	9103      	str	r1, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bfbb      	ittet	lt
 800848c:	425b      	neglt	r3, r3
 800848e:	f042 0202 	orrlt.w	r2, r2, #2
 8008492:	9307      	strge	r3, [sp, #28]
 8008494:	9307      	strlt	r3, [sp, #28]
 8008496:	bfb8      	it	lt
 8008498:	9204      	strlt	r2, [sp, #16]
 800849a:	7823      	ldrb	r3, [r4, #0]
 800849c:	2b2e      	cmp	r3, #46	@ 0x2e
 800849e:	d10a      	bne.n	80084b6 <_vfiprintf_r+0x156>
 80084a0:	7863      	ldrb	r3, [r4, #1]
 80084a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80084a4:	d132      	bne.n	800850c <_vfiprintf_r+0x1ac>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9203      	str	r2, [sp, #12]
 80084ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084b2:	3402      	adds	r4, #2
 80084b4:	9305      	str	r3, [sp, #20]
 80084b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800858c <_vfiprintf_r+0x22c>
 80084ba:	7821      	ldrb	r1, [r4, #0]
 80084bc:	2203      	movs	r2, #3
 80084be:	4650      	mov	r0, sl
 80084c0:	f7f7 fe96 	bl	80001f0 <memchr>
 80084c4:	b138      	cbz	r0, 80084d6 <_vfiprintf_r+0x176>
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	eba0 000a 	sub.w	r0, r0, sl
 80084cc:	2240      	movs	r2, #64	@ 0x40
 80084ce:	4082      	lsls	r2, r0
 80084d0:	4313      	orrs	r3, r2
 80084d2:	3401      	adds	r4, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084da:	4829      	ldr	r0, [pc, #164]	@ (8008580 <_vfiprintf_r+0x220>)
 80084dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084e0:	2206      	movs	r2, #6
 80084e2:	f7f7 fe85 	bl	80001f0 <memchr>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d03f      	beq.n	800856a <_vfiprintf_r+0x20a>
 80084ea:	4b26      	ldr	r3, [pc, #152]	@ (8008584 <_vfiprintf_r+0x224>)
 80084ec:	bb1b      	cbnz	r3, 8008536 <_vfiprintf_r+0x1d6>
 80084ee:	9b03      	ldr	r3, [sp, #12]
 80084f0:	3307      	adds	r3, #7
 80084f2:	f023 0307 	bic.w	r3, r3, #7
 80084f6:	3308      	adds	r3, #8
 80084f8:	9303      	str	r3, [sp, #12]
 80084fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fc:	443b      	add	r3, r7
 80084fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008500:	e76a      	b.n	80083d8 <_vfiprintf_r+0x78>
 8008502:	fb0c 3202 	mla	r2, ip, r2, r3
 8008506:	460c      	mov	r4, r1
 8008508:	2001      	movs	r0, #1
 800850a:	e7a8      	b.n	800845e <_vfiprintf_r+0xfe>
 800850c:	2300      	movs	r3, #0
 800850e:	3401      	adds	r4, #1
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0c0a 	mov.w	ip, #10
 8008518:	4620      	mov	r0, r4
 800851a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800851e:	3a30      	subs	r2, #48	@ 0x30
 8008520:	2a09      	cmp	r2, #9
 8008522:	d903      	bls.n	800852c <_vfiprintf_r+0x1cc>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0c6      	beq.n	80084b6 <_vfiprintf_r+0x156>
 8008528:	9105      	str	r1, [sp, #20]
 800852a:	e7c4      	b.n	80084b6 <_vfiprintf_r+0x156>
 800852c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008530:	4604      	mov	r4, r0
 8008532:	2301      	movs	r3, #1
 8008534:	e7f0      	b.n	8008518 <_vfiprintf_r+0x1b8>
 8008536:	ab03      	add	r3, sp, #12
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	462a      	mov	r2, r5
 800853c:	4b12      	ldr	r3, [pc, #72]	@ (8008588 <_vfiprintf_r+0x228>)
 800853e:	a904      	add	r1, sp, #16
 8008540:	4630      	mov	r0, r6
 8008542:	f3af 8000 	nop.w
 8008546:	4607      	mov	r7, r0
 8008548:	1c78      	adds	r0, r7, #1
 800854a:	d1d6      	bne.n	80084fa <_vfiprintf_r+0x19a>
 800854c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800854e:	07d9      	lsls	r1, r3, #31
 8008550:	d405      	bmi.n	800855e <_vfiprintf_r+0x1fe>
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	059a      	lsls	r2, r3, #22
 8008556:	d402      	bmi.n	800855e <_vfiprintf_r+0x1fe>
 8008558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800855a:	f7fe fcb3 	bl	8006ec4 <__retarget_lock_release_recursive>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	065b      	lsls	r3, r3, #25
 8008562:	f53f af1f 	bmi.w	80083a4 <_vfiprintf_r+0x44>
 8008566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008568:	e71e      	b.n	80083a8 <_vfiprintf_r+0x48>
 800856a:	ab03      	add	r3, sp, #12
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462a      	mov	r2, r5
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <_vfiprintf_r+0x228>)
 8008572:	a904      	add	r1, sp, #16
 8008574:	4630      	mov	r0, r6
 8008576:	f000 f879 	bl	800866c <_printf_i>
 800857a:	e7e4      	b.n	8008546 <_vfiprintf_r+0x1e6>
 800857c:	08009063 	.word	0x08009063
 8008580:	0800906d 	.word	0x0800906d
 8008584:	00000000 	.word	0x00000000
 8008588:	0800833d 	.word	0x0800833d
 800858c:	08009069 	.word	0x08009069

08008590 <_printf_common>:
 8008590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008594:	4616      	mov	r6, r2
 8008596:	4698      	mov	r8, r3
 8008598:	688a      	ldr	r2, [r1, #8]
 800859a:	690b      	ldr	r3, [r1, #16]
 800859c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bfb8      	it	lt
 80085a4:	4613      	movlt	r3, r2
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085ac:	4607      	mov	r7, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	b10a      	cbz	r2, 80085b6 <_printf_common+0x26>
 80085b2:	3301      	adds	r3, #1
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	0699      	lsls	r1, r3, #26
 80085ba:	bf42      	ittt	mi
 80085bc:	6833      	ldrmi	r3, [r6, #0]
 80085be:	3302      	addmi	r3, #2
 80085c0:	6033      	strmi	r3, [r6, #0]
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	f015 0506 	ands.w	r5, r5, #6
 80085c8:	d106      	bne.n	80085d8 <_printf_common+0x48>
 80085ca:	f104 0a19 	add.w	sl, r4, #25
 80085ce:	68e3      	ldr	r3, [r4, #12]
 80085d0:	6832      	ldr	r2, [r6, #0]
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	dc26      	bgt.n	8008626 <_printf_common+0x96>
 80085d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085dc:	6822      	ldr	r2, [r4, #0]
 80085de:	3b00      	subs	r3, #0
 80085e0:	bf18      	it	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	0692      	lsls	r2, r2, #26
 80085e6:	d42b      	bmi.n	8008640 <_printf_common+0xb0>
 80085e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085ec:	4641      	mov	r1, r8
 80085ee:	4638      	mov	r0, r7
 80085f0:	47c8      	blx	r9
 80085f2:	3001      	adds	r0, #1
 80085f4:	d01e      	beq.n	8008634 <_printf_common+0xa4>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	6922      	ldr	r2, [r4, #16]
 80085fa:	f003 0306 	and.w	r3, r3, #6
 80085fe:	2b04      	cmp	r3, #4
 8008600:	bf02      	ittt	eq
 8008602:	68e5      	ldreq	r5, [r4, #12]
 8008604:	6833      	ldreq	r3, [r6, #0]
 8008606:	1aed      	subeq	r5, r5, r3
 8008608:	68a3      	ldr	r3, [r4, #8]
 800860a:	bf0c      	ite	eq
 800860c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008610:	2500      	movne	r5, #0
 8008612:	4293      	cmp	r3, r2
 8008614:	bfc4      	itt	gt
 8008616:	1a9b      	subgt	r3, r3, r2
 8008618:	18ed      	addgt	r5, r5, r3
 800861a:	2600      	movs	r6, #0
 800861c:	341a      	adds	r4, #26
 800861e:	42b5      	cmp	r5, r6
 8008620:	d11a      	bne.n	8008658 <_printf_common+0xc8>
 8008622:	2000      	movs	r0, #0
 8008624:	e008      	b.n	8008638 <_printf_common+0xa8>
 8008626:	2301      	movs	r3, #1
 8008628:	4652      	mov	r2, sl
 800862a:	4641      	mov	r1, r8
 800862c:	4638      	mov	r0, r7
 800862e:	47c8      	blx	r9
 8008630:	3001      	adds	r0, #1
 8008632:	d103      	bne.n	800863c <_printf_common+0xac>
 8008634:	f04f 30ff 	mov.w	r0, #4294967295
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863c:	3501      	adds	r5, #1
 800863e:	e7c6      	b.n	80085ce <_printf_common+0x3e>
 8008640:	18e1      	adds	r1, r4, r3
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	2030      	movs	r0, #48	@ 0x30
 8008646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800864a:	4422      	add	r2, r4
 800864c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008654:	3302      	adds	r3, #2
 8008656:	e7c7      	b.n	80085e8 <_printf_common+0x58>
 8008658:	2301      	movs	r3, #1
 800865a:	4622      	mov	r2, r4
 800865c:	4641      	mov	r1, r8
 800865e:	4638      	mov	r0, r7
 8008660:	47c8      	blx	r9
 8008662:	3001      	adds	r0, #1
 8008664:	d0e6      	beq.n	8008634 <_printf_common+0xa4>
 8008666:	3601      	adds	r6, #1
 8008668:	e7d9      	b.n	800861e <_printf_common+0x8e>
	...

0800866c <_printf_i>:
 800866c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	7e0f      	ldrb	r7, [r1, #24]
 8008672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008674:	2f78      	cmp	r7, #120	@ 0x78
 8008676:	4691      	mov	r9, r2
 8008678:	4680      	mov	r8, r0
 800867a:	460c      	mov	r4, r1
 800867c:	469a      	mov	sl, r3
 800867e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008682:	d807      	bhi.n	8008694 <_printf_i+0x28>
 8008684:	2f62      	cmp	r7, #98	@ 0x62
 8008686:	d80a      	bhi.n	800869e <_printf_i+0x32>
 8008688:	2f00      	cmp	r7, #0
 800868a:	f000 80d1 	beq.w	8008830 <_printf_i+0x1c4>
 800868e:	2f58      	cmp	r7, #88	@ 0x58
 8008690:	f000 80b8 	beq.w	8008804 <_printf_i+0x198>
 8008694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800869c:	e03a      	b.n	8008714 <_printf_i+0xa8>
 800869e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086a2:	2b15      	cmp	r3, #21
 80086a4:	d8f6      	bhi.n	8008694 <_printf_i+0x28>
 80086a6:	a101      	add	r1, pc, #4	@ (adr r1, 80086ac <_printf_i+0x40>)
 80086a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086ac:	08008705 	.word	0x08008705
 80086b0:	08008719 	.word	0x08008719
 80086b4:	08008695 	.word	0x08008695
 80086b8:	08008695 	.word	0x08008695
 80086bc:	08008695 	.word	0x08008695
 80086c0:	08008695 	.word	0x08008695
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008695 	.word	0x08008695
 80086cc:	08008695 	.word	0x08008695
 80086d0:	08008695 	.word	0x08008695
 80086d4:	08008695 	.word	0x08008695
 80086d8:	08008817 	.word	0x08008817
 80086dc:	08008743 	.word	0x08008743
 80086e0:	080087d1 	.word	0x080087d1
 80086e4:	08008695 	.word	0x08008695
 80086e8:	08008695 	.word	0x08008695
 80086ec:	08008839 	.word	0x08008839
 80086f0:	08008695 	.word	0x08008695
 80086f4:	08008743 	.word	0x08008743
 80086f8:	08008695 	.word	0x08008695
 80086fc:	08008695 	.word	0x08008695
 8008700:	080087d9 	.word	0x080087d9
 8008704:	6833      	ldr	r3, [r6, #0]
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6032      	str	r2, [r6, #0]
 800870c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008714:	2301      	movs	r3, #1
 8008716:	e09c      	b.n	8008852 <_printf_i+0x1e6>
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	1d19      	adds	r1, r3, #4
 800871e:	6031      	str	r1, [r6, #0]
 8008720:	0606      	lsls	r6, r0, #24
 8008722:	d501      	bpl.n	8008728 <_printf_i+0xbc>
 8008724:	681d      	ldr	r5, [r3, #0]
 8008726:	e003      	b.n	8008730 <_printf_i+0xc4>
 8008728:	0645      	lsls	r5, r0, #25
 800872a:	d5fb      	bpl.n	8008724 <_printf_i+0xb8>
 800872c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008730:	2d00      	cmp	r5, #0
 8008732:	da03      	bge.n	800873c <_printf_i+0xd0>
 8008734:	232d      	movs	r3, #45	@ 0x2d
 8008736:	426d      	negs	r5, r5
 8008738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800873c:	4858      	ldr	r0, [pc, #352]	@ (80088a0 <_printf_i+0x234>)
 800873e:	230a      	movs	r3, #10
 8008740:	e011      	b.n	8008766 <_printf_i+0xfa>
 8008742:	6821      	ldr	r1, [r4, #0]
 8008744:	6833      	ldr	r3, [r6, #0]
 8008746:	0608      	lsls	r0, r1, #24
 8008748:	f853 5b04 	ldr.w	r5, [r3], #4
 800874c:	d402      	bmi.n	8008754 <_printf_i+0xe8>
 800874e:	0649      	lsls	r1, r1, #25
 8008750:	bf48      	it	mi
 8008752:	b2ad      	uxthmi	r5, r5
 8008754:	2f6f      	cmp	r7, #111	@ 0x6f
 8008756:	4852      	ldr	r0, [pc, #328]	@ (80088a0 <_printf_i+0x234>)
 8008758:	6033      	str	r3, [r6, #0]
 800875a:	bf14      	ite	ne
 800875c:	230a      	movne	r3, #10
 800875e:	2308      	moveq	r3, #8
 8008760:	2100      	movs	r1, #0
 8008762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008766:	6866      	ldr	r6, [r4, #4]
 8008768:	60a6      	str	r6, [r4, #8]
 800876a:	2e00      	cmp	r6, #0
 800876c:	db05      	blt.n	800877a <_printf_i+0x10e>
 800876e:	6821      	ldr	r1, [r4, #0]
 8008770:	432e      	orrs	r6, r5
 8008772:	f021 0104 	bic.w	r1, r1, #4
 8008776:	6021      	str	r1, [r4, #0]
 8008778:	d04b      	beq.n	8008812 <_printf_i+0x1a6>
 800877a:	4616      	mov	r6, r2
 800877c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008780:	fb03 5711 	mls	r7, r3, r1, r5
 8008784:	5dc7      	ldrb	r7, [r0, r7]
 8008786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800878a:	462f      	mov	r7, r5
 800878c:	42bb      	cmp	r3, r7
 800878e:	460d      	mov	r5, r1
 8008790:	d9f4      	bls.n	800877c <_printf_i+0x110>
 8008792:	2b08      	cmp	r3, #8
 8008794:	d10b      	bne.n	80087ae <_printf_i+0x142>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	07df      	lsls	r7, r3, #31
 800879a:	d508      	bpl.n	80087ae <_printf_i+0x142>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	6861      	ldr	r1, [r4, #4]
 80087a0:	4299      	cmp	r1, r3
 80087a2:	bfde      	ittt	le
 80087a4:	2330      	movle	r3, #48	@ 0x30
 80087a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087ae:	1b92      	subs	r2, r2, r6
 80087b0:	6122      	str	r2, [r4, #16]
 80087b2:	f8cd a000 	str.w	sl, [sp]
 80087b6:	464b      	mov	r3, r9
 80087b8:	aa03      	add	r2, sp, #12
 80087ba:	4621      	mov	r1, r4
 80087bc:	4640      	mov	r0, r8
 80087be:	f7ff fee7 	bl	8008590 <_printf_common>
 80087c2:	3001      	adds	r0, #1
 80087c4:	d14a      	bne.n	800885c <_printf_i+0x1f0>
 80087c6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ca:	b004      	add	sp, #16
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	f043 0320 	orr.w	r3, r3, #32
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	4832      	ldr	r0, [pc, #200]	@ (80088a4 <_printf_i+0x238>)
 80087da:	2778      	movs	r7, #120	@ 0x78
 80087dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	061f      	lsls	r7, r3, #24
 80087e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80087ea:	d402      	bmi.n	80087f2 <_printf_i+0x186>
 80087ec:	065f      	lsls	r7, r3, #25
 80087ee:	bf48      	it	mi
 80087f0:	b2ad      	uxthmi	r5, r5
 80087f2:	6031      	str	r1, [r6, #0]
 80087f4:	07d9      	lsls	r1, r3, #31
 80087f6:	bf44      	itt	mi
 80087f8:	f043 0320 	orrmi.w	r3, r3, #32
 80087fc:	6023      	strmi	r3, [r4, #0]
 80087fe:	b11d      	cbz	r5, 8008808 <_printf_i+0x19c>
 8008800:	2310      	movs	r3, #16
 8008802:	e7ad      	b.n	8008760 <_printf_i+0xf4>
 8008804:	4826      	ldr	r0, [pc, #152]	@ (80088a0 <_printf_i+0x234>)
 8008806:	e7e9      	b.n	80087dc <_printf_i+0x170>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	f023 0320 	bic.w	r3, r3, #32
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	e7f6      	b.n	8008800 <_printf_i+0x194>
 8008812:	4616      	mov	r6, r2
 8008814:	e7bd      	b.n	8008792 <_printf_i+0x126>
 8008816:	6833      	ldr	r3, [r6, #0]
 8008818:	6825      	ldr	r5, [r4, #0]
 800881a:	6961      	ldr	r1, [r4, #20]
 800881c:	1d18      	adds	r0, r3, #4
 800881e:	6030      	str	r0, [r6, #0]
 8008820:	062e      	lsls	r6, r5, #24
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	d501      	bpl.n	800882a <_printf_i+0x1be>
 8008826:	6019      	str	r1, [r3, #0]
 8008828:	e002      	b.n	8008830 <_printf_i+0x1c4>
 800882a:	0668      	lsls	r0, r5, #25
 800882c:	d5fb      	bpl.n	8008826 <_printf_i+0x1ba>
 800882e:	8019      	strh	r1, [r3, #0]
 8008830:	2300      	movs	r3, #0
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	4616      	mov	r6, r2
 8008836:	e7bc      	b.n	80087b2 <_printf_i+0x146>
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	6032      	str	r2, [r6, #0]
 800883e:	681e      	ldr	r6, [r3, #0]
 8008840:	6862      	ldr	r2, [r4, #4]
 8008842:	2100      	movs	r1, #0
 8008844:	4630      	mov	r0, r6
 8008846:	f7f7 fcd3 	bl	80001f0 <memchr>
 800884a:	b108      	cbz	r0, 8008850 <_printf_i+0x1e4>
 800884c:	1b80      	subs	r0, r0, r6
 800884e:	6060      	str	r0, [r4, #4]
 8008850:	6863      	ldr	r3, [r4, #4]
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	2300      	movs	r3, #0
 8008856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800885a:	e7aa      	b.n	80087b2 <_printf_i+0x146>
 800885c:	6923      	ldr	r3, [r4, #16]
 800885e:	4632      	mov	r2, r6
 8008860:	4649      	mov	r1, r9
 8008862:	4640      	mov	r0, r8
 8008864:	47d0      	blx	sl
 8008866:	3001      	adds	r0, #1
 8008868:	d0ad      	beq.n	80087c6 <_printf_i+0x15a>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	079b      	lsls	r3, r3, #30
 800886e:	d413      	bmi.n	8008898 <_printf_i+0x22c>
 8008870:	68e0      	ldr	r0, [r4, #12]
 8008872:	9b03      	ldr	r3, [sp, #12]
 8008874:	4298      	cmp	r0, r3
 8008876:	bfb8      	it	lt
 8008878:	4618      	movlt	r0, r3
 800887a:	e7a6      	b.n	80087ca <_printf_i+0x15e>
 800887c:	2301      	movs	r3, #1
 800887e:	4632      	mov	r2, r6
 8008880:	4649      	mov	r1, r9
 8008882:	4640      	mov	r0, r8
 8008884:	47d0      	blx	sl
 8008886:	3001      	adds	r0, #1
 8008888:	d09d      	beq.n	80087c6 <_printf_i+0x15a>
 800888a:	3501      	adds	r5, #1
 800888c:	68e3      	ldr	r3, [r4, #12]
 800888e:	9903      	ldr	r1, [sp, #12]
 8008890:	1a5b      	subs	r3, r3, r1
 8008892:	42ab      	cmp	r3, r5
 8008894:	dcf2      	bgt.n	800887c <_printf_i+0x210>
 8008896:	e7eb      	b.n	8008870 <_printf_i+0x204>
 8008898:	2500      	movs	r5, #0
 800889a:	f104 0619 	add.w	r6, r4, #25
 800889e:	e7f5      	b.n	800888c <_printf_i+0x220>
 80088a0:	08009074 	.word	0x08009074
 80088a4:	08009085 	.word	0x08009085

080088a8 <__swbuf_r>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	460e      	mov	r6, r1
 80088ac:	4614      	mov	r4, r2
 80088ae:	4605      	mov	r5, r0
 80088b0:	b118      	cbz	r0, 80088ba <__swbuf_r+0x12>
 80088b2:	6a03      	ldr	r3, [r0, #32]
 80088b4:	b90b      	cbnz	r3, 80088ba <__swbuf_r+0x12>
 80088b6:	f7fe f9ff 	bl	8006cb8 <__sinit>
 80088ba:	69a3      	ldr	r3, [r4, #24]
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	071a      	lsls	r2, r3, #28
 80088c2:	d501      	bpl.n	80088c8 <__swbuf_r+0x20>
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	b943      	cbnz	r3, 80088da <__swbuf_r+0x32>
 80088c8:	4621      	mov	r1, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f82a 	bl	8008924 <__swsetup_r>
 80088d0:	b118      	cbz	r0, 80088da <__swbuf_r+0x32>
 80088d2:	f04f 37ff 	mov.w	r7, #4294967295
 80088d6:	4638      	mov	r0, r7
 80088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	6922      	ldr	r2, [r4, #16]
 80088de:	1a98      	subs	r0, r3, r2
 80088e0:	6963      	ldr	r3, [r4, #20]
 80088e2:	b2f6      	uxtb	r6, r6
 80088e4:	4283      	cmp	r3, r0
 80088e6:	4637      	mov	r7, r6
 80088e8:	dc05      	bgt.n	80088f6 <__swbuf_r+0x4e>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f7ff fc83 	bl	80081f8 <_fflush_r>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1ed      	bne.n	80088d2 <__swbuf_r+0x2a>
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	60a3      	str	r3, [r4, #8]
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	701e      	strb	r6, [r3, #0]
 8008904:	6962      	ldr	r2, [r4, #20]
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	429a      	cmp	r2, r3
 800890a:	d004      	beq.n	8008916 <__swbuf_r+0x6e>
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d5e1      	bpl.n	80088d6 <__swbuf_r+0x2e>
 8008912:	2e0a      	cmp	r6, #10
 8008914:	d1df      	bne.n	80088d6 <__swbuf_r+0x2e>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff fc6d 	bl	80081f8 <_fflush_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	d0d9      	beq.n	80088d6 <__swbuf_r+0x2e>
 8008922:	e7d6      	b.n	80088d2 <__swbuf_r+0x2a>

08008924 <__swsetup_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4b29      	ldr	r3, [pc, #164]	@ (80089cc <__swsetup_r+0xa8>)
 8008928:	4605      	mov	r5, r0
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	460c      	mov	r4, r1
 800892e:	b118      	cbz	r0, 8008938 <__swsetup_r+0x14>
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b90b      	cbnz	r3, 8008938 <__swsetup_r+0x14>
 8008934:	f7fe f9c0 	bl	8006cb8 <__sinit>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	d422      	bmi.n	8008986 <__swsetup_r+0x62>
 8008940:	06da      	lsls	r2, r3, #27
 8008942:	d407      	bmi.n	8008954 <__swsetup_r+0x30>
 8008944:	2209      	movs	r2, #9
 8008946:	602a      	str	r2, [r5, #0]
 8008948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	e033      	b.n	80089bc <__swsetup_r+0x98>
 8008954:	0758      	lsls	r0, r3, #29
 8008956:	d512      	bpl.n	800897e <__swsetup_r+0x5a>
 8008958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800895a:	b141      	cbz	r1, 800896e <__swsetup_r+0x4a>
 800895c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008960:	4299      	cmp	r1, r3
 8008962:	d002      	beq.n	800896a <__swsetup_r+0x46>
 8008964:	4628      	mov	r0, r5
 8008966:	f7fe fac7 	bl	8006ef8 <_free_r>
 800896a:	2300      	movs	r3, #0
 800896c:	6363      	str	r3, [r4, #52]	@ 0x34
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	b94b      	cbnz	r3, 800899e <__swsetup_r+0x7a>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008994:	d003      	beq.n	800899e <__swsetup_r+0x7a>
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f883 	bl	8008aa4 <__smakebuf_r>
 800899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a2:	f013 0201 	ands.w	r2, r3, #1
 80089a6:	d00a      	beq.n	80089be <__swsetup_r+0x9a>
 80089a8:	2200      	movs	r2, #0
 80089aa:	60a2      	str	r2, [r4, #8]
 80089ac:	6962      	ldr	r2, [r4, #20]
 80089ae:	4252      	negs	r2, r2
 80089b0:	61a2      	str	r2, [r4, #24]
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	b942      	cbnz	r2, 80089c8 <__swsetup_r+0xa4>
 80089b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ba:	d1c5      	bne.n	8008948 <__swsetup_r+0x24>
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	0799      	lsls	r1, r3, #30
 80089c0:	bf58      	it	pl
 80089c2:	6962      	ldrpl	r2, [r4, #20]
 80089c4:	60a2      	str	r2, [r4, #8]
 80089c6:	e7f4      	b.n	80089b2 <__swsetup_r+0x8e>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7f7      	b.n	80089bc <__swsetup_r+0x98>
 80089cc:	20000244 	.word	0x20000244

080089d0 <_raise_r>:
 80089d0:	291f      	cmp	r1, #31
 80089d2:	b538      	push	{r3, r4, r5, lr}
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	d904      	bls.n	80089e4 <_raise_r+0x14>
 80089da:	2316      	movs	r3, #22
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089e6:	b112      	cbz	r2, 80089ee <_raise_r+0x1e>
 80089e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089ec:	b94b      	cbnz	r3, 8008a02 <_raise_r+0x32>
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f830 	bl	8008a54 <_getpid_r>
 80089f4:	4622      	mov	r2, r4
 80089f6:	4601      	mov	r1, r0
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_kill_r>
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d00a      	beq.n	8008a1c <_raise_r+0x4c>
 8008a06:	1c59      	adds	r1, r3, #1
 8008a08:	d103      	bne.n	8008a12 <_raise_r+0x42>
 8008a0a:	2316      	movs	r3, #22
 8008a0c:	6003      	str	r3, [r0, #0]
 8008a0e:	2001      	movs	r0, #1
 8008a10:	e7e7      	b.n	80089e2 <_raise_r+0x12>
 8008a12:	2100      	movs	r1, #0
 8008a14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	4798      	blx	r3
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e7e0      	b.n	80089e2 <_raise_r+0x12>

08008a20 <raise>:
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <raise+0xc>)
 8008a22:	4601      	mov	r1, r0
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f7ff bfd3 	b.w	80089d0 <_raise_r>
 8008a2a:	bf00      	nop
 8008a2c:	20000244 	.word	0x20000244

08008a30 <_kill_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	@ (8008a50 <_kill_r+0x20>)
 8008a34:	2300      	movs	r3, #0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	602b      	str	r3, [r5, #0]
 8008a3e:	f7f9 fbca 	bl	80021d6 <_kill>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d102      	bne.n	8008a4c <_kill_r+0x1c>
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	b103      	cbz	r3, 8008a4c <_kill_r+0x1c>
 8008a4a:	6023      	str	r3, [r4, #0]
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	bf00      	nop
 8008a50:	20018de0 	.word	0x20018de0

08008a54 <_getpid_r>:
 8008a54:	f7f9 bbb7 	b.w	80021c6 <_getpid>

08008a58 <__swhatbuf_r>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	2900      	cmp	r1, #0
 8008a62:	b096      	sub	sp, #88	@ 0x58
 8008a64:	4615      	mov	r5, r2
 8008a66:	461e      	mov	r6, r3
 8008a68:	da0d      	bge.n	8008a86 <__swhatbuf_r+0x2e>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a70:	f04f 0100 	mov.w	r1, #0
 8008a74:	bf14      	ite	ne
 8008a76:	2340      	movne	r3, #64	@ 0x40
 8008a78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	6031      	str	r1, [r6, #0]
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	b016      	add	sp, #88	@ 0x58
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	466a      	mov	r2, sp
 8008a88:	f000 f848 	bl	8008b1c <_fstat_r>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	dbec      	blt.n	8008a6a <__swhatbuf_r+0x12>
 8008a90:	9901      	ldr	r1, [sp, #4]
 8008a92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a9a:	4259      	negs	r1, r3
 8008a9c:	4159      	adcs	r1, r3
 8008a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aa2:	e7eb      	b.n	8008a7c <__swhatbuf_r+0x24>

08008aa4 <__smakebuf_r>:
 8008aa4:	898b      	ldrh	r3, [r1, #12]
 8008aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa8:	079d      	lsls	r5, r3, #30
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460c      	mov	r4, r1
 8008aae:	d507      	bpl.n	8008ac0 <__smakebuf_r+0x1c>
 8008ab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	6163      	str	r3, [r4, #20]
 8008abc:	b003      	add	sp, #12
 8008abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac0:	ab01      	add	r3, sp, #4
 8008ac2:	466a      	mov	r2, sp
 8008ac4:	f7ff ffc8 	bl	8008a58 <__swhatbuf_r>
 8008ac8:	9f00      	ldr	r7, [sp, #0]
 8008aca:	4605      	mov	r5, r0
 8008acc:	4639      	mov	r1, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7fe fdb8 	bl	8007644 <_malloc_r>
 8008ad4:	b948      	cbnz	r0, 8008aea <__smakebuf_r+0x46>
 8008ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ada:	059a      	lsls	r2, r3, #22
 8008adc:	d4ee      	bmi.n	8008abc <__smakebuf_r+0x18>
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	f043 0302 	orr.w	r3, r3, #2
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	e7e2      	b.n	8008ab0 <__smakebuf_r+0xc>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	6020      	str	r0, [r4, #0]
 8008aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008afa:	b15b      	cbz	r3, 8008b14 <__smakebuf_r+0x70>
 8008afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f81d 	bl	8008b40 <_isatty_r>
 8008b06:	b128      	cbz	r0, 8008b14 <__smakebuf_r+0x70>
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	431d      	orrs	r5, r3
 8008b18:	81a5      	strh	r5, [r4, #12]
 8008b1a:	e7cf      	b.n	8008abc <__smakebuf_r+0x18>

08008b1c <_fstat_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d07      	ldr	r5, [pc, #28]	@ (8008b3c <_fstat_r+0x20>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f7f9 fbb4 	bl	8002296 <_fstat>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d102      	bne.n	8008b38 <_fstat_r+0x1c>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	b103      	cbz	r3, 8008b38 <_fstat_r+0x1c>
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20018de0 	.word	0x20018de0

08008b40 <_isatty_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d06      	ldr	r5, [pc, #24]	@ (8008b5c <_isatty_r+0x1c>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f9 fbb3 	bl	80022b6 <_isatty>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_isatty_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_isatty_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20018de0 	.word	0x20018de0

08008b60 <_init>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr

08008b6c <_fini>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr
